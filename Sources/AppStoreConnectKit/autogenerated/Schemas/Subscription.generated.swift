// autogenerated

// swiftlint:disable all
import Foundation

public struct Subscription: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case subscriptions
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var familySharable: Bool?

        public var groupLevel: Int?

        public var name: String?

        public var productId: String?

        public var reviewNote: String?

        public var state: State?

        public var subscriptionPeriod: SubscriptionPeriod?

        public init(
            familySharable: Bool? = nil,
            groupLevel: Int? = nil,
            name: String? = nil,
            productId: String? = nil,
            reviewNote: String? = nil,
            state: State? = nil,
            subscriptionPeriod: SubscriptionPeriod? = nil
        ) {
            self.familySharable = familySharable
            self.groupLevel = groupLevel
            self.name = name
            self.productId = productId
            self.reviewNote = reviewNote
            self.state = state
            self.subscriptionPeriod = subscriptionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case familySharable
            case groupLevel
            case name
            case productId
            case reviewNote
            case state
            case subscriptionPeriod
        }

        public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var approved: Self {
                .init(rawValue: "APPROVED")
            }

            public static var developerActionNeeded: Self {
                .init(rawValue: "DEVELOPER_ACTION_NEEDED")
            }

            public static var developerRemovedFromSale: Self {
                .init(rawValue: "DEVELOPER_REMOVED_FROM_SALE")
            }

            public static var inReview: Self {
                .init(rawValue: "IN_REVIEW")
            }

            public static var missingMetadata: Self {
                .init(rawValue: "MISSING_METADATA")
            }

            public static var pendingBinaryApproval: Self {
                .init(rawValue: "PENDING_BINARY_APPROVAL")
            }

            public static var readyToSubmit: Self {
                .init(rawValue: "READY_TO_SUBMIT")
            }

            public static var rejected: Self {
                .init(rawValue: "REJECTED")
            }

            public static var removedFromSale: Self {
                .init(rawValue: "REMOVED_FROM_SALE")
            }

            public static var waitingForReview: Self {
                .init(rawValue: "WAITING_FOR_REVIEW")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct SubscriptionPeriod: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var oneMonth: Self {
                .init(rawValue: "ONE_MONTH")
            }

            public static var oneWeek: Self {
                .init(rawValue: "ONE_WEEK")
            }

            public static var oneYear: Self {
                .init(rawValue: "ONE_YEAR")
            }

            public static var sixMonths: Self {
                .init(rawValue: "SIX_MONTHS")
            }

            public static var threeMonths: Self {
                .init(rawValue: "THREE_MONTHS")
            }

            public static var twoMonths: Self {
                .init(rawValue: "TWO_MONTHS")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var appStoreReviewScreenshot: AppStoreReviewScreenshot?

        public var group: Group?

        public var images: Images?

        public var introductoryOffers: IntroductoryOffers?

        public var offerCodes: OfferCodes?

        public var pricePoints: PricePoints?

        public var prices: Prices?

        public var promotedPurchase: PromotedPurchase?

        public var promotionalOffers: PromotionalOffers?

        public var subscriptionAvailability: SubscriptionAvailability?

        public var subscriptionLocalizations: SubscriptionLocalizations?

        public var winBackOffers: WinBackOffers?

        public init(
            appStoreReviewScreenshot: AppStoreReviewScreenshot? = nil,
            group: Group? = nil,
            images: Images? = nil,
            introductoryOffers: IntroductoryOffers? = nil,
            offerCodes: OfferCodes? = nil,
            pricePoints: PricePoints? = nil,
            prices: Prices? = nil,
            promotedPurchase: PromotedPurchase? = nil,
            promotionalOffers: PromotionalOffers? = nil,
            subscriptionAvailability: SubscriptionAvailability? = nil,
            subscriptionLocalizations: SubscriptionLocalizations? = nil,
            winBackOffers: WinBackOffers? = nil
        ) {
            self.appStoreReviewScreenshot = appStoreReviewScreenshot
            self.group = group
            self.images = images
            self.introductoryOffers = introductoryOffers
            self.offerCodes = offerCodes
            self.pricePoints = pricePoints
            self.prices = prices
            self.promotedPurchase = promotedPurchase
            self.promotionalOffers = promotionalOffers
            self.subscriptionAvailability = subscriptionAvailability
            self.subscriptionLocalizations = subscriptionLocalizations
            self.winBackOffers = winBackOffers
        }

        private enum CodingKeys: String, CodingKey {
            case appStoreReviewScreenshot
            case group
            case images
            case introductoryOffers
            case offerCodes
            case pricePoints
            case prices
            case promotedPurchase
            case promotionalOffers
            case subscriptionAvailability
            case subscriptionLocalizations
            case winBackOffers
        }

        public struct AppStoreReviewScreenshot: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionAppStoreReviewScreenshots
                }
            }
        }

        public struct Group: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionGroups
                }
            }
        }

        public struct Images: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionImages
                }
            }
        }

        public struct IntroductoryOffers: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionIntroductoryOffers
                }
            }
        }

        public struct OfferCodes: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionOfferCodes
                }
            }
        }

        public struct PricePoints: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct Prices: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionPrices
                }
            }
        }

        public struct PromotedPurchase: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case promotedPurchases
                }
            }
        }

        public struct PromotionalOffers: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionPromotionalOffers
                }
            }
        }

        public struct SubscriptionAvailability: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionAvailabilities
                }
            }
        }

        public struct SubscriptionLocalizations: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionLocalizations
                }
            }
        }

        public struct WinBackOffers: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case winBackOffers
                }
            }
        }
    }
}

// swiftlint:enable all
