// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterMatchmakingRuleSet: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case gameCenterMatchmakingRuleSets
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var maxPlayers: Int?

        public var minPlayers: Int?

        public var referenceName: String?

        public var ruleLanguageVersion: Int?

        public init(
            maxPlayers: Int? = nil,
            minPlayers: Int? = nil,
            referenceName: String? = nil,
            ruleLanguageVersion: Int? = nil
        ) {
            self.maxPlayers = maxPlayers
            self.minPlayers = minPlayers
            self.referenceName = referenceName
            self.ruleLanguageVersion = ruleLanguageVersion
        }

        private enum CodingKeys: String, CodingKey {
            case maxPlayers
            case minPlayers
            case referenceName
            case ruleLanguageVersion
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var matchmakingQueues: MatchmakingQueues?

        public var rules: Rules?

        public var teams: Teams?

        public init(
            matchmakingQueues: MatchmakingQueues? = nil,
            rules: Rules? = nil,
            teams: Teams? = nil
        ) {
            self.matchmakingQueues = matchmakingQueues
            self.rules = rules
            self.teams = teams
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingQueues
            case rules
            case teams
        }

        public struct MatchmakingQueues: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterMatchmakingQueues
                }
            }
        }

        public struct Rules: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterMatchmakingRules
                }
            }
        }

        public struct Teams: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterMatchmakingTeams
                }
            }
        }
    }
}

// swiftlint:enable all
