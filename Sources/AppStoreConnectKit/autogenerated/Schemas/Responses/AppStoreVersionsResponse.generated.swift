// autogenerated

// swiftlint:disable all
import Foundation

public struct AppStoreVersionsResponse: Hashable, Codable {
    public var data: [AppStoreVersion]

    public var included: [Included]?

    public var links: PagedDocumentLinks

    public var meta: PagingInformation?

    public init(
        data: [AppStoreVersion],
        included: [Included]? = nil,
        links: PagedDocumentLinks,
        meta: PagingInformation? = nil
    ) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }

    private enum CodingKeys: String, CodingKey {
        case data
        case included
        case links
        case meta
    }

    public enum Included: Hashable, Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case build(Build)
        case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
        case routingAppCoverage(RoutingAppCoverage)
        case appStoreReviewDetail(AppStoreReviewDetail)
        case appStoreVersionSubmission(AppStoreVersionSubmission)
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appStoreVersionExperiment(AppStoreVersionExperiment)

        public init(from decoder: Decoder) throws {
            self = try {
                var lastError: Error!
                do {
                    return .app(try App(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .ageRatingDeclaration(try AgeRatingDeclaration(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .appStoreVersionLocalization(try AppStoreVersionLocalization(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .build(try Build(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .appStoreVersionPhasedRelease(try AppStoreVersionPhasedRelease(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .routingAppCoverage(try RoutingAppCoverage(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .appStoreReviewDetail(try AppStoreReviewDetail(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .appStoreVersionSubmission(try AppStoreVersionSubmission(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .appClipDefaultExperience(try AppClipDefaultExperience(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .appStoreVersionExperiment(try AppStoreVersionExperiment(from: decoder))
                } catch {
                    lastError = error
                }
                throw lastError
            }()
        }

        public func encode(to encoder: Encoder) throws {
            switch self {
            case .app(let value):
                try value.encode(to: encoder)

            case .ageRatingDeclaration(let value):
                try value.encode(to: encoder)

            case .appStoreVersionLocalization(let value):
                try value.encode(to: encoder)

            case .build(let value):
                try value.encode(to: encoder)

            case .appStoreVersionPhasedRelease(let value):
                try value.encode(to: encoder)

            case .routingAppCoverage(let value):
                try value.encode(to: encoder)

            case .appStoreReviewDetail(let value):
                try value.encode(to: encoder)

            case .appStoreVersionSubmission(let value):
                try value.encode(to: encoder)

            case .appClipDefaultExperience(let value):
                try value.encode(to: encoder)

            case .appStoreVersionExperiment(let value):
                try value.encode(to: encoder)
            }
        }
    }
}

// swiftlint:enable all
