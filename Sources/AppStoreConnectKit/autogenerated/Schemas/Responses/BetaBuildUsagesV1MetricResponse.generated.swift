// autogenerated

// swiftlint:disable all
import Foundation

public struct BetaBuildUsagesV1MetricResponse: Hashable, Codable {
    public var data: [Data]

    public var links: PagedDocumentLinks

    public var meta: PagingInformation?

    public init(
        data: [Data],
        links: PagedDocumentLinks,
        meta: PagingInformation? = nil
    ) {
        self.data = data
        self.links = links
        self.meta = meta
    }

    private enum CodingKeys: String, CodingKey {
        case data
        case links
        case meta
    }

    public struct Data: Hashable, Codable {
        public var dataPoints: DataPoints?

        public var dimensions: Dimensions?

        public init(
            dataPoints: DataPoints? = nil,
            dimensions: Dimensions? = nil
        ) {
            self.dataPoints = dataPoints
            self.dimensions = dimensions
        }

        private enum CodingKeys: String, CodingKey {
            case dataPoints
            case dimensions
        }

        public struct DataPoints: Hashable, Codable {
            public var end: String?

            public var start: String?

            public var values: Values?

            public init(
                end: String? = nil,
                start: String? = nil,
                values: Values? = nil
            ) {
                self.end = end
                self.start = start
                self.values = values
            }

            private enum CodingKeys: String, CodingKey {
                case end
                case start
                case values
            }

            public struct Values: Hashable, Codable {
                public var crashCount: Int?

                public var feedbackCount: Int?

                public var installCount: Int?

                public var inviteCount: Int?

                public var sessionCount: Int?

                public init(
                    crashCount: Int? = nil,
                    feedbackCount: Int? = nil,
                    installCount: Int? = nil,
                    inviteCount: Int? = nil,
                    sessionCount: Int? = nil
                ) {
                    self.crashCount = crashCount
                    self.feedbackCount = feedbackCount
                    self.installCount = installCount
                    self.inviteCount = inviteCount
                    self.sessionCount = sessionCount
                }

                private enum CodingKeys: String, CodingKey {
                    case crashCount
                    case feedbackCount
                    case installCount
                    case inviteCount
                    case sessionCount
                }
            }
        }

        public struct Dimensions: Hashable, Codable {
            public var bundleIds: BundleIds?

            public init(bundleIds: BundleIds? = nil) {
                self.bundleIds = bundleIds
            }

            private enum CodingKeys: String, CodingKey {
                case bundleIds
            }

            public struct BundleIds: Hashable, Codable {
                public var links: Links?

                public init(links: Links? = nil) {
                    self.links = links
                }

                private enum CodingKeys: String, CodingKey {
                    case links
                }

                public struct Links: Hashable, Codable {
                    public var groupBy: URL?

                    public init(groupBy: URL? = nil) {
                        self.groupBy = groupBy
                    }

                    private enum CodingKeys: String, CodingKey {
                        case groupBy
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
