// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterDetailResponse: Hashable, Codable, Sendable {
    public var data: GameCenterDetail

    public var included: [Included]?

    public var links: DocumentLinks

    public init(
        data: GameCenterDetail,
        included: [Included]? = nil,
        links: DocumentLinks
    ) {
        self.data = data
        self.included = included
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case data
        case included
        case links
    }

    public enum Included: Hashable, Codable, Sendable {
        case app(App)
        case gameCenterAppVersion(GameCenterAppVersion)
        case gameCenterGroup(GameCenterGroup)
        case gameCenterLeaderboard(GameCenterLeaderboard)
        case gameCenterLeaderboardSet(GameCenterLeaderboardSet)
        case gameCenterAchievement(GameCenterAchievement)
        case gameCenterActivity(GameCenterActivity)
        case gameCenterChallenge(GameCenterChallenge)
        case gameCenterAchievementRelease(GameCenterAchievementRelease)
        case gameCenterActivityVersionRelease(GameCenterActivityVersionRelease)
        case gameCenterChallengeVersionRelease(GameCenterChallengeVersionRelease)
        case gameCenterLeaderboardRelease(GameCenterLeaderboardRelease)
        case gameCenterLeaderboardSetRelease(GameCenterLeaderboardSetRelease)
        case appStoreVersion(AppStoreVersion)

        public init(from decoder: Decoder) throws {
            self = try {
                var lastError: Error!
                do {
                    return .app(try App(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterAppVersion(try GameCenterAppVersion(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterGroup(try GameCenterGroup(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterLeaderboard(try GameCenterLeaderboard(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterLeaderboardSet(try GameCenterLeaderboardSet(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterAchievement(try GameCenterAchievement(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterActivity(try GameCenterActivity(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterChallenge(try GameCenterChallenge(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterAchievementRelease(try GameCenterAchievementRelease(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterActivityVersionRelease(try GameCenterActivityVersionRelease(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterChallengeVersionRelease(try GameCenterChallengeVersionRelease(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterLeaderboardRelease(try GameCenterLeaderboardRelease(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .gameCenterLeaderboardSetRelease(try GameCenterLeaderboardSetRelease(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .appStoreVersion(try AppStoreVersion(from: decoder))
                } catch {
                    lastError = error
                }
                throw lastError
            }()
        }

        public func encode(to encoder: Encoder) throws {
            switch self {
            case .app(let value):
                try value.encode(to: encoder)

            case .gameCenterAppVersion(let value):
                try value.encode(to: encoder)

            case .gameCenterGroup(let value):
                try value.encode(to: encoder)

            case .gameCenterLeaderboard(let value):
                try value.encode(to: encoder)

            case .gameCenterLeaderboardSet(let value):
                try value.encode(to: encoder)

            case .gameCenterAchievement(let value):
                try value.encode(to: encoder)

            case .gameCenterActivity(let value):
                try value.encode(to: encoder)

            case .gameCenterChallenge(let value):
                try value.encode(to: encoder)

            case .gameCenterAchievementRelease(let value):
                try value.encode(to: encoder)

            case .gameCenterActivityVersionRelease(let value):
                try value.encode(to: encoder)

            case .gameCenterChallengeVersionRelease(let value):
                try value.encode(to: encoder)

            case .gameCenterLeaderboardRelease(let value):
                try value.encode(to: encoder)

            case .gameCenterLeaderboardSetRelease(let value):
                try value.encode(to: encoder)

            case .appStoreVersion(let value):
                try value.encode(to: encoder)
            }
        }
    }
}

// swiftlint:enable all
