// autogenerated

// swiftlint:disable all
import Foundation

public struct XcodeMetrics: Hashable, Codable {
    public var insights: Insights?

    public var productData: [ProductData]?

    public var version: String?

    public init(
        insights: Insights? = nil,
        productData: [ProductData]? = nil,
        version: String? = nil
    ) {
        self.insights = insights
        self.productData = productData
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case insights
        case productData
        case version
    }

    public struct Insights: Hashable, Codable {
        public var regressions: [MetricsInsight]?

        public var trendingUp: [MetricsInsight]?

        public init(
            regressions: [MetricsInsight]? = nil,
            trendingUp: [MetricsInsight]? = nil
        ) {
            self.regressions = regressions
            self.trendingUp = trendingUp
        }

        private enum CodingKeys: String, CodingKey {
            case regressions
            case trendingUp
        }
    }

    public struct ProductData: Hashable, Codable {
        public var metricCategories: [MetricCategories]?

        public var platform: String?

        public init(
            metricCategories: [MetricCategories]? = nil,
            platform: String? = nil
        ) {
            self.metricCategories = metricCategories
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case metricCategories
            case platform
        }

        public struct MetricCategories: Hashable, Codable {
            public var identifier: MetricCategory?

            public var metrics: [Metrics]?

            public init(
                identifier: MetricCategory? = nil,
                metrics: [Metrics]? = nil
            ) {
                self.identifier = identifier
                self.metrics = metrics
            }

            private enum CodingKeys: String, CodingKey {
                case identifier
                case metrics
            }

            public struct Metrics: Hashable, Codable {
                public var datasets: [Datasets]?

                public var goalKeys: [GoalKeys]?

                public var identifier: String?

                public var unit: Unit?

                public init(
                    datasets: [Datasets]? = nil,
                    goalKeys: [GoalKeys]? = nil,
                    identifier: String? = nil,
                    unit: Unit? = nil
                ) {
                    self.datasets = datasets
                    self.goalKeys = goalKeys
                    self.identifier = identifier
                    self.unit = unit
                }

                private enum CodingKeys: String, CodingKey {
                    case datasets
                    case goalKeys
                    case identifier
                    case unit
                }

                public struct Datasets: Hashable, Codable {
                    public var filterCriteria: FilterCriteria?

                    public var points: [Points]?

                    public init(
                        filterCriteria: FilterCriteria? = nil,
                        points: [Points]? = nil
                    ) {
                        self.filterCriteria = filterCriteria
                        self.points = points
                    }

                    private enum CodingKeys: String, CodingKey {
                        case filterCriteria
                        case points
                    }

                    public struct FilterCriteria: Hashable, Codable {
                        public var device: String?

                        public var deviceMarketingName: String?

                        public var percentile: String?

                        public init(
                            device: String? = nil,
                            deviceMarketingName: String? = nil,
                            percentile: String? = nil
                        ) {
                            self.device = device
                            self.deviceMarketingName = deviceMarketingName
                            self.percentile = percentile
                        }

                        private enum CodingKeys: String, CodingKey {
                            case device
                            case deviceMarketingName
                            case percentile
                        }
                    }

                    public struct Points: Hashable, Codable {
                        public var errorMargin: Float?

                        public var goal: String?

                        public var percentageBreakdown: PercentageBreakdown?

                        public var value: Float?

                        public var version: String?

                        public init(
                            errorMargin: Float? = nil,
                            goal: String? = nil,
                            percentageBreakdown: PercentageBreakdown? = nil,
                            value: Float? = nil,
                            version: String? = nil
                        ) {
                            self.errorMargin = errorMargin
                            self.goal = goal
                            self.percentageBreakdown = percentageBreakdown
                            self.value = value
                            self.version = version
                        }

                        private enum CodingKeys: String, CodingKey {
                            case errorMargin
                            case goal
                            case percentageBreakdown
                            case value
                            case version
                        }

                        public struct PercentageBreakdown: Hashable, Codable {
                            public var subSystemLabel: String?

                            public var value: Float?

                            public init(
                                subSystemLabel: String? = nil,
                                value: Float? = nil
                            ) {
                                self.subSystemLabel = subSystemLabel
                                self.value = value
                            }

                            private enum CodingKeys: String, CodingKey {
                                case subSystemLabel
                                case value
                            }
                        }
                    }
                }

                public struct GoalKeys: Hashable, Codable {
                    public var goalKey: String?

                    public var lowerBound: Int?

                    public var upperBound: Int?

                    public init(
                        goalKey: String? = nil,
                        lowerBound: Int? = nil,
                        upperBound: Int? = nil
                    ) {
                        self.goalKey = goalKey
                        self.lowerBound = lowerBound
                        self.upperBound = upperBound
                    }

                    private enum CodingKeys: String, CodingKey {
                        case goalKey
                        case lowerBound
                        case upperBound
                    }
                }

                public struct Unit: Hashable, Codable {
                    public var displayName: String?

                    public var identifier: String?

                    public init(
                        displayName: String? = nil,
                        identifier: String? = nil
                    ) {
                        self.displayName = displayName
                        self.identifier = identifier
                    }

                    private enum CodingKeys: String, CodingKey {
                        case displayName
                        case identifier
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
