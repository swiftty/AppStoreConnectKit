// autogenerated

// swiftlint:disable all
import Foundation

public struct BetaFeedbackScreenshotSubmission: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case betaFeedbackScreenshotSubmissions
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var appPlatform: Platform?

        public var appUptimeInMilliseconds: Int?

        public var architecture: String?

        public var batteryPercentage: Int?

        public var buildBundleId: String?

        public var comment: String?

        public var connectionType: DeviceConnectionType?

        public var createdDate: String?

        public var deviceFamily: DeviceFamily?

        public var deviceModel: String?

        public var devicePlatform: Platform?

        public var diskBytesAvailable: Int?

        public var diskBytesTotal: Int?

        public var email: String?

        public var locale: String?

        public var osVersion: String?

        public var pairedAppleWatch: String?

        public var screenHeightInPoints: Int?

        public var screenWidthInPoints: Int?

        public var screenshots: [BetaFeedbackScreenshotImage]?

        public var timeZone: String?

        public init(
            appPlatform: Platform? = nil,
            appUptimeInMilliseconds: Int? = nil,
            architecture: String? = nil,
            batteryPercentage: Int? = nil,
            buildBundleId: String? = nil,
            comment: String? = nil,
            connectionType: DeviceConnectionType? = nil,
            createdDate: String? = nil,
            deviceFamily: DeviceFamily? = nil,
            deviceModel: String? = nil,
            devicePlatform: Platform? = nil,
            diskBytesAvailable: Int? = nil,
            diskBytesTotal: Int? = nil,
            email: String? = nil,
            locale: String? = nil,
            osVersion: String? = nil,
            pairedAppleWatch: String? = nil,
            screenHeightInPoints: Int? = nil,
            screenWidthInPoints: Int? = nil,
            screenshots: [BetaFeedbackScreenshotImage]? = nil,
            timeZone: String? = nil
        ) {
            self.appPlatform = appPlatform
            self.appUptimeInMilliseconds = appUptimeInMilliseconds
            self.architecture = architecture
            self.batteryPercentage = batteryPercentage
            self.buildBundleId = buildBundleId
            self.comment = comment
            self.connectionType = connectionType
            self.createdDate = createdDate
            self.deviceFamily = deviceFamily
            self.deviceModel = deviceModel
            self.devicePlatform = devicePlatform
            self.diskBytesAvailable = diskBytesAvailable
            self.diskBytesTotal = diskBytesTotal
            self.email = email
            self.locale = locale
            self.osVersion = osVersion
            self.pairedAppleWatch = pairedAppleWatch
            self.screenHeightInPoints = screenHeightInPoints
            self.screenWidthInPoints = screenWidthInPoints
            self.screenshots = screenshots
            self.timeZone = timeZone
        }

        private enum CodingKeys: String, CodingKey {
            case appPlatform
            case appUptimeInMilliseconds
            case architecture
            case batteryPercentage
            case buildBundleId
            case comment
            case connectionType
            case createdDate
            case deviceFamily
            case deviceModel
            case devicePlatform
            case diskBytesAvailable
            case diskBytesTotal
            case email
            case locale
            case osVersion
            case pairedAppleWatch
            case screenHeightInPoints
            case screenWidthInPoints
            case screenshots
            case timeZone
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var build: Build?

        public var tester: Tester?

        public init(
            build: Build? = nil,
            tester: Tester? = nil
        ) {
            self.build = build
            self.tester = tester
        }

        private enum CodingKeys: String, CodingKey {
            case build
            case tester
        }

        public struct Build: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case builds
                }
            }
        }

        public struct Tester: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaTesters
                }
            }
        }
    }
}

// swiftlint:enable all
