// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterActivity: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case gameCenterActivities
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var archived: Bool?

        public var maximumPlayersCount: Int?

        public var minimumPlayersCount: Int?

        public var playStyle: PlayStyle?

        public var properties: [String: String]?

        public var referenceName: String?

        public var supportsPartyCode: Bool?

        public var vendorIdentifier: String?

        public init(
            archived: Bool? = nil,
            maximumPlayersCount: Int? = nil,
            minimumPlayersCount: Int? = nil,
            playStyle: PlayStyle? = nil,
            properties: [String: String]? = nil,
            referenceName: String? = nil,
            supportsPartyCode: Bool? = nil,
            vendorIdentifier: String? = nil
        ) {
            self.archived = archived
            self.maximumPlayersCount = maximumPlayersCount
            self.minimumPlayersCount = minimumPlayersCount
            self.playStyle = playStyle
            self.properties = properties
            self.referenceName = referenceName
            self.supportsPartyCode = supportsPartyCode
            self.vendorIdentifier = vendorIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case archived
            case maximumPlayersCount
            case minimumPlayersCount
            case playStyle
            case properties
            case referenceName
            case supportsPartyCode
            case vendorIdentifier
        }

        public struct PlayStyle: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var asynchronous: Self {
                .init(rawValue: "ASYNCHRONOUS")
            }

            public static var synchronous: Self {
                .init(rawValue: "SYNCHRONOUS")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var achievements: Achievements?

        public var gameCenterDetail: GameCenterDetail?

        public var gameCenterGroup: GameCenterGroup?

        public var leaderboards: Leaderboards?

        public var versions: Versions?

        public init(
            achievements: Achievements? = nil,
            gameCenterDetail: GameCenterDetail? = nil,
            gameCenterGroup: GameCenterGroup? = nil,
            leaderboards: Leaderboards? = nil,
            versions: Versions? = nil
        ) {
            self.achievements = achievements
            self.gameCenterDetail = gameCenterDetail
            self.gameCenterGroup = gameCenterGroup
            self.leaderboards = leaderboards
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case achievements
            case gameCenterDetail
            case gameCenterGroup
            case leaderboards
            case versions
        }

        public struct Achievements: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterAchievements
                }
            }
        }

        public struct GameCenterDetail: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterDetails
                }
            }
        }

        public struct GameCenterGroup: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterGroups
                }
            }
        }

        public struct Leaderboards: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterLeaderboards
                }
            }
        }

        public struct Versions: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterActivityVersions
                }
            }
        }
    }
}

// swiftlint:enable all
