// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterMatchmakingTestRequestInlineCreate: Hashable, Codable {
    public var id: String?

    public var type: `Type`

    public var attributes: Attributes

    public var relationships: Relationships?

    public init(
        id: String? = nil,
        type: `Type`,
        attributes: Attributes,
        relationships: Relationships? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
    }

    public enum `Type`: String, Hashable, Codable {
        case gameCenterMatchmakingTestRequests
    }

    public struct Attributes: Hashable, Codable {
        public var appVersion: String

        public var bundleId: String

        public var locale: Locale?

        public var location: Location?

        public var maxPlayers: Int?

        public var minPlayers: Int?

        public var platform: Platform

        public var playerCount: Int?

        public var requestName: String

        public var secondsInQueue: Int

        public init(
            appVersion: String,
            bundleId: String,
            locale: Locale? = nil,
            location: Location? = nil,
            maxPlayers: Int? = nil,
            minPlayers: Int? = nil,
            platform: Platform,
            playerCount: Int? = nil,
            requestName: String,
            secondsInQueue: Int
        ) {
            self.appVersion = appVersion
            self.bundleId = bundleId
            self.locale = locale
            self.location = location
            self.maxPlayers = maxPlayers
            self.minPlayers = minPlayers
            self.platform = platform
            self.playerCount = playerCount
            self.requestName = requestName
            self.secondsInQueue = secondsInQueue
        }

        private enum CodingKeys: String, CodingKey {
            case appVersion
            case bundleId
            case locale
            case location
            case maxPlayers
            case minPlayers
            case platform
            case playerCount
            case requestName
            case secondsInQueue
        }

        public enum Locale: Hashable, Codable, RawRepresentable {
            case aR-SA
            case cA-ES
            case cS-CZ
            case dA-DK
            case dE-DE
            case eL-GR
            case eN-AU
            case eN-GB
            case eN-KY
            case eN-US
            case eS-ES
            case eS-MX
            case fI-FI
            case fR-CA
            case fR-FR
            case hI-IN
            case hR-HR
            case hU-HU
            case iD-ID
            case iT-IT
            case iW-IL
            case jA-JP
            case kO-KR
            case mS-MY
            case nL-NL
            case nO-NO
            case pL-PL
            case pT-BR
            case pT-PT
            case rO-RO
            case rU-RU
            case sK-SK
            case sV-SE
            case tH-TH
            case tR-TR
            case uK-UA
            case zH-CN
            case zH-HK
            case zH-TW
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .aR-SA: return "AR-SA"
                case .cA-ES: return "CA-ES"
                case .cS-CZ: return "CS-CZ"
                case .dA-DK: return "DA-DK"
                case .dE-DE: return "DE-DE"
                case .eL-GR: return "EL-GR"
                case .eN-AU: return "EN-AU"
                case .eN-GB: return "EN-GB"
                case .eN-KY: return "EN-KY"
                case .eN-US: return "EN-US"
                case .eS-ES: return "ES-ES"
                case .eS-MX: return "ES-MX"
                case .fI-FI: return "FI-FI"
                case .fR-CA: return "FR-CA"
                case .fR-FR: return "FR-FR"
                case .hI-IN: return "HI-IN"
                case .hR-HR: return "HR-HR"
                case .hU-HU: return "HU-HU"
                case .iD-ID: return "ID-ID"
                case .iT-IT: return "IT-IT"
                case .iW-IL: return "IW-IL"
                case .jA-JP: return "JA-JP"
                case .kO-KR: return "KO-KR"
                case .mS-MY: return "MS-MY"
                case .nL-NL: return "NL-NL"
                case .nO-NO: return "NO-NO"
                case .pL-PL: return "PL-PL"
                case .pT-BR: return "PT-BR"
                case .pT-PT: return "PT-PT"
                case .rO-RO: return "RO-RO"
                case .rU-RU: return "RU-RU"
                case .sK-SK: return "SK-SK"
                case .sV-SE: return "SV-SE"
                case .tH-TH: return "TH-TH"
                case .tR-TR: return "TR-TR"
                case .uK-UA: return "UK-UA"
                case .zH-CN: return "ZH-CN"
                case .zH-HK: return "ZH-HK"
                case .zH-TW: return "ZH-TW"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "AR-SA": self = .aR-SA
                case "CA-ES": self = .cA-ES
                case "CS-CZ": self = .cS-CZ
                case "DA-DK": self = .dA-DK
                case "DE-DE": self = .dE-DE
                case "EL-GR": self = .eL-GR
                case "EN-AU": self = .eN-AU
                case "EN-GB": self = .eN-GB
                case "EN-KY": self = .eN-KY
                case "EN-US": self = .eN-US
                case "ES-ES": self = .eS-ES
                case "ES-MX": self = .eS-MX
                case "FI-FI": self = .fI-FI
                case "FR-CA": self = .fR-CA
                case "FR-FR": self = .fR-FR
                case "HI-IN": self = .hI-IN
                case "HR-HR": self = .hR-HR
                case "HU-HU": self = .hU-HU
                case "ID-ID": self = .iD-ID
                case "IT-IT": self = .iT-IT
                case "IW-IL": self = .iW-IL
                case "JA-JP": self = .jA-JP
                case "KO-KR": self = .kO-KR
                case "MS-MY": self = .mS-MY
                case "NL-NL": self = .nL-NL
                case "NO-NO": self = .nO-NO
                case "PL-PL": self = .pL-PL
                case "PT-BR": self = .pT-BR
                case "PT-PT": self = .pT-PT
                case "RO-RO": self = .rO-RO
                case "RU-RU": self = .rU-RU
                case "SK-SK": self = .sK-SK
                case "SV-SE": self = .sV-SE
                case "TH-TH": self = .tH-TH
                case "TR-TR": self = .tR-TR
                case "UK-UA": self = .uK-UA
                case "ZH-CN": self = .zH-CN
                case "ZH-HK": self = .zH-HK
                case "ZH-TW": self = .zH-TW
                default: self = .unknown(rawValue)
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var matchmakingPlayerProperties: MatchmakingPlayerProperties?

        public init(matchmakingPlayerProperties: MatchmakingPlayerProperties? = nil) {
            self.matchmakingPlayerProperties = matchmakingPlayerProperties
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingPlayerProperties
        }

        public struct MatchmakingPlayerProperties: Hashable, Codable {
            public var data: [Data]?

            public init(data: [Data]? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterMatchmakingTestPlayerProperties
                }
            }
        }
    }
}

// swiftlint:enable all
