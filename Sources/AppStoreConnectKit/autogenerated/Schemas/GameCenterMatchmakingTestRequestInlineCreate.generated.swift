// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterMatchmakingTestRequestInlineCreate: Hashable, Codable, Sendable {
    public var id: String?

    public var type: `Type`

    public var attributes: Attributes

    public var relationships: Relationships?

    public init(
        id: String? = nil,
        type: `Type`,
        attributes: Attributes,
        relationships: Relationships? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case gameCenterMatchmakingTestRequests
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var appVersion: String

        public var bundleId: String

        public var locale: Locale?

        public var location: Location?

        public var maxPlayers: Int?

        public var minPlayers: Int?

        public var platform: Platform

        public var playerCount: Int?

        public var requestName: String

        public var secondsInQueue: Int

        public init(
            appVersion: String,
            bundleId: String,
            locale: Locale? = nil,
            location: Location? = nil,
            maxPlayers: Int? = nil,
            minPlayers: Int? = nil,
            platform: Platform,
            playerCount: Int? = nil,
            requestName: String,
            secondsInQueue: Int
        ) {
            self.appVersion = appVersion
            self.bundleId = bundleId
            self.locale = locale
            self.location = location
            self.maxPlayers = maxPlayers
            self.minPlayers = minPlayers
            self.platform = platform
            self.playerCount = playerCount
            self.requestName = requestName
            self.secondsInQueue = secondsInQueue
        }

        private enum CodingKeys: String, CodingKey {
            case appVersion
            case bundleId
            case locale
            case location
            case maxPlayers
            case minPlayers
            case platform
            case playerCount
            case requestName
            case secondsInQueue
        }

        public struct Locale: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var ar_sa: Self {
                .init(rawValue: "AR-SA")
            }

            public static var ca_es: Self {
                .init(rawValue: "CA-ES")
            }

            public static var cs_cz: Self {
                .init(rawValue: "CS-CZ")
            }

            public static var da_dk: Self {
                .init(rawValue: "DA-DK")
            }

            public static var de_de: Self {
                .init(rawValue: "DE-DE")
            }

            public static var el_gr: Self {
                .init(rawValue: "EL-GR")
            }

            public static var en_au: Self {
                .init(rawValue: "EN-AU")
            }

            public static var en_gb: Self {
                .init(rawValue: "EN-GB")
            }

            public static var en_ky: Self {
                .init(rawValue: "EN-KY")
            }

            public static var en_us: Self {
                .init(rawValue: "EN-US")
            }

            public static var es_es: Self {
                .init(rawValue: "ES-ES")
            }

            public static var es_mx: Self {
                .init(rawValue: "ES-MX")
            }

            public static var fi_fi: Self {
                .init(rawValue: "FI-FI")
            }

            public static var fr_ca: Self {
                .init(rawValue: "FR-CA")
            }

            public static var fr_fr: Self {
                .init(rawValue: "FR-FR")
            }

            public static var hi_in: Self {
                .init(rawValue: "HI-IN")
            }

            public static var hr_hr: Self {
                .init(rawValue: "HR-HR")
            }

            public static var hu_hu: Self {
                .init(rawValue: "HU-HU")
            }

            public static var id_id: Self {
                .init(rawValue: "ID-ID")
            }

            public static var it_it: Self {
                .init(rawValue: "IT-IT")
            }

            public static var iw_il: Self {
                .init(rawValue: "IW-IL")
            }

            public static var ja_jp: Self {
                .init(rawValue: "JA-JP")
            }

            public static var ko_kr: Self {
                .init(rawValue: "KO-KR")
            }

            public static var ms_my: Self {
                .init(rawValue: "MS-MY")
            }

            public static var nl_nl: Self {
                .init(rawValue: "NL-NL")
            }

            public static var no_no: Self {
                .init(rawValue: "NO-NO")
            }

            public static var pl_pl: Self {
                .init(rawValue: "PL-PL")
            }

            public static var pt_br: Self {
                .init(rawValue: "PT-BR")
            }

            public static var pt_pt: Self {
                .init(rawValue: "PT-PT")
            }

            public static var ro_ro: Self {
                .init(rawValue: "RO-RO")
            }

            public static var ru_ru: Self {
                .init(rawValue: "RU-RU")
            }

            public static var sk_sk: Self {
                .init(rawValue: "SK-SK")
            }

            public static var sv_se: Self {
                .init(rawValue: "SV-SE")
            }

            public static var th_th: Self {
                .init(rawValue: "TH-TH")
            }

            public static var tr_tr: Self {
                .init(rawValue: "TR-TR")
            }

            public static var uk_ua: Self {
                .init(rawValue: "UK-UA")
            }

            public static var zh_cn: Self {
                .init(rawValue: "ZH-CN")
            }

            public static var zh_hk: Self {
                .init(rawValue: "ZH-HK")
            }

            public static var zh_tw: Self {
                .init(rawValue: "ZH-TW")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var matchmakingPlayerProperties: MatchmakingPlayerProperties?

        public init(matchmakingPlayerProperties: MatchmakingPlayerProperties? = nil) {
            self.matchmakingPlayerProperties = matchmakingPlayerProperties
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingPlayerProperties
        }

        public struct MatchmakingPlayerProperties: Hashable, Codable, Sendable {
            public var data: [Data]?

            public init(data: [Data]? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterMatchmakingTestPlayerProperties
                }
            }
        }
    }
}

// swiftlint:enable all
