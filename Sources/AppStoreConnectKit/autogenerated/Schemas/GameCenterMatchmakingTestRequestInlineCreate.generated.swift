// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterMatchmakingTestRequestInlineCreate: Hashable, Codable {
    public var id: String?

    public var type: `Type`

    public var attributes: Attributes

    public var relationships: Relationships?

    public init(
        id: String? = nil,
        type: `Type`,
        attributes: Attributes,
        relationships: Relationships? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
    }

    public enum `Type`: String, Hashable, Codable {
        case gameCenterMatchmakingTestRequests
    }

    public struct Attributes: Hashable, Codable {
        public var appVersion: String

        public var bundleId: String

        public var locale: Locale?

        public var location: Location?

        public var maxPlayers: Int?

        public var minPlayers: Int?

        public var platform: Platform

        public var playerCount: Int?

        public var requestName: String

        public var secondsInQueue: Int

        public init(
            appVersion: String,
            bundleId: String,
            locale: Locale? = nil,
            location: Location? = nil,
            maxPlayers: Int? = nil,
            minPlayers: Int? = nil,
            platform: Platform,
            playerCount: Int? = nil,
            requestName: String,
            secondsInQueue: Int
        ) {
            self.appVersion = appVersion
            self.bundleId = bundleId
            self.locale = locale
            self.location = location
            self.maxPlayers = maxPlayers
            self.minPlayers = minPlayers
            self.platform = platform
            self.playerCount = playerCount
            self.requestName = requestName
            self.secondsInQueue = secondsInQueue
        }

        private enum CodingKeys: String, CodingKey {
            case appVersion
            case bundleId
            case locale
            case location
            case maxPlayers
            case minPlayers
            case platform
            case playerCount
            case requestName
            case secondsInQueue
        }

        public enum Locale: Hashable, Codable, RawRepresentable {
            case ar_sa
            case ca_es
            case cs_cz
            case da_dk
            case de_de
            case el_gr
            case en_au
            case en_gb
            case en_ky
            case en_us
            case es_es
            case es_mx
            case fi_fi
            case fr_ca
            case fr_fr
            case hi_in
            case hr_hr
            case hu_hu
            case id_id
            case it_it
            case iw_il
            case ja_jp
            case ko_kr
            case ms_my
            case nl_nl
            case no_no
            case pl_pl
            case pt_br
            case pt_pt
            case ro_ro
            case ru_ru
            case sk_sk
            case sv_se
            case th_th
            case tr_tr
            case uk_ua
            case zh_cn
            case zh_hk
            case zh_tw
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .ar_sa: return "AR-SA"
                case .ca_es: return "CA-ES"
                case .cs_cz: return "CS-CZ"
                case .da_dk: return "DA-DK"
                case .de_de: return "DE-DE"
                case .el_gr: return "EL-GR"
                case .en_au: return "EN-AU"
                case .en_gb: return "EN-GB"
                case .en_ky: return "EN-KY"
                case .en_us: return "EN-US"
                case .es_es: return "ES-ES"
                case .es_mx: return "ES-MX"
                case .fi_fi: return "FI-FI"
                case .fr_ca: return "FR-CA"
                case .fr_fr: return "FR-FR"
                case .hi_in: return "HI-IN"
                case .hr_hr: return "HR-HR"
                case .hu_hu: return "HU-HU"
                case .id_id: return "ID-ID"
                case .it_it: return "IT-IT"
                case .iw_il: return "IW-IL"
                case .ja_jp: return "JA-JP"
                case .ko_kr: return "KO-KR"
                case .ms_my: return "MS-MY"
                case .nl_nl: return "NL-NL"
                case .no_no: return "NO-NO"
                case .pl_pl: return "PL-PL"
                case .pt_br: return "PT-BR"
                case .pt_pt: return "PT-PT"
                case .ro_ro: return "RO-RO"
                case .ru_ru: return "RU-RU"
                case .sk_sk: return "SK-SK"
                case .sv_se: return "SV-SE"
                case .th_th: return "TH-TH"
                case .tr_tr: return "TR-TR"
                case .uk_ua: return "UK-UA"
                case .zh_cn: return "ZH-CN"
                case .zh_hk: return "ZH-HK"
                case .zh_tw: return "ZH-TW"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "AR-SA": self = .ar_sa
                case "CA-ES": self = .ca_es
                case "CS-CZ": self = .cs_cz
                case "DA-DK": self = .da_dk
                case "DE-DE": self = .de_de
                case "EL-GR": self = .el_gr
                case "EN-AU": self = .en_au
                case "EN-GB": self = .en_gb
                case "EN-KY": self = .en_ky
                case "EN-US": self = .en_us
                case "ES-ES": self = .es_es
                case "ES-MX": self = .es_mx
                case "FI-FI": self = .fi_fi
                case "FR-CA": self = .fr_ca
                case "FR-FR": self = .fr_fr
                case "HI-IN": self = .hi_in
                case "HR-HR": self = .hr_hr
                case "HU-HU": self = .hu_hu
                case "ID-ID": self = .id_id
                case "IT-IT": self = .it_it
                case "IW-IL": self = .iw_il
                case "JA-JP": self = .ja_jp
                case "KO-KR": self = .ko_kr
                case "MS-MY": self = .ms_my
                case "NL-NL": self = .nl_nl
                case "NO-NO": self = .no_no
                case "PL-PL": self = .pl_pl
                case "PT-BR": self = .pt_br
                case "PT-PT": self = .pt_pt
                case "RO-RO": self = .ro_ro
                case "RU-RU": self = .ru_ru
                case "SK-SK": self = .sk_sk
                case "SV-SE": self = .sv_se
                case "TH-TH": self = .th_th
                case "TR-TR": self = .tr_tr
                case "UK-UA": self = .uk_ua
                case "ZH-CN": self = .zh_cn
                case "ZH-HK": self = .zh_hk
                case "ZH-TW": self = .zh_tw
                default: self = .unknown(rawValue)
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var matchmakingPlayerProperties: MatchmakingPlayerProperties?

        public init(matchmakingPlayerProperties: MatchmakingPlayerProperties? = nil) {
            self.matchmakingPlayerProperties = matchmakingPlayerProperties
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingPlayerProperties
        }

        public struct MatchmakingPlayerProperties: Hashable, Codable {
            public var data: [Data]?

            public init(data: [Data]? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterMatchmakingTestPlayerProperties
                }
            }
        }
    }
}

// swiftlint:enable all
