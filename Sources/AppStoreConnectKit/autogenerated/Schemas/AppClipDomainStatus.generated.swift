// autogenerated

// swiftlint:disable all
import Foundation

public struct AppClipDomainStatus: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case appClipDomainStatuses
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var domains: [Domains]?

        public var lastUpdatedDate: String?

        public init(
            domains: [Domains]? = nil,
            lastUpdatedDate: String? = nil
        ) {
            self.domains = domains
            self.lastUpdatedDate = lastUpdatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case domains
            case lastUpdatedDate
        }

        public struct Domains: Hashable, Codable, Sendable {
            public var domain: String?

            public var errorCode: ErrorCode?

            public var isValid: Bool?

            public var lastUpdatedDate: String?

            public init(
                domain: String? = nil,
                errorCode: ErrorCode? = nil,
                isValid: Bool? = nil,
                lastUpdatedDate: String? = nil
            ) {
                self.domain = domain
                self.errorCode = errorCode
                self.isValid = isValid
                self.lastUpdatedDate = lastUpdatedDate
            }

            private enum CodingKeys: String, CodingKey {
                case domain
                case errorCode
                case isValid
                case lastUpdatedDate
            }

            public struct ErrorCode: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var badHttpResponse: Self {
                    .init(rawValue: "BAD_HTTP_RESPONSE")
                }

                public static var badJsonContent: Self {
                    .init(rawValue: "BAD_JSON_CONTENT")
                }

                public static var badPkcs7Signature: Self {
                    .init(rawValue: "BAD_PKCS7_SIGNATURE")
                }

                public static var cannotReachAasaFile: Self {
                    .init(rawValue: "CANNOT_REACH_AASA_FILE")
                }

                public static var crossSiteRedirectsForbidden: Self {
                    .init(rawValue: "CROSS_SITE_REDIRECTS_FORBIDDEN")
                }

                public static var dnsError: Self {
                    .init(rawValue: "DNS_ERROR")
                }

                public static var insecureRedirectsForbidden: Self {
                    .init(rawValue: "INSECURE_REDIRECTS_FORBIDDEN")
                }

                public static var invalidEntitlementMissingSection: Self {
                    .init(rawValue: "INVALID_ENTITLEMENT_MISSING_SECTION")
                }

                public static var invalidEntitlementSyntaxError: Self {
                    .init(rawValue: "INVALID_ENTITLEMENT_SYNTAX_ERROR")
                }

                public static var invalidEntitlementUnhandledSection: Self {
                    .init(rawValue: "INVALID_ENTITLEMENT_UNHANDLED_SECTION")
                }

                public static var invalidEntitlementUnknownId: Self {
                    .init(rawValue: "INVALID_ENTITLEMENT_UNKNOWN_ID")
                }

                public static var networkError: Self {
                    .init(rawValue: "NETWORK_ERROR")
                }

                public static var networkErrorTemporary: Self {
                    .init(rawValue: "NETWORK_ERROR_TEMPORARY")
                }

                public static var otherError: Self {
                    .init(rawValue: "OTHER_ERROR")
                }

                public static var timeout: Self {
                    .init(rawValue: "TIMEOUT")
                }

                public static var tlsError: Self {
                    .init(rawValue: "TLS_ERROR")
                }

                public static var tooManyRedirects: Self {
                    .init(rawValue: "TOO_MANY_REDIRECTS")
                }

                public static var unexpectedError: Self {
                    .init(rawValue: "UNEXPECTED_ERROR")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }
        }
    }
}

// swiftlint:enable all
