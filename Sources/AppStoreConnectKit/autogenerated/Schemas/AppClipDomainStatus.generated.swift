// autogenerated

// swiftlint:disable all
import Foundation

public struct AppClipDomainStatus: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case appClipDomainStatuses
    }

    public struct Attributes: Hashable, Codable {
        public var domains: [Domains]?

        public var lastUpdatedDate: String?

        public init(
            domains: [Domains]? = nil,
            lastUpdatedDate: String? = nil
        ) {
            self.domains = domains
            self.lastUpdatedDate = lastUpdatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case domains
            case lastUpdatedDate
        }

        public struct Domains: Hashable, Codable {
            public var domain: String?

            public var errorCode: ErrorCode?

            public var isValid: Bool?

            public var lastUpdatedDate: String?

            public init(
                domain: String? = nil,
                errorCode: ErrorCode? = nil,
                isValid: Bool? = nil,
                lastUpdatedDate: String? = nil
            ) {
                self.domain = domain
                self.errorCode = errorCode
                self.isValid = isValid
                self.lastUpdatedDate = lastUpdatedDate
            }

            private enum CodingKeys: String, CodingKey {
                case domain
                case errorCode
                case isValid
                case lastUpdatedDate
            }

            public enum ErrorCode: Hashable, Codable, RawRepresentable {
                case badHttpResponse
                case badJsonContent
                case badPkcs7Signature
                case cannotReachAasaFile
                case dnsError
                case insecureRedirectsForbidden
                case invalidEntitlementMissingSection
                case invalidEntitlementSyntaxError
                case invalidEntitlementUnhandledSection
                case invalidEntitlementUnknownId
                case networkError
                case networkErrorTemporary
                case otherError
                case timeout
                case tlsError
                case unexpectedError
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .badHttpResponse: return "BAD_HTTP_RESPONSE"
                    case .badJsonContent: return "BAD_JSON_CONTENT"
                    case .badPkcs7Signature: return "BAD_PKCS7_SIGNATURE"
                    case .cannotReachAasaFile: return "CANNOT_REACH_AASA_FILE"
                    case .dnsError: return "DNS_ERROR"
                    case .insecureRedirectsForbidden: return "INSECURE_REDIRECTS_FORBIDDEN"
                    case .invalidEntitlementMissingSection: return "INVALID_ENTITLEMENT_MISSING_SECTION"
                    case .invalidEntitlementSyntaxError: return "INVALID_ENTITLEMENT_SYNTAX_ERROR"
                    case .invalidEntitlementUnhandledSection: return "INVALID_ENTITLEMENT_UNHANDLED_SECTION"
                    case .invalidEntitlementUnknownId: return "INVALID_ENTITLEMENT_UNKNOWN_ID"
                    case .networkError: return "NETWORK_ERROR"
                    case .networkErrorTemporary: return "NETWORK_ERROR_TEMPORARY"
                    case .otherError: return "OTHER_ERROR"
                    case .timeout: return "TIMEOUT"
                    case .tlsError: return "TLS_ERROR"
                    case .unexpectedError: return "UNEXPECTED_ERROR"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "BAD_HTTP_RESPONSE": self = .badHttpResponse
                    case "BAD_JSON_CONTENT": self = .badJsonContent
                    case "BAD_PKCS7_SIGNATURE": self = .badPkcs7Signature
                    case "CANNOT_REACH_AASA_FILE": self = .cannotReachAasaFile
                    case "DNS_ERROR": self = .dnsError
                    case "INSECURE_REDIRECTS_FORBIDDEN": self = .insecureRedirectsForbidden
                    case "INVALID_ENTITLEMENT_MISSING_SECTION": self = .invalidEntitlementMissingSection
                    case "INVALID_ENTITLEMENT_SYNTAX_ERROR": self = .invalidEntitlementSyntaxError
                    case "INVALID_ENTITLEMENT_UNHANDLED_SECTION": self = .invalidEntitlementUnhandledSection
                    case "INVALID_ENTITLEMENT_UNKNOWN_ID": self = .invalidEntitlementUnknownId
                    case "NETWORK_ERROR": self = .networkError
                    case "NETWORK_ERROR_TEMPORARY": self = .networkErrorTemporary
                    case "OTHER_ERROR": self = .otherError
                    case "TIMEOUT": self = .timeout
                    case "TLS_ERROR": self = .tlsError
                    case "UNEXPECTED_ERROR": self = .unexpectedError
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
