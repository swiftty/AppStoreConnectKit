// autogenerated

// swiftlint:disable all
import Foundation

public struct Profile: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case profiles
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var createdDate: String?

        public var expirationDate: String?

        public var name: String?

        public var platform: BundleIdPlatform?

        public var profileContent: String?

        public var profileState: ProfileState?

        public var profileType: ProfileType?

        public var uuid: String?

        public init(
            createdDate: String? = nil,
            expirationDate: String? = nil,
            name: String? = nil,
            platform: BundleIdPlatform? = nil,
            profileContent: String? = nil,
            profileState: ProfileState? = nil,
            profileType: ProfileType? = nil,
            uuid: String? = nil
        ) {
            self.createdDate = createdDate
            self.expirationDate = expirationDate
            self.name = name
            self.platform = platform
            self.profileContent = profileContent
            self.profileState = profileState
            self.profileType = profileType
            self.uuid = uuid
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate
            case expirationDate
            case name
            case platform
            case profileContent
            case profileState
            case profileType
            case uuid
        }

        public struct ProfileState: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var active: Self {
                .init(rawValue: "ACTIVE")
            }

            public static var invalid: Self {
                .init(rawValue: "INVALID")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct ProfileType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var iOSAppAdhoc: Self {
                .init(rawValue: "IOS_APP_ADHOC")
            }

            public static var iOSAppDevelopment: Self {
                .init(rawValue: "IOS_APP_DEVELOPMENT")
            }

            public static var iOSAppInhouse: Self {
                .init(rawValue: "IOS_APP_INHOUSE")
            }

            public static var iOSAppStore: Self {
                .init(rawValue: "IOS_APP_STORE")
            }

            public static var macAppDevelopment: Self {
                .init(rawValue: "MAC_APP_DEVELOPMENT")
            }

            public static var macAppDirect: Self {
                .init(rawValue: "MAC_APP_DIRECT")
            }

            public static var macAppStore: Self {
                .init(rawValue: "MAC_APP_STORE")
            }

            public static var macCatalystAppDevelopment: Self {
                .init(rawValue: "MAC_CATALYST_APP_DEVELOPMENT")
            }

            public static var macCatalystAppDirect: Self {
                .init(rawValue: "MAC_CATALYST_APP_DIRECT")
            }

            public static var macCatalystAppStore: Self {
                .init(rawValue: "MAC_CATALYST_APP_STORE")
            }

            public static var tvOSAppAdhoc: Self {
                .init(rawValue: "TVOS_APP_ADHOC")
            }

            public static var tvOSAppDevelopment: Self {
                .init(rawValue: "TVOS_APP_DEVELOPMENT")
            }

            public static var tvOSAppInhouse: Self {
                .init(rawValue: "TVOS_APP_INHOUSE")
            }

            public static var tvOSAppStore: Self {
                .init(rawValue: "TVOS_APP_STORE")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var bundleId: BundleId?

        public var certificates: Certificates?

        public var devices: Devices?

        public init(
            bundleId: BundleId? = nil,
            certificates: Certificates? = nil,
            devices: Devices? = nil
        ) {
            self.bundleId = bundleId
            self.certificates = certificates
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId
            case certificates
            case devices
        }

        public struct BundleId: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case bundleIds
                }
            }
        }

        public struct Certificates: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case certificates
                }
            }
        }

        public struct Devices: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case devices
                }
            }
        }
    }
}

// swiftlint:enable all
