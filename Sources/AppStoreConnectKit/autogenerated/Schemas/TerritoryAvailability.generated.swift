// autogenerated

// swiftlint:disable all
import Foundation

public struct TerritoryAvailability: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case territoryAvailabilities
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var available: Bool?

        public var contentStatuses: [ContentStatuses]?

        public var preOrderEnabled: Bool?

        public var preOrderPublishDate: String?

        public var releaseDate: String?

        public init(
            available: Bool? = nil,
            contentStatuses: [ContentStatuses]? = nil,
            preOrderEnabled: Bool? = nil,
            preOrderPublishDate: String? = nil,
            releaseDate: String? = nil
        ) {
            self.available = available
            self.contentStatuses = contentStatuses
            self.preOrderEnabled = preOrderEnabled
            self.preOrderPublishDate = preOrderPublishDate
            self.releaseDate = releaseDate
        }

        private enum CodingKeys: String, CodingKey {
            case available
            case contentStatuses
            case preOrderEnabled
            case preOrderPublishDate
            case releaseDate
        }

        public struct ContentStatuses: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var available: Self {
                .init(rawValue: "AVAILABLE")
            }

            public static var availableForPreorder: Self {
                .init(rawValue: "AVAILABLE_FOR_PREORDER")
            }

            public static var availableForPreorderOnDate: Self {
                .init(rawValue: "AVAILABLE_FOR_PREORDER_ON_DATE")
            }

            public static var availableForSaleUnreleasedApp: Self {
                .init(rawValue: "AVAILABLE_FOR_SALE_UNRELEASED_APP")
            }

            public static var brazilRequiredTaxId: Self {
                .init(rawValue: "BRAZIL_REQUIRED_TAX_ID")
            }

            public static var cannotSell: Self {
                .init(rawValue: "CANNOT_SELL")
            }

            public static var cannotSellAdultOnly: Self {
                .init(rawValue: "CANNOT_SELL_ADULT_ONLY")
            }

            public static var cannotSellCasino: Self {
                .init(rawValue: "CANNOT_SELL_CASINO")
            }

            public static var cannotSellCasinoWithoutAgeVerification: Self {
                .init(rawValue: "CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION")
            }

            public static var cannotSellCasinoWithoutGrac: Self {
                .init(rawValue: "CANNOT_SELL_CASINO_WITHOUT_GRAC")
            }

            public static var cannotSellContests: Self {
                .init(rawValue: "CANNOT_SELL_CONTESTS")
            }

            public static var cannotSellGambling: Self {
                .init(rawValue: "CANNOT_SELL_GAMBLING")
            }

            public static var cannotSellGamblingContests: Self {
                .init(rawValue: "CANNOT_SELL_GAMBLING_CONTESTS")
            }

            public static var cannotSellNoniOSGames: Self {
                .init(rawValue: "CANNOT_SELL_NON_IOS_GAMES")
            }

            public static var cannotSellRestrictedRating: Self {
                .init(rawValue: "CANNOT_SELL_RESTRICTED_RATING")
            }

            public static var cannotSellSeventeenPlusApps: Self {
                .init(rawValue: "CANNOT_SELL_SEVENTEEN_PLUS_APPS")
            }

            public static var cannotSellSeventeenPlusGames: Self {
                .init(rawValue: "CANNOT_SELL_SEVENTEEN_PLUS_GAMES")
            }

            public static var cannotSellSexuallyExplicit: Self {
                .init(rawValue: "CANNOT_SELL_SEXUALLY_EXPLICIT")
            }

            public static var icpNumberInvalid: Self {
                .init(rawValue: "ICP_NUMBER_INVALID")
            }

            public static var icpNumberMissing: Self {
                .init(rawValue: "ICP_NUMBER_MISSING")
            }

            public static var missingGrn: Self {
                .init(rawValue: "MISSING_GRN")
            }

            public static var missingRating: Self {
                .init(rawValue: "MISSING_RATING")
            }

            public static var preorderOnUnreleasedApp: Self {
                .init(rawValue: "PREORDER_ON_UNRELEASED_APP")
            }

            public static var processingToAvailable: Self {
                .init(rawValue: "PROCESSING_TO_AVAILABLE")
            }

            public static var processingToNotAvailable: Self {
                .init(rawValue: "PROCESSING_TO_NOT_AVAILABLE")
            }

            public static var processingToPreOrder: Self {
                .init(rawValue: "PROCESSING_TO_PRE_ORDER")
            }

            public static var traderStatusNotProvided: Self {
                .init(rawValue: "TRADER_STATUS_NOT_PROVIDED")
            }

            public static var traderStatusVerificationFailed: Self {
                .init(rawValue: "TRADER_STATUS_VERIFICATION_FAILED")
            }

            public static var traderStatusVerificationStatusMissing: Self {
                .init(rawValue: "TRADER_STATUS_VERIFICATION_STATUS_MISSING")
            }

            public static var unverifiedGrn: Self {
                .init(rawValue: "UNVERIFIED_GRN")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var territory: Territory?

        public init(territory: Territory? = nil) {
            self.territory = territory
        }

        private enum CodingKeys: String, CodingKey {
            case territory
        }

        public struct Territory: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case territories
                }
            }
        }
    }
}

// swiftlint:enable all
