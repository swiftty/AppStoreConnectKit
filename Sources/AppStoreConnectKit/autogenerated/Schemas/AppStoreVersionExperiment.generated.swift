// autogenerated

// swiftlint:disable all
import Foundation

public struct AppStoreVersionExperiment: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case appStoreVersionExperiments
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var endDate: String?

        public var name: String?

        public var reviewRequired: Bool?

        public var startDate: String?

        public var state: State?

        public var trafficProportion: Int?

        public init(
            endDate: String? = nil,
            name: String? = nil,
            reviewRequired: Bool? = nil,
            startDate: String? = nil,
            state: State? = nil,
            trafficProportion: Int? = nil
        ) {
            self.endDate = endDate
            self.name = name
            self.reviewRequired = reviewRequired
            self.startDate = startDate
            self.state = state
            self.trafficProportion = trafficProportion
        }

        private enum CodingKeys: String, CodingKey {
            case endDate
            case name
            case reviewRequired
            case startDate
            case state
            case trafficProportion
        }

        public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var accepted: Self {
                .init(rawValue: "ACCEPTED")
            }

            public static var approved: Self {
                .init(rawValue: "APPROVED")
            }

            public static var completed: Self {
                .init(rawValue: "COMPLETED")
            }

            public static var inReview: Self {
                .init(rawValue: "IN_REVIEW")
            }

            public static var prepareForSubmission: Self {
                .init(rawValue: "PREPARE_FOR_SUBMISSION")
            }

            public static var readyForReview: Self {
                .init(rawValue: "READY_FOR_REVIEW")
            }

            public static var rejected: Self {
                .init(rawValue: "REJECTED")
            }

            public static var stopped: Self {
                .init(rawValue: "STOPPED")
            }

            public static var waitingForReview: Self {
                .init(rawValue: "WAITING_FOR_REVIEW")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var appStoreVersion: AppStoreVersion?

        public var appStoreVersionExperimentTreatments: AppStoreVersionExperimentTreatments?

        public init(
            appStoreVersion: AppStoreVersion? = nil,
            appStoreVersionExperimentTreatments: AppStoreVersionExperimentTreatments? = nil
        ) {
            self.appStoreVersion = appStoreVersion
            self.appStoreVersionExperimentTreatments = appStoreVersionExperimentTreatments
        }

        private enum CodingKeys: String, CodingKey {
            case appStoreVersion
            case appStoreVersionExperimentTreatments
        }

        public struct AppStoreVersion: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersions
                }
            }
        }

        public struct AppStoreVersionExperimentTreatments: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersionExperimentTreatments
                }
            }
        }
    }
}

// swiftlint:enable all
