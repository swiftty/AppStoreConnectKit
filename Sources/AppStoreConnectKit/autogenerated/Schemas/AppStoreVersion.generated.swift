// autogenerated

// swiftlint:disable all
import Foundation

public struct AppStoreVersion: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case appStoreVersions
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var appStoreState: AppStoreVersionState?

        public var appVersionState: AppVersionState?

        public var copyright: String?

        public var createdDate: String?

        public var downloadable: Bool?

        public var earliestReleaseDate: String?

        public var platform: Platform?

        public var releaseType: ReleaseType?

        public var reviewType: ReviewType?

        @available(*, deprecated)
        public var usesIdfa: Bool?

        public var versionString: String?

        public init(
            appStoreState: AppStoreVersionState? = nil,
            appVersionState: AppVersionState? = nil,
            copyright: String? = nil,
            createdDate: String? = nil,
            downloadable: Bool? = nil,
            earliestReleaseDate: String? = nil,
            platform: Platform? = nil,
            releaseType: ReleaseType? = nil,
            reviewType: ReviewType? = nil,
            usesIdfa: Bool? = nil,
            versionString: String? = nil
        ) {
            self.appStoreState = appStoreState
            self.appVersionState = appVersionState
            self.copyright = copyright
            self.createdDate = createdDate
            self.downloadable = downloadable
            self.earliestReleaseDate = earliestReleaseDate
            self.platform = platform
            self.releaseType = releaseType
            self.reviewType = reviewType
            self.usesIdfa = usesIdfa
            self.versionString = versionString
        }

        private enum CodingKeys: String, CodingKey {
            case appStoreState
            case appVersionState
            case copyright
            case createdDate
            case downloadable
            case earliestReleaseDate
            case platform
            case releaseType
            case reviewType
            case usesIdfa
            case versionString
        }

        public struct ReleaseType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var afterApproval: Self {
                .init(rawValue: "AFTER_APPROVAL")
            }

            public static var manual: Self {
                .init(rawValue: "MANUAL")
            }

            public static var scheduled: Self {
                .init(rawValue: "SCHEDULED")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct ReviewType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appStore: Self {
                .init(rawValue: "APP_STORE")
            }

            public static var notarization: Self {
                .init(rawValue: "NOTARIZATION")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        @available(*, deprecated)
        public var ageRatingDeclaration: AgeRatingDeclaration?

        public var alternativeDistributionPackage: AlternativeDistributionPackage?

        public var app: App?

        public var appClipDefaultExperience: AppClipDefaultExperience?

        public var appStoreReviewDetail: AppStoreReviewDetail?

        public var appStoreVersionExperiments: AppStoreVersionExperiments?

        public var appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2?

        public var appStoreVersionLocalizations: AppStoreVersionLocalizations?

        public var appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease?

        public var appStoreVersionSubmission: AppStoreVersionSubmission?

        public var build: Build?

        public var customerReviews: CustomerReviews?

        public var gameCenterAppVersion: GameCenterAppVersion?

        public var routingAppCoverage: RoutingAppCoverage?

        public init(
            ageRatingDeclaration: AgeRatingDeclaration? = nil,
            alternativeDistributionPackage: AlternativeDistributionPackage? = nil,
            app: App? = nil,
            appClipDefaultExperience: AppClipDefaultExperience? = nil,
            appStoreReviewDetail: AppStoreReviewDetail? = nil,
            appStoreVersionExperiments: AppStoreVersionExperiments? = nil,
            appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2? = nil,
            appStoreVersionLocalizations: AppStoreVersionLocalizations? = nil,
            appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease? = nil,
            appStoreVersionSubmission: AppStoreVersionSubmission? = nil,
            build: Build? = nil,
            customerReviews: CustomerReviews? = nil,
            gameCenterAppVersion: GameCenterAppVersion? = nil,
            routingAppCoverage: RoutingAppCoverage? = nil
        ) {
            self.ageRatingDeclaration = ageRatingDeclaration
            self.alternativeDistributionPackage = alternativeDistributionPackage
            self.app = app
            self.appClipDefaultExperience = appClipDefaultExperience
            self.appStoreReviewDetail = appStoreReviewDetail
            self.appStoreVersionExperiments = appStoreVersionExperiments
            self.appStoreVersionExperimentsV2 = appStoreVersionExperimentsV2
            self.appStoreVersionLocalizations = appStoreVersionLocalizations
            self.appStoreVersionPhasedRelease = appStoreVersionPhasedRelease
            self.appStoreVersionSubmission = appStoreVersionSubmission
            self.build = build
            self.customerReviews = customerReviews
            self.gameCenterAppVersion = gameCenterAppVersion
            self.routingAppCoverage = routingAppCoverage
        }

        private enum CodingKeys: String, CodingKey {
            case ageRatingDeclaration
            case alternativeDistributionPackage
            case app
            case appClipDefaultExperience
            case appStoreReviewDetail
            case appStoreVersionExperiments
            case appStoreVersionExperimentsV2
            case appStoreVersionLocalizations
            case appStoreVersionPhasedRelease
            case appStoreVersionSubmission
            case build
            case customerReviews
            case gameCenterAppVersion
            case routingAppCoverage
        }

        public struct AgeRatingDeclaration: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case ageRatingDeclarations
                }
            }
        }

        public struct AlternativeDistributionPackage: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case alternativeDistributionPackages
                }
            }
        }

        public struct App: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case apps
                }
            }
        }

        public struct AppClipDefaultExperience: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appClipDefaultExperiences
                }
            }
        }

        public struct AppStoreReviewDetail: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreReviewDetails
                }
            }
        }

        public struct AppStoreVersionExperiments: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersionExperiments
                }
            }
        }

        public struct AppStoreVersionExperimentsV2: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersionExperiments
                }
            }
        }

        public struct AppStoreVersionLocalizations: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersionLocalizations
                }
            }
        }

        public struct AppStoreVersionPhasedRelease: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersionPhasedReleases
                }
            }
        }

        public struct AppStoreVersionSubmission: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersionSubmissions
                }
            }
        }

        public struct Build: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case builds
                }
            }
        }

        public struct CustomerReviews: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct GameCenterAppVersion: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterAppVersions
                }
            }
        }

        public struct RoutingAppCoverage: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case routingAppCoverages
                }
            }
        }
    }
}

// swiftlint:enable all
