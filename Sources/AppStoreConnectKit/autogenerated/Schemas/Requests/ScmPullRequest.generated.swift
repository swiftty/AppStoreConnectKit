// autogenerated

// swiftlint:disable all
import Foundation

public struct ScmPullRequest: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case scmPullRequests
    }

    public struct Attributes: Hashable, Codable {
        public var destinationBranchName: String?

        public var destinationRepositoryName: String?

        public var destinationRepositoryOwner: String?

        public var isClosed: Bool?

        public var isCrossRepository: Bool?

        public var number: Int?

        public var sourceBranchName: String?

        public var sourceRepositoryName: String?

        public var sourceRepositoryOwner: String?

        public var title: String?

        public var webUrl: URL?

        public init(
            destinationBranchName: String? = nil,
            destinationRepositoryName: String? = nil,
            destinationRepositoryOwner: String? = nil,
            isClosed: Bool? = nil,
            isCrossRepository: Bool? = nil,
            number: Int? = nil,
            sourceBranchName: String? = nil,
            sourceRepositoryName: String? = nil,
            sourceRepositoryOwner: String? = nil,
            title: String? = nil,
            webUrl: URL? = nil
        ) {
            self.destinationBranchName = destinationBranchName
            self.destinationRepositoryName = destinationRepositoryName
            self.destinationRepositoryOwner = destinationRepositoryOwner
            self.isClosed = isClosed
            self.isCrossRepository = isCrossRepository
            self.number = number
            self.sourceBranchName = sourceBranchName
            self.sourceRepositoryName = sourceRepositoryName
            self.sourceRepositoryOwner = sourceRepositoryOwner
            self.title = title
            self.webUrl = webUrl
        }

        private enum CodingKeys: String, CodingKey {
            case destinationBranchName
            case destinationRepositoryName
            case destinationRepositoryOwner
            case isClosed
            case isCrossRepository
            case number
            case sourceBranchName
            case sourceRepositoryName
            case sourceRepositoryOwner
            case title
            case webUrl
        }
    }

    public struct Relationships: Hashable, Codable {
        public var repository: Repository?

        public init(repository: Repository? = nil) {
            self.repository = repository
        }

        private enum CodingKeys: String, CodingKey {
            case repository
        }

        public struct Repository: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case scmRepositories
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
