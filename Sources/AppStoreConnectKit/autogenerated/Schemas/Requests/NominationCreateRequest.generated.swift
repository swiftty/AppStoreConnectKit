// autogenerated

// swiftlint:disable all
import Foundation

public struct NominationCreateRequest: Hashable, Codable, Sendable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable, Sendable {
        public var type: `Type`

        public var attributes: Attributes

        public var relationships: Relationships

        public init(
            type: `Type`,
            attributes: Attributes,
            relationships: Relationships
        ) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case attributes
            case relationships
        }

        public enum `Type`: String, Hashable, Codable, Sendable {
            case nominations
        }

        public struct Attributes: Hashable, Codable, Sendable {
            public var type: `Type`

            public var description: String

            public var deviceFamilies: [DeviceFamily]?

            public var hasInAppEvents: Bool?

            public var launchInSelectMarketsFirst: Bool?

            public var locales: [String]?

            public var name: String

            public var notes: String?

            public var preOrderEnabled: Bool?

            public var publishEndDate: String?

            public var publishStartDate: String

            public var submitted: Bool

            public var supplementalMaterialsUris: [URL]?

            public init(
                type: `Type`,
                description: String,
                deviceFamilies: [DeviceFamily]? = nil,
                hasInAppEvents: Bool? = nil,
                launchInSelectMarketsFirst: Bool? = nil,
                locales: [String]? = nil,
                name: String,
                notes: String? = nil,
                preOrderEnabled: Bool? = nil,
                publishEndDate: String? = nil,
                publishStartDate: String,
                submitted: Bool,
                supplementalMaterialsUris: [URL]? = nil
            ) {
                self.type = type
                self.description = description
                self.deviceFamilies = deviceFamilies
                self.hasInAppEvents = hasInAppEvents
                self.launchInSelectMarketsFirst = launchInSelectMarketsFirst
                self.locales = locales
                self.name = name
                self.notes = notes
                self.preOrderEnabled = preOrderEnabled
                self.publishEndDate = publishEndDate
                self.publishStartDate = publishStartDate
                self.submitted = submitted
                self.supplementalMaterialsUris = supplementalMaterialsUris
            }

            private enum CodingKeys: String, CodingKey {
                case type
                case description
                case deviceFamilies
                case hasInAppEvents
                case launchInSelectMarketsFirst
                case locales
                case name
                case notes
                case preOrderEnabled
                case publishEndDate
                case publishStartDate
                case submitted
                case supplementalMaterialsUris
            }

            public struct `Type`: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appEnhancements: Self {
                    .init(rawValue: "APP_ENHANCEMENTS")
                }

                public static var appLaunch: Self {
                    .init(rawValue: "APP_LAUNCH")
                }

                public static var newContent: Self {
                    .init(rawValue: "NEW_CONTENT")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }
        }

        public struct Relationships: Hashable, Codable, Sendable {
            public var inAppEvents: InAppEvents?

            public var relatedApps: RelatedApps

            public var supportedTerritories: SupportedTerritories?

            public init(
                inAppEvents: InAppEvents? = nil,
                relatedApps: RelatedApps,
                supportedTerritories: SupportedTerritories? = nil
            ) {
                self.inAppEvents = inAppEvents
                self.relatedApps = relatedApps
                self.supportedTerritories = supportedTerritories
            }

            private enum CodingKeys: String, CodingKey {
                case inAppEvents
                case relatedApps
                case supportedTerritories
            }

            public struct InAppEvents: Hashable, Codable, Sendable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case appEvents
                    }
                }
            }

            public struct RelatedApps: Hashable, Codable, Sendable {
                public var data: [Data]

                public init(data: [Data]) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case apps
                    }
                }
            }

            public struct SupportedTerritories: Hashable, Codable, Sendable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case territories
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
