// autogenerated

// swiftlint:disable all
import Foundation

public struct BetaGroupCreateRequest: Hashable, Codable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable {
        public var type: `Type`

        public var attributes: Attributes

        public var relationships: Relationships

        public init(
            type: `Type`,
            attributes: Attributes,
            relationships: Relationships
        ) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case attributes
            case relationships
        }

        public enum `Type`: Hashable, Codable, RawRepresentable {
            case betaGroups
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .betaGroups: return "betaGroups"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "betaGroups": self = .betaGroups
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Attributes: Hashable, Codable {
            public var feedbackEnabled: Bool?

            public var hasAccessToAllBuilds: Bool?

            public var isInternalGroup: Bool?

            public var name: String

            public var publicLinkEnabled: Bool?

            public var publicLinkLimit: Int?

            public var publicLinkLimitEnabled: Bool?

            public init(
                feedbackEnabled: Bool? = nil,
                hasAccessToAllBuilds: Bool? = nil,
                isInternalGroup: Bool? = nil,
                name: String,
                publicLinkEnabled: Bool? = nil,
                publicLinkLimit: Int? = nil,
                publicLinkLimitEnabled: Bool? = nil
            ) {
                self.feedbackEnabled = feedbackEnabled
                self.hasAccessToAllBuilds = hasAccessToAllBuilds
                self.isInternalGroup = isInternalGroup
                self.name = name
                self.publicLinkEnabled = publicLinkEnabled
                self.publicLinkLimit = publicLinkLimit
                self.publicLinkLimitEnabled = publicLinkLimitEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case feedbackEnabled
                case hasAccessToAllBuilds
                case isInternalGroup
                case name
                case publicLinkEnabled
                case publicLinkLimit
                case publicLinkLimitEnabled
            }
        }

        public struct Relationships: Hashable, Codable {
            public var app: App

            public var betaTesters: BetaTesters?

            public var builds: Builds?

            public init(
                app: App,
                betaTesters: BetaTesters? = nil,
                builds: Builds? = nil
            ) {
                self.app = app
                self.betaTesters = betaTesters
                self.builds = builds
            }

            private enum CodingKeys: String, CodingKey {
                case app
                case betaTesters
                case builds
            }

            public struct App: Hashable, Codable {
                public var data: Data

                public init(data: Data) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case apps
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .apps: return "apps"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "apps": self = .apps
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct BetaTesters: Hashable, Codable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case betaTesters
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .betaTesters: return "betaTesters"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "betaTesters": self = .betaTesters
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct Builds: Hashable, Codable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case builds
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .builds: return "builds"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "builds": self = .builds
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
