// autogenerated

// swiftlint:disable all
import Foundation

public struct CiWorkflowCreateRequest: Hashable, Codable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable {
        public var type: `Type`

        public var attributes: Attributes

        public var relationships: Relationships

        public init(
            type: `Type`,
            attributes: Attributes,
            relationships: Relationships
        ) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case attributes
            case relationships
        }

        public enum `Type`: Hashable, Codable, RawRepresentable {
            case ciWorkflows
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .ciWorkflows: return "ciWorkflows"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "ciWorkflows": self = .ciWorkflows
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Attributes: Hashable, Codable {
            public var actions: [CiAction]

            public var branchStartCondition: CiBranchStartCondition?

            public var clean: Bool

            public var containerFilePath: String

            public var description: String

            public var isEnabled: Bool

            public var isLockedForEditing: Bool?

            public var name: String

            public var pullRequestStartCondition: CiPullRequestStartCondition?

            public var scheduledStartCondition: CiScheduledStartCondition?

            public var tagStartCondition: CiTagStartCondition?

            public init(
                actions: [CiAction],
                branchStartCondition: CiBranchStartCondition? = nil,
                clean: Bool,
                containerFilePath: String,
                description: String,
                isEnabled: Bool,
                isLockedForEditing: Bool? = nil,
                name: String,
                pullRequestStartCondition: CiPullRequestStartCondition? = nil,
                scheduledStartCondition: CiScheduledStartCondition? = nil,
                tagStartCondition: CiTagStartCondition? = nil
            ) {
                self.actions = actions
                self.branchStartCondition = branchStartCondition
                self.clean = clean
                self.containerFilePath = containerFilePath
                self.description = description
                self.isEnabled = isEnabled
                self.isLockedForEditing = isLockedForEditing
                self.name = name
                self.pullRequestStartCondition = pullRequestStartCondition
                self.scheduledStartCondition = scheduledStartCondition
                self.tagStartCondition = tagStartCondition
            }

            private enum CodingKeys: String, CodingKey {
                case actions
                case branchStartCondition
                case clean
                case containerFilePath
                case description
                case isEnabled
                case isLockedForEditing
                case name
                case pullRequestStartCondition
                case scheduledStartCondition
                case tagStartCondition
            }
        }

        public struct Relationships: Hashable, Codable {
            public var macOsVersion: MacOsVersion

            public var product: Product

            public var repository: Repository

            public var xcodeVersion: XcodeVersion

            public init(
                macOsVersion: MacOsVersion,
                product: Product,
                repository: Repository,
                xcodeVersion: XcodeVersion
            ) {
                self.macOsVersion = macOsVersion
                self.product = product
                self.repository = repository
                self.xcodeVersion = xcodeVersion
            }

            private enum CodingKeys: String, CodingKey {
                case macOsVersion
                case product
                case repository
                case xcodeVersion
            }

            public struct MacOsVersion: Hashable, Codable {
                public var data: Data

                public init(data: Data) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case ciMacOsVersions
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .ciMacOsVersions: return "ciMacOsVersions"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "ciMacOsVersions": self = .ciMacOsVersions
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct Product: Hashable, Codable {
                public var data: Data

                public init(data: Data) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case ciProducts
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .ciProducts: return "ciProducts"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "ciProducts": self = .ciProducts
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct Repository: Hashable, Codable {
                public var data: Data

                public init(data: Data) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case scmRepositories
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .scmRepositories: return "scmRepositories"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "scmRepositories": self = .scmRepositories
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct XcodeVersion: Hashable, Codable {
                public var data: Data

                public init(data: Data) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case ciXcodeVersions
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .ciXcodeVersions: return "ciXcodeVersions"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "ciXcodeVersions": self = .ciXcodeVersions
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
