// autogenerated

// swiftlint:disable all
import Foundation

public struct SubscriptionUpdateRequest: Hashable, Codable, Sendable {
    public var data: Data

    public var included: [Included]?

    public init(
        data: Data,
        included: [Included]? = nil
    ) {
        self.data = data
        self.included = included
    }

    private enum CodingKeys: String, CodingKey {
        case data
        case included
    }

    public struct Data: Hashable, Codable, Sendable {
        public var id: String

        public var type: `Type`

        public var attributes: Attributes?

        public var relationships: Relationships?

        public init(
            id: String,
            type: `Type`,
            attributes: Attributes? = nil,
            relationships: Relationships? = nil
        ) {
            self.id = id
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case type
            case attributes
            case relationships
        }

        public enum `Type`: String, Hashable, Codable, Sendable {
            case subscriptions
        }

        public struct Attributes: Hashable, Codable, Sendable {
            public var familySharable: Bool?

            public var groupLevel: Int?

            public var name: String?

            public var reviewNote: String?

            public var subscriptionPeriod: SubscriptionPeriod?

            public init(
                familySharable: Bool? = nil,
                groupLevel: Int? = nil,
                name: String? = nil,
                reviewNote: String? = nil,
                subscriptionPeriod: SubscriptionPeriod? = nil
            ) {
                self.familySharable = familySharable
                self.groupLevel = groupLevel
                self.name = name
                self.reviewNote = reviewNote
                self.subscriptionPeriod = subscriptionPeriod
            }

            private enum CodingKeys: String, CodingKey {
                case familySharable
                case groupLevel
                case name
                case reviewNote
                case subscriptionPeriod
            }

            public struct SubscriptionPeriod: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var oneMonth: Self {
                    .init(rawValue: "ONE_MONTH")
                }

                public static var oneWeek: Self {
                    .init(rawValue: "ONE_WEEK")
                }

                public static var oneYear: Self {
                    .init(rawValue: "ONE_YEAR")
                }

                public static var sixMonths: Self {
                    .init(rawValue: "SIX_MONTHS")
                }

                public static var threeMonths: Self {
                    .init(rawValue: "THREE_MONTHS")
                }

                public static var twoMonths: Self {
                    .init(rawValue: "TWO_MONTHS")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }
        }

        public struct Relationships: Hashable, Codable, Sendable {
            public var introductoryOffers: IntroductoryOffers?

            public var prices: Prices?

            public var promotionalOffers: PromotionalOffers?

            public init(
                introductoryOffers: IntroductoryOffers? = nil,
                prices: Prices? = nil,
                promotionalOffers: PromotionalOffers? = nil
            ) {
                self.introductoryOffers = introductoryOffers
                self.prices = prices
                self.promotionalOffers = promotionalOffers
            }

            private enum CodingKeys: String, CodingKey {
                case introductoryOffers
                case prices
                case promotionalOffers
            }

            public struct IntroductoryOffers: Hashable, Codable, Sendable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case subscriptionIntroductoryOffers
                    }
                }
            }

            public struct Prices: Hashable, Codable, Sendable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case subscriptionPrices
                    }
                }
            }

            public struct PromotionalOffers: Hashable, Codable, Sendable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case subscriptionPromotionalOffers
                    }
                }
            }
        }
    }

    public enum Included: Hashable, Codable, Sendable {
        case subscriptionPromotionalOfferInlineCreate(SubscriptionPromotionalOfferInlineCreate)
        case subscriptionPriceInlineCreate(SubscriptionPriceInlineCreate)
        case subscriptionIntroductoryOfferInlineCreate(SubscriptionIntroductoryOfferInlineCreate)

        public init(from decoder: Decoder) throws {
            self = try {
                var lastError: Error!
                do {
                    return .subscriptionPromotionalOfferInlineCreate(try SubscriptionPromotionalOfferInlineCreate(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .subscriptionPriceInlineCreate(try SubscriptionPriceInlineCreate(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .subscriptionIntroductoryOfferInlineCreate(try SubscriptionIntroductoryOfferInlineCreate(from: decoder))
                } catch {
                    lastError = error
                }
                throw lastError
            }()
        }

        public func encode(to encoder: Encoder) throws {
            switch self {
            case .subscriptionPromotionalOfferInlineCreate(let value):
                try value.encode(to: encoder)

            case .subscriptionPriceInlineCreate(let value):
                try value.encode(to: encoder)

            case .subscriptionIntroductoryOfferInlineCreate(let value):
                try value.encode(to: encoder)
            }
        }
    }
}

// swiftlint:enable all
