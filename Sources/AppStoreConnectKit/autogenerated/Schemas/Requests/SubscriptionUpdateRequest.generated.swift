// autogenerated

// swiftlint:disable all
import Foundation

public struct SubscriptionUpdateRequest: Hashable, Codable {
    public var data: Data

    public var included: [Included]?

    public init(
        data: Data,
        included: [Included]? = nil
    ) {
        self.data = data
        self.included = included
    }

    private enum CodingKeys: String, CodingKey {
        case data
        case included
    }

    public struct Data: Hashable, Codable {
        public var id: String

        public var type: `Type`

        public var attributes: Attributes?

        public var relationships: Relationships?

        public init(
            id: String,
            type: `Type`,
            attributes: Attributes? = nil,
            relationships: Relationships? = nil
        ) {
            self.id = id
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case type
            case attributes
            case relationships
        }

        public enum `Type`: String, Hashable, Codable {
            case subscriptions
        }

        public struct Attributes: Hashable, Codable {
            public var availableInAllTerritories: Bool?

            public var familySharable: Bool?

            public var groupLevel: Int?

            public var name: String?

            public var reviewNote: String?

            public var subscriptionPeriod: SubscriptionPeriod?

            public init(
                availableInAllTerritories: Bool? = nil,
                familySharable: Bool? = nil,
                groupLevel: Int? = nil,
                name: String? = nil,
                reviewNote: String? = nil,
                subscriptionPeriod: SubscriptionPeriod? = nil
            ) {
                self.availableInAllTerritories = availableInAllTerritories
                self.familySharable = familySharable
                self.groupLevel = groupLevel
                self.name = name
                self.reviewNote = reviewNote
                self.subscriptionPeriod = subscriptionPeriod
            }

            private enum CodingKeys: String, CodingKey {
                case availableInAllTerritories
                case familySharable
                case groupLevel
                case name
                case reviewNote
                case subscriptionPeriod
            }

            public enum SubscriptionPeriod: Hashable, Codable, RawRepresentable {
                case oneMonth
                case oneWeek
                case oneYear
                case sixMonths
                case threeMonths
                case twoMonths
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .oneMonth: return "ONE_MONTH"
                    case .oneWeek: return "ONE_WEEK"
                    case .oneYear: return "ONE_YEAR"
                    case .sixMonths: return "SIX_MONTHS"
                    case .threeMonths: return "THREE_MONTHS"
                    case .twoMonths: return "TWO_MONTHS"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ONE_MONTH": self = .oneMonth
                    case "ONE_WEEK": self = .oneWeek
                    case "ONE_YEAR": self = .oneYear
                    case "SIX_MONTHS": self = .sixMonths
                    case "THREE_MONTHS": self = .threeMonths
                    case "TWO_MONTHS": self = .twoMonths
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public struct Relationships: Hashable, Codable {
            public var introductoryOffers: IntroductoryOffers?

            public var prices: Prices?

            public var promotionalOffers: PromotionalOffers?

            public init(
                introductoryOffers: IntroductoryOffers? = nil,
                prices: Prices? = nil,
                promotionalOffers: PromotionalOffers? = nil
            ) {
                self.introductoryOffers = introductoryOffers
                self.prices = prices
                self.promotionalOffers = promotionalOffers
            }

            private enum CodingKeys: String, CodingKey {
                case introductoryOffers
                case prices
                case promotionalOffers
            }

            public struct IntroductoryOffers: Hashable, Codable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable {
                        case subscriptionIntroductoryOffers
                    }
                }
            }

            public struct Prices: Hashable, Codable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable {
                        case subscriptionPrices
                    }
                }
            }

            public struct PromotionalOffers: Hashable, Codable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable {
                        case subscriptionPromotionalOffers
                    }
                }
            }
        }
    }

    public enum Included: Hashable, Codable {
        case subscriptionPromotionalOfferInlineCreate(SubscriptionPromotionalOfferInlineCreate)
        case subscriptionPriceInlineCreate(SubscriptionPriceInlineCreate)
        case subscriptionIntroductoryOfferInlineCreate(SubscriptionIntroductoryOfferInlineCreate)

        public init(from decoder: Decoder) throws {
            self = try {
                var lastError: Error!
                do {
                    return .subscriptionPromotionalOfferInlineCreate(try SubscriptionPromotionalOfferInlineCreate(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .subscriptionPriceInlineCreate(try SubscriptionPriceInlineCreate(from: decoder))
                } catch {
                    lastError = error
                }
                do {
                    return .subscriptionIntroductoryOfferInlineCreate(try SubscriptionIntroductoryOfferInlineCreate(from: decoder))
                } catch {
                    lastError = error
                }
                throw lastError
            }()
        }

        public func encode(to encoder: Encoder) throws {
            switch self {
            case .subscriptionPromotionalOfferInlineCreate(let value):
                try value.encode(to: encoder)

            case .subscriptionPriceInlineCreate(let value):
                try value.encode(to: encoder)

            case .subscriptionIntroductoryOfferInlineCreate(let value):
                try value.encode(to: encoder)
            }
        }
    }
}

// swiftlint:enable all
