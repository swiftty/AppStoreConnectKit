// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterLeaderboardUpdateRequest: Hashable, Codable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable {
        public var id: String

        public var type: `Type`

        public var attributes: Attributes?

        public init(
            id: String,
            type: `Type`,
            attributes: Attributes? = nil
        ) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case type
            case attributes
        }

        public enum `Type`: String, Hashable, Codable {
            case gameCenterLeaderboards
        }

        public struct Attributes: Hashable, Codable {
            public var archived: Bool?

            public var defaultFormatter: GameCenterLeaderboardFormatter?

            public var recurrenceDuration: String?

            public var recurrenceRule: String?

            public var recurrenceStartDate: String?

            public var referenceName: String?

            public var scoreRangeEnd: String?

            public var scoreRangeStart: String?

            public var scoreSortType: ScoreSortType?

            public var submissionType: SubmissionType?

            public init(
                archived: Bool? = nil,
                defaultFormatter: GameCenterLeaderboardFormatter? = nil,
                recurrenceDuration: String? = nil,
                recurrenceRule: String? = nil,
                recurrenceStartDate: String? = nil,
                referenceName: String? = nil,
                scoreRangeEnd: String? = nil,
                scoreRangeStart: String? = nil,
                scoreSortType: ScoreSortType? = nil,
                submissionType: SubmissionType? = nil
            ) {
                self.archived = archived
                self.defaultFormatter = defaultFormatter
                self.recurrenceDuration = recurrenceDuration
                self.recurrenceRule = recurrenceRule
                self.recurrenceStartDate = recurrenceStartDate
                self.referenceName = referenceName
                self.scoreRangeEnd = scoreRangeEnd
                self.scoreRangeStart = scoreRangeStart
                self.scoreSortType = scoreSortType
                self.submissionType = submissionType
            }

            private enum CodingKeys: String, CodingKey {
                case archived
                case defaultFormatter
                case recurrenceDuration
                case recurrenceRule
                case recurrenceStartDate
                case referenceName
                case scoreRangeEnd
                case scoreRangeStart
                case scoreSortType
                case submissionType
            }

            public enum ScoreSortType: Hashable, Codable, RawRepresentable {
                case asc
                case desc
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .asc: return "ASC"
                    case .desc: return "DESC"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ASC": self = .asc
                    case "DESC": self = .desc
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum SubmissionType: Hashable, Codable, RawRepresentable {
                case bestScore
                case mostRecentScore
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .bestScore: return "BEST_SCORE"
                    case .mostRecentScore: return "MOST_RECENT_SCORE"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "BEST_SCORE": self = .bestScore
                    case "MOST_RECENT_SCORE": self = .mostRecentScore
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
