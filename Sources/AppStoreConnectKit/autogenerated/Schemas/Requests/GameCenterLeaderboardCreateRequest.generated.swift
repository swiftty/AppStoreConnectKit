// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterLeaderboardCreateRequest: Hashable, Codable, Sendable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable, Sendable {
        public var type: `Type`

        public var attributes: Attributes

        public var relationships: Relationships?

        public init(
            type: `Type`,
            attributes: Attributes,
            relationships: Relationships? = nil
        ) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case attributes
            case relationships
        }

        public enum `Type`: String, Hashable, Codable, Sendable {
            case gameCenterLeaderboards
        }

        public struct Attributes: Hashable, Codable, Sendable {
            public var activityProperties: [String: String]?

            public var defaultFormatter: GameCenterLeaderboardFormatter

            public var recurrenceDuration: String?

            public var recurrenceRule: String?

            public var recurrenceStartDate: String?

            public var referenceName: String

            public var scoreRangeEnd: String?

            public var scoreRangeStart: String?

            public var scoreSortType: ScoreSortType

            public var submissionType: SubmissionType

            public var vendorIdentifier: String

            public var visibility: Visibility?

            public init(
                activityProperties: [String: String]? = nil,
                defaultFormatter: GameCenterLeaderboardFormatter,
                recurrenceDuration: String? = nil,
                recurrenceRule: String? = nil,
                recurrenceStartDate: String? = nil,
                referenceName: String,
                scoreRangeEnd: String? = nil,
                scoreRangeStart: String? = nil,
                scoreSortType: ScoreSortType,
                submissionType: SubmissionType,
                vendorIdentifier: String,
                visibility: Visibility? = nil
            ) {
                self.activityProperties = activityProperties
                self.defaultFormatter = defaultFormatter
                self.recurrenceDuration = recurrenceDuration
                self.recurrenceRule = recurrenceRule
                self.recurrenceStartDate = recurrenceStartDate
                self.referenceName = referenceName
                self.scoreRangeEnd = scoreRangeEnd
                self.scoreRangeStart = scoreRangeStart
                self.scoreSortType = scoreSortType
                self.submissionType = submissionType
                self.vendorIdentifier = vendorIdentifier
                self.visibility = visibility
            }

            private enum CodingKeys: String, CodingKey {
                case activityProperties
                case defaultFormatter
                case recurrenceDuration
                case recurrenceRule
                case recurrenceStartDate
                case referenceName
                case scoreRangeEnd
                case scoreRangeStart
                case scoreSortType
                case submissionType
                case vendorIdentifier
                case visibility
            }

            public struct ScoreSortType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var asc: Self {
                    .init(rawValue: "ASC")
                }

                public static var desc: Self {
                    .init(rawValue: "DESC")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubmissionType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var bestScore: Self {
                    .init(rawValue: "BEST_SCORE")
                }

                public static var mostRecentScore: Self {
                    .init(rawValue: "MOST_RECENT_SCORE")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Visibility: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var hideForAll: Self {
                    .init(rawValue: "HIDE_FOR_ALL")
                }

                public static var showForAll: Self {
                    .init(rawValue: "SHOW_FOR_ALL")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }
        }

        public struct Relationships: Hashable, Codable, Sendable {
            public var gameCenterDetail: GameCenterDetail?

            public var gameCenterGroup: GameCenterGroup?

            public var gameCenterLeaderboardSets: GameCenterLeaderboardSets?

            public init(
                gameCenterDetail: GameCenterDetail? = nil,
                gameCenterGroup: GameCenterGroup? = nil,
                gameCenterLeaderboardSets: GameCenterLeaderboardSets? = nil
            ) {
                self.gameCenterDetail = gameCenterDetail
                self.gameCenterGroup = gameCenterGroup
                self.gameCenterLeaderboardSets = gameCenterLeaderboardSets
            }

            private enum CodingKeys: String, CodingKey {
                case gameCenterDetail
                case gameCenterGroup
                case gameCenterLeaderboardSets
            }

            public struct GameCenterDetail: Hashable, Codable, Sendable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case gameCenterDetails
                    }
                }
            }

            public struct GameCenterGroup: Hashable, Codable, Sendable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case gameCenterGroups
                    }
                }
            }

            public struct GameCenterLeaderboardSets: Hashable, Codable, Sendable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case gameCenterLeaderboardSets
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
