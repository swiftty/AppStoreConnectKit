// autogenerated

// swiftlint:disable all
import Foundation

public struct AppInfoUpdateRequest: Hashable, Codable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable {
        public var id: String

        public var type: `Type`

        public var relationships: Relationships?

        public init(
            id: String,
            type: `Type`,
            relationships: Relationships? = nil
        ) {
            self.id = id
            self.type = type
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case type
            case relationships
        }

        public enum `Type`: Hashable, Codable, RawRepresentable {
            case appInfos
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appInfos: return "appInfos"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "appInfos": self = .appInfos
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Relationships: Hashable, Codable {
            public var primaryCategory: PrimaryCategory?

            public var primarySubcategoryOne: PrimarySubcategoryOne?

            public var primarySubcategoryTwo: PrimarySubcategoryTwo?

            public var secondaryCategory: SecondaryCategory?

            public var secondarySubcategoryOne: SecondarySubcategoryOne?

            public var secondarySubcategoryTwo: SecondarySubcategoryTwo?

            public init(
                primaryCategory: PrimaryCategory? = nil,
                primarySubcategoryOne: PrimarySubcategoryOne? = nil,
                primarySubcategoryTwo: PrimarySubcategoryTwo? = nil,
                secondaryCategory: SecondaryCategory? = nil,
                secondarySubcategoryOne: SecondarySubcategoryOne? = nil,
                secondarySubcategoryTwo: SecondarySubcategoryTwo? = nil
            ) {
                self.primaryCategory = primaryCategory
                self.primarySubcategoryOne = primarySubcategoryOne
                self.primarySubcategoryTwo = primarySubcategoryTwo
                self.secondaryCategory = secondaryCategory
                self.secondarySubcategoryOne = secondarySubcategoryOne
                self.secondarySubcategoryTwo = secondarySubcategoryTwo
            }

            private enum CodingKeys: String, CodingKey {
                case primaryCategory
                case primarySubcategoryOne
                case primarySubcategoryTwo
                case secondaryCategory
                case secondarySubcategoryOne
                case secondarySubcategoryTwo
            }

            public struct PrimaryCategory: Hashable, Codable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case appCategories
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .appCategories: return "appCategories"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "appCategories": self = .appCategories
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct PrimarySubcategoryOne: Hashable, Codable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case appCategories
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .appCategories: return "appCategories"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "appCategories": self = .appCategories
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct PrimarySubcategoryTwo: Hashable, Codable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case appCategories
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .appCategories: return "appCategories"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "appCategories": self = .appCategories
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct SecondaryCategory: Hashable, Codable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case appCategories
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .appCategories: return "appCategories"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "appCategories": self = .appCategories
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct SecondarySubcategoryOne: Hashable, Codable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case appCategories
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .appCategories: return "appCategories"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "appCategories": self = .appCategories
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }

            public struct SecondarySubcategoryTwo: Hashable, Codable {
                public var data: Data?

                public init(data: Data? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: Hashable, Codable, RawRepresentable {
                        case appCategories
                        case unknown(String)

                        public var rawValue: String {
                            switch self {
                            case .appCategories: return "appCategories"
                            case .unknown(let rawValue): return rawValue
                            }
                        }

                        public init(rawValue: String) {
                            switch rawValue {
                            case "appCategories": self = .appCategories
                            default: self = .unknown(rawValue)
                            }
                        }
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
