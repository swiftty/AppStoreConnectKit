// autogenerated

// swiftlint:disable all
import Foundation

public struct AppEventCreateRequest: Hashable, Codable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable {
        public var type: `Type`

        public var attributes: Attributes

        public var relationships: Relationships

        public init(
            type: `Type`,
            attributes: Attributes,
            relationships: Relationships
        ) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case attributes
            case relationships
        }

        public enum `Type`: String, Hashable, Codable {
            case appEvents
        }

        public struct Attributes: Hashable, Codable {
            public var badge: Badge?

            public var deepLink: URL?

            public var primaryLocale: String?

            public var priority: Priority?

            public var purchaseRequirement: PurchaseRequirement?

            public var purpose: Purpose?

            public var referenceName: String

            public var territorySchedules: [TerritorySchedules]?

            public init(
                badge: Badge? = nil,
                deepLink: URL? = nil,
                primaryLocale: String? = nil,
                priority: Priority? = nil,
                purchaseRequirement: PurchaseRequirement? = nil,
                purpose: Purpose? = nil,
                referenceName: String,
                territorySchedules: [TerritorySchedules]? = nil
            ) {
                self.badge = badge
                self.deepLink = deepLink
                self.primaryLocale = primaryLocale
                self.priority = priority
                self.purchaseRequirement = purchaseRequirement
                self.purpose = purpose
                self.referenceName = referenceName
                self.territorySchedules = territorySchedules
            }

            private enum CodingKeys: String, CodingKey {
                case badge
                case deepLink
                case primaryLocale
                case priority
                case purchaseRequirement
                case purpose
                case referenceName
                case territorySchedules
            }

            public enum Badge: Hashable, Codable, RawRepresentable {
                case challenge
                case competition
                case liveEvent
                case majorUpdate
                case newSeason
                case premiere
                case specialEvent
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .challenge: return "CHALLENGE"
                    case .competition: return "COMPETITION"
                    case .liveEvent: return "LIVE_EVENT"
                    case .majorUpdate: return "MAJOR_UPDATE"
                    case .newSeason: return "NEW_SEASON"
                    case .premiere: return "PREMIERE"
                    case .specialEvent: return "SPECIAL_EVENT"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "CHALLENGE": self = .challenge
                    case "COMPETITION": self = .competition
                    case "LIVE_EVENT": self = .liveEvent
                    case "MAJOR_UPDATE": self = .majorUpdate
                    case "NEW_SEASON": self = .newSeason
                    case "PREMIERE": self = .premiere
                    case "SPECIAL_EVENT": self = .specialEvent
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Priority: Hashable, Codable, RawRepresentable {
                case high
                case normal
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .high: return "HIGH"
                    case .normal: return "NORMAL"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "HIGH": self = .high
                    case "NORMAL": self = .normal
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PurchaseRequirement: Hashable, Codable, RawRepresentable {
                case inAppPurchase
                case inAppPurchaseAndSubscription
                case inAppPurchaseOrSubscription
                case noCostAssociated
                case subscription
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .inAppPurchase: return "IN_APP_PURCHASE"
                    case .inAppPurchaseAndSubscription: return "IN_APP_PURCHASE_AND_SUBSCRIPTION"
                    case .inAppPurchaseOrSubscription: return "IN_APP_PURCHASE_OR_SUBSCRIPTION"
                    case .noCostAssociated: return "NO_COST_ASSOCIATED"
                    case .subscription: return "SUBSCRIPTION"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "IN_APP_PURCHASE": self = .inAppPurchase
                    case "IN_APP_PURCHASE_AND_SUBSCRIPTION": self = .inAppPurchaseAndSubscription
                    case "IN_APP_PURCHASE_OR_SUBSCRIPTION": self = .inAppPurchaseOrSubscription
                    case "NO_COST_ASSOCIATED": self = .noCostAssociated
                    case "SUBSCRIPTION": self = .subscription
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Purpose: Hashable, Codable, RawRepresentable {
                case appropriateForAllUsers
                case attractNewUsers
                case bringBackLapsedUsers
                case keepActiveUsersInformed
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appropriateForAllUsers: return "APPROPRIATE_FOR_ALL_USERS"
                    case .attractNewUsers: return "ATTRACT_NEW_USERS"
                    case .bringBackLapsedUsers: return "BRING_BACK_LAPSED_USERS"
                    case .keepActiveUsersInformed: return "KEEP_ACTIVE_USERS_INFORMED"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "APPROPRIATE_FOR_ALL_USERS": self = .appropriateForAllUsers
                    case "ATTRACT_NEW_USERS": self = .attractNewUsers
                    case "BRING_BACK_LAPSED_USERS": self = .bringBackLapsedUsers
                    case "KEEP_ACTIVE_USERS_INFORMED": self = .keepActiveUsersInformed
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct TerritorySchedules: Hashable, Codable {
                public var eventEnd: String?

                public var eventStart: String?

                public var publishStart: String?

                public var territories: [String]?

                public init(
                    eventEnd: String? = nil,
                    eventStart: String? = nil,
                    publishStart: String? = nil,
                    territories: [String]? = nil
                ) {
                    self.eventEnd = eventEnd
                    self.eventStart = eventStart
                    self.publishStart = publishStart
                    self.territories = territories
                }

                private enum CodingKeys: String, CodingKey {
                    case eventEnd
                    case eventStart
                    case publishStart
                    case territories
                }
            }
        }

        public struct Relationships: Hashable, Codable {
            public var app: App

            public init(app: App) {
                self.app = app
            }

            private enum CodingKeys: String, CodingKey {
                case app
            }

            public struct App: Hashable, Codable {
                public var data: Data

                public init(data: Data) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable {
                        case apps
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
