// autogenerated

// swiftlint:disable all
import Foundation

public struct UserInvitationCreateRequest: Hashable, Codable, Sendable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable, Sendable {
        public var type: `Type`

        public var attributes: Attributes

        public var relationships: Relationships?

        public init(
            type: `Type`,
            attributes: Attributes,
            relationships: Relationships? = nil
        ) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case attributes
            case relationships
        }

        public enum `Type`: String, Hashable, Codable, Sendable {
            case userInvitations
        }

        public struct Attributes: Hashable, Codable, Sendable {
            public var allAppsVisible: Bool?

            public var email: String

            public var firstName: String

            public var lastName: String

            public var provisioningAllowed: Bool?

            public var roles: [UserRole]

            public init(
                allAppsVisible: Bool? = nil,
                email: String,
                firstName: String,
                lastName: String,
                provisioningAllowed: Bool? = nil,
                roles: [UserRole]
            ) {
                self.allAppsVisible = allAppsVisible
                self.email = email
                self.firstName = firstName
                self.lastName = lastName
                self.provisioningAllowed = provisioningAllowed
                self.roles = roles
            }

            private enum CodingKeys: String, CodingKey {
                case allAppsVisible
                case email
                case firstName
                case lastName
                case provisioningAllowed
                case roles
            }
        }

        public struct Relationships: Hashable, Codable, Sendable {
            public var visibleApps: VisibleApps?

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }

            private enum CodingKeys: String, CodingKey {
                case visibleApps
            }

            public struct VisibleApps: Hashable, Codable, Sendable {
                public var data: [Data]?

                public init(data: [Data]? = nil) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case apps
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
