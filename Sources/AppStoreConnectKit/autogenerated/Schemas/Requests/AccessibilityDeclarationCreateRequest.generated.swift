// autogenerated

// swiftlint:disable all
import Foundation

public struct AccessibilityDeclarationCreateRequest: Hashable, Codable, Sendable {
    public var data: Data

    public init(data: Data) {
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case data
    }

    public struct Data: Hashable, Codable, Sendable {
        public var type: `Type`

        public var attributes: Attributes

        public var relationships: Relationships

        public init(
            type: `Type`,
            attributes: Attributes,
            relationships: Relationships
        ) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case attributes
            case relationships
        }

        public enum `Type`: String, Hashable, Codable, Sendable {
            case accessibilityDeclarations
        }

        public struct Attributes: Hashable, Codable, Sendable {
            public var deviceFamily: DeviceFamily

            public var supportsAudioDescriptions: Bool?

            public var supportsCaptions: Bool?

            public var supportsDarkInterface: Bool?

            public var supportsDifferentiateWithoutColorAlone: Bool?

            public var supportsLargerText: Bool?

            public var supportsReducedMotion: Bool?

            public var supportsSufficientContrast: Bool?

            public var supportsVoiceControl: Bool?

            public var supportsVoiceover: Bool?

            public init(
                deviceFamily: DeviceFamily,
                supportsAudioDescriptions: Bool? = nil,
                supportsCaptions: Bool? = nil,
                supportsDarkInterface: Bool? = nil,
                supportsDifferentiateWithoutColorAlone: Bool? = nil,
                supportsLargerText: Bool? = nil,
                supportsReducedMotion: Bool? = nil,
                supportsSufficientContrast: Bool? = nil,
                supportsVoiceControl: Bool? = nil,
                supportsVoiceover: Bool? = nil
            ) {
                self.deviceFamily = deviceFamily
                self.supportsAudioDescriptions = supportsAudioDescriptions
                self.supportsCaptions = supportsCaptions
                self.supportsDarkInterface = supportsDarkInterface
                self.supportsDifferentiateWithoutColorAlone = supportsDifferentiateWithoutColorAlone
                self.supportsLargerText = supportsLargerText
                self.supportsReducedMotion = supportsReducedMotion
                self.supportsSufficientContrast = supportsSufficientContrast
                self.supportsVoiceControl = supportsVoiceControl
                self.supportsVoiceover = supportsVoiceover
            }

            private enum CodingKeys: String, CodingKey {
                case deviceFamily
                case supportsAudioDescriptions
                case supportsCaptions
                case supportsDarkInterface
                case supportsDifferentiateWithoutColorAlone
                case supportsLargerText
                case supportsReducedMotion
                case supportsSufficientContrast
                case supportsVoiceControl
                case supportsVoiceover
            }
        }

        public struct Relationships: Hashable, Codable, Sendable {
            public var app: App

            public init(app: App) {
                self.app = app
            }

            private enum CodingKeys: String, CodingKey {
                case app
            }

            public struct App: Hashable, Codable, Sendable {
                public var data: Data

                public init(data: Data) {
                    self.data = data
                }

                private enum CodingKeys: String, CodingKey {
                    case data
                }

                public struct Data: Hashable, Codable, Sendable {
                    public var id: String

                    public var type: `Type`

                    public init(
                        id: String,
                        type: `Type`
                    ) {
                        self.id = id
                        self.type = type
                    }

                    private enum CodingKeys: String, CodingKey {
                        case id
                        case type
                    }

                    public enum `Type`: String, Hashable, Codable, Sendable {
                        case apps
                    }
                }
            }
        }
    }
}

// swiftlint:enable all
