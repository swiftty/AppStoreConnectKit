// autogenerated

// swiftlint:disable all
import Foundation

public struct CiXcodeVersion: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case ciXcodeVersions
    }

    public struct Attributes: Hashable, Codable {
        public var name: String?

        public var testDestinations: [TestDestinations]?

        public var version: String?

        public init(
            name: String? = nil,
            testDestinations: [TestDestinations]? = nil,
            version: String? = nil
        ) {
            self.name = name
            self.testDestinations = testDestinations
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case testDestinations
            case version
        }

        public struct TestDestinations: Hashable, Codable {
            public var availableRuntimes: [AvailableRuntimes]?

            public var deviceTypeIdentifier: String?

            public var deviceTypeName: String?

            public var kind: CiTestDestinationKind?

            public init(
                availableRuntimes: [AvailableRuntimes]? = nil,
                deviceTypeIdentifier: String? = nil,
                deviceTypeName: String? = nil,
                kind: CiTestDestinationKind? = nil
            ) {
                self.availableRuntimes = availableRuntimes
                self.deviceTypeIdentifier = deviceTypeIdentifier
                self.deviceTypeName = deviceTypeName
                self.kind = kind
            }

            private enum CodingKeys: String, CodingKey {
                case availableRuntimes
                case deviceTypeIdentifier
                case deviceTypeName
                case kind
            }

            public struct AvailableRuntimes: Hashable, Codable {
                public var runtimeIdentifier: String?

                public var runtimeName: String?

                public init(
                    runtimeIdentifier: String? = nil,
                    runtimeName: String? = nil
                ) {
                    self.runtimeIdentifier = runtimeIdentifier
                    self.runtimeName = runtimeName
                }

                private enum CodingKeys: String, CodingKey {
                    case runtimeIdentifier
                    case runtimeName
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var macOsVersions: MacOsVersions?

        public init(macOsVersions: MacOsVersions? = nil) {
            self.macOsVersions = macOsVersions
        }

        private enum CodingKeys: String, CodingKey {
            case macOsVersions
        }

        public struct MacOsVersions: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case ciMacOsVersions
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
