// autogenerated

// swiftlint:disable all
import Foundation

public struct Nomination: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case nominations
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var type: `Type`?

        public var createdDate: String?

        public var description: String?

        public var deviceFamilies: [DeviceFamily]?

        public var hasInAppEvents: Bool?

        public var lastModifiedDate: String?

        public var launchInSelectMarketsFirst: Bool?

        public var locales: [String]?

        public var name: String?

        public var notes: String?

        public var preOrderEnabled: Bool?

        public var publishEndDate: String?

        public var publishStartDate: String?

        public var state: State?

        public var submittedDate: String?

        public var supplementalMaterialsUris: [URL]?

        public init(
            type: `Type`? = nil,
            createdDate: String? = nil,
            description: String? = nil,
            deviceFamilies: [DeviceFamily]? = nil,
            hasInAppEvents: Bool? = nil,
            lastModifiedDate: String? = nil,
            launchInSelectMarketsFirst: Bool? = nil,
            locales: [String]? = nil,
            name: String? = nil,
            notes: String? = nil,
            preOrderEnabled: Bool? = nil,
            publishEndDate: String? = nil,
            publishStartDate: String? = nil,
            state: State? = nil,
            submittedDate: String? = nil,
            supplementalMaterialsUris: [URL]? = nil
        ) {
            self.type = type
            self.createdDate = createdDate
            self.description = description
            self.deviceFamilies = deviceFamilies
            self.hasInAppEvents = hasInAppEvents
            self.lastModifiedDate = lastModifiedDate
            self.launchInSelectMarketsFirst = launchInSelectMarketsFirst
            self.locales = locales
            self.name = name
            self.notes = notes
            self.preOrderEnabled = preOrderEnabled
            self.publishEndDate = publishEndDate
            self.publishStartDate = publishStartDate
            self.state = state
            self.submittedDate = submittedDate
            self.supplementalMaterialsUris = supplementalMaterialsUris
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case createdDate
            case description
            case deviceFamilies
            case hasInAppEvents
            case lastModifiedDate
            case launchInSelectMarketsFirst
            case locales
            case name
            case notes
            case preOrderEnabled
            case publishEndDate
            case publishStartDate
            case state
            case submittedDate
            case supplementalMaterialsUris
        }

        public struct `Type`: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appEnhancements: Self {
                .init(rawValue: "APP_ENHANCEMENTS")
            }

            public static var appLaunch: Self {
                .init(rawValue: "APP_LAUNCH")
            }

            public static var newContent: Self {
                .init(rawValue: "NEW_CONTENT")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var archived: Self {
                .init(rawValue: "ARCHIVED")
            }

            public static var draft: Self {
                .init(rawValue: "DRAFT")
            }

            public static var submitted: Self {
                .init(rawValue: "SUBMITTED")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var createdByActor: CreatedByActor?

        public var inAppEvents: InAppEvents?

        public var lastModifiedByActor: LastModifiedByActor?

        public var relatedApps: RelatedApps?

        public var submittedByActor: SubmittedByActor?

        public var supportedTerritories: SupportedTerritories?

        public init(
            createdByActor: CreatedByActor? = nil,
            inAppEvents: InAppEvents? = nil,
            lastModifiedByActor: LastModifiedByActor? = nil,
            relatedApps: RelatedApps? = nil,
            submittedByActor: SubmittedByActor? = nil,
            supportedTerritories: SupportedTerritories? = nil
        ) {
            self.createdByActor = createdByActor
            self.inAppEvents = inAppEvents
            self.lastModifiedByActor = lastModifiedByActor
            self.relatedApps = relatedApps
            self.submittedByActor = submittedByActor
            self.supportedTerritories = supportedTerritories
        }

        private enum CodingKeys: String, CodingKey {
            case createdByActor
            case inAppEvents
            case lastModifiedByActor
            case relatedApps
            case submittedByActor
            case supportedTerritories
        }

        public struct CreatedByActor: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case actors
                }
            }
        }

        public struct InAppEvents: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appEvents
                }
            }
        }

        public struct LastModifiedByActor: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case actors
                }
            }
        }

        public struct RelatedApps: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case apps
                }
            }
        }

        public struct SubmittedByActor: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case actors
                }
            }
        }

        public struct SupportedTerritories: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case territories
                }
            }
        }
    }
}

// swiftlint:enable all
