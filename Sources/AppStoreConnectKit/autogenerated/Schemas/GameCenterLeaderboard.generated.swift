// autogenerated

// swiftlint:disable all
import Foundation

public struct GameCenterLeaderboard: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case gameCenterLeaderboards
    }

    public struct Attributes: Hashable, Codable {
        public var archived: Bool?

        public var defaultFormatter: GameCenterLeaderboardFormatter?

        public var recurrenceDuration: String?

        public var recurrenceRule: String?

        public var recurrenceStartDate: String?

        public var referenceName: String?

        public var scoreRangeEnd: String?

        public var scoreRangeStart: String?

        public var scoreSortType: ScoreSortType?

        public var submissionType: SubmissionType?

        public var vendorIdentifier: String?

        public init(
            archived: Bool? = nil,
            defaultFormatter: GameCenterLeaderboardFormatter? = nil,
            recurrenceDuration: String? = nil,
            recurrenceRule: String? = nil,
            recurrenceStartDate: String? = nil,
            referenceName: String? = nil,
            scoreRangeEnd: String? = nil,
            scoreRangeStart: String? = nil,
            scoreSortType: ScoreSortType? = nil,
            submissionType: SubmissionType? = nil,
            vendorIdentifier: String? = nil
        ) {
            self.archived = archived
            self.defaultFormatter = defaultFormatter
            self.recurrenceDuration = recurrenceDuration
            self.recurrenceRule = recurrenceRule
            self.recurrenceStartDate = recurrenceStartDate
            self.referenceName = referenceName
            self.scoreRangeEnd = scoreRangeEnd
            self.scoreRangeStart = scoreRangeStart
            self.scoreSortType = scoreSortType
            self.submissionType = submissionType
            self.vendorIdentifier = vendorIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case archived
            case defaultFormatter
            case recurrenceDuration
            case recurrenceRule
            case recurrenceStartDate
            case referenceName
            case scoreRangeEnd
            case scoreRangeStart
            case scoreSortType
            case submissionType
            case vendorIdentifier
        }

        public enum ScoreSortType: Hashable, Codable, RawRepresentable {
            case asc
            case desc
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .asc: return "ASC"
                case .desc: return "DESC"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "ASC": self = .asc
                case "DESC": self = .desc
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum SubmissionType: Hashable, Codable, RawRepresentable {
            case bestScore
            case mostRecentScore
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .bestScore: return "BEST_SCORE"
                case .mostRecentScore: return "MOST_RECENT_SCORE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "BEST_SCORE": self = .bestScore
                case "MOST_RECENT_SCORE": self = .mostRecentScore
                default: self = .unknown(rawValue)
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var gameCenterDetail: GameCenterDetail?

        public var gameCenterGroup: GameCenterGroup?

        public var gameCenterLeaderboardSets: GameCenterLeaderboardSets?

        public var groupLeaderboard: GroupLeaderboard?

        public var localizations: Localizations?

        public var releases: Releases?

        public init(
            gameCenterDetail: GameCenterDetail? = nil,
            gameCenterGroup: GameCenterGroup? = nil,
            gameCenterLeaderboardSets: GameCenterLeaderboardSets? = nil,
            groupLeaderboard: GroupLeaderboard? = nil,
            localizations: Localizations? = nil,
            releases: Releases? = nil
        ) {
            self.gameCenterDetail = gameCenterDetail
            self.gameCenterGroup = gameCenterGroup
            self.gameCenterLeaderboardSets = gameCenterLeaderboardSets
            self.groupLeaderboard = groupLeaderboard
            self.localizations = localizations
            self.releases = releases
        }

        private enum CodingKeys: String, CodingKey {
            case gameCenterDetail
            case gameCenterGroup
            case gameCenterLeaderboardSets
            case groupLeaderboard
            case localizations
            case releases
        }

        public struct GameCenterDetail: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterDetails
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct GameCenterGroup: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterGroups
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct GameCenterLeaderboardSets: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterLeaderboardSets
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct GroupLeaderboard: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterLeaderboards
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct Localizations: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterLeaderboardLocalizations
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct Releases: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case gameCenterLeaderboardReleases
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
