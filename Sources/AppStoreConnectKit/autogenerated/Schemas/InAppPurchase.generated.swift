// autogenerated

// swiftlint:disable all
import Foundation

public struct InAppPurchase: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case inAppPurchases
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var inAppPurchaseType: InAppPurchaseType?

        public var productId: String?

        public var referenceName: String?

        public var state: State?

        public init(
            inAppPurchaseType: InAppPurchaseType? = nil,
            productId: String? = nil,
            referenceName: String? = nil,
            state: State? = nil
        ) {
            self.inAppPurchaseType = inAppPurchaseType
            self.productId = productId
            self.referenceName = referenceName
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case inAppPurchaseType
            case productId
            case referenceName
            case state
        }

        public struct InAppPurchaseType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var automaticallyRenewableSubscription: Self {
                .init(rawValue: "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION")
            }

            public static var consumable: Self {
                .init(rawValue: "CONSUMABLE")
            }

            public static var freeSubscription: Self {
                .init(rawValue: "FREE_SUBSCRIPTION")
            }

            public static var nonConsumable: Self {
                .init(rawValue: "NON_CONSUMABLE")
            }

            public static var nonRenewingSubscription: Self {
                .init(rawValue: "NON_RENEWING_SUBSCRIPTION")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var approved: Self {
                .init(rawValue: "APPROVED")
            }

            public static var created: Self {
                .init(rawValue: "CREATED")
            }

            public static var deleted: Self {
                .init(rawValue: "DELETED")
            }

            public static var deletionInProgress: Self {
                .init(rawValue: "DELETION_IN_PROGRESS")
            }

            public static var developerActionNeeded: Self {
                .init(rawValue: "DEVELOPER_ACTION_NEEDED")
            }

            public static var developerRemovedFromSale: Self {
                .init(rawValue: "DEVELOPER_REMOVED_FROM_SALE")
            }

            public static var developerSignedOff: Self {
                .init(rawValue: "DEVELOPER_SIGNED_OFF")
            }

            public static var inReview: Self {
                .init(rawValue: "IN_REVIEW")
            }

            public static var missingMetadata: Self {
                .init(rawValue: "MISSING_METADATA")
            }

            public static var pendingDeveloperRelease: Self {
                .init(rawValue: "PENDING_DEVELOPER_RELEASE")
            }

            public static var prepareForSubmission: Self {
                .init(rawValue: "PREPARE_FOR_SUBMISSION")
            }

            public static var processingContent: Self {
                .init(rawValue: "PROCESSING_CONTENT")
            }

            public static var readyToSubmit: Self {
                .init(rawValue: "READY_TO_SUBMIT")
            }

            public static var rejected: Self {
                .init(rawValue: "REJECTED")
            }

            public static var removedFromSale: Self {
                .init(rawValue: "REMOVED_FROM_SALE")
            }

            public static var replaced: Self {
                .init(rawValue: "REPLACED")
            }

            public static var waitingForReview: Self {
                .init(rawValue: "WAITING_FOR_REVIEW")
            }

            public static var waitingForScreenshot: Self {
                .init(rawValue: "WAITING_FOR_SCREENSHOT")
            }

            public static var waitingForUpload: Self {
                .init(rawValue: "WAITING_FOR_UPLOAD")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var apps: Apps?

        public init(apps: Apps? = nil) {
            self.apps = apps
        }

        private enum CodingKeys: String, CodingKey {
            case apps
        }

        public struct Apps: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case apps
                }
            }
        }
    }
}

// swiftlint:enable all
