// autogenerated

// swiftlint:disable all
import Foundation

public struct InAppPurchase: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: Hashable, Codable, RawRepresentable {
        case inAppPurchases
        case unknown(String)

        public var rawValue: String {
            switch self {
            case .inAppPurchases: return "inAppPurchases"
            case .unknown(let rawValue): return rawValue
            }
        }

        public init(rawValue: String) {
            switch rawValue {
            case "inAppPurchases": self = .inAppPurchases
            default: self = .unknown(rawValue)
            }
        }
    }

    public struct Attributes: Hashable, Codable {
        public var inAppPurchaseType: InAppPurchaseType?

        public var productId: String?

        public var referenceName: String?

        public var state: State?

        public init(
            inAppPurchaseType: InAppPurchaseType? = nil,
            productId: String? = nil,
            referenceName: String? = nil,
            state: State? = nil
        ) {
            self.inAppPurchaseType = inAppPurchaseType
            self.productId = productId
            self.referenceName = referenceName
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case inAppPurchaseType
            case productId
            case referenceName
            case state
        }

        public enum InAppPurchaseType: Hashable, Codable, RawRepresentable {
            case automaticallyRenewableSubscription
            case consumable
            case freeSubscription
            case nonConsumable
            case nonRenewingSubscription
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .automaticallyRenewableSubscription: return "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
                case .consumable: return "CONSUMABLE"
                case .freeSubscription: return "FREE_SUBSCRIPTION"
                case .nonConsumable: return "NON_CONSUMABLE"
                case .nonRenewingSubscription: return "NON_RENEWING_SUBSCRIPTION"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION": self = .automaticallyRenewableSubscription
                case "CONSUMABLE": self = .consumable
                case "FREE_SUBSCRIPTION": self = .freeSubscription
                case "NON_CONSUMABLE": self = .nonConsumable
                case "NON_RENEWING_SUBSCRIPTION": self = .nonRenewingSubscription
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum State: Hashable, Codable, RawRepresentable {
            case approved
            case created
            case deleted
            case deletionInProgress
            case developerActionNeeded
            case developerRemovedFromSale
            case developerSignedOff
            case inReview
            case missingMetadata
            case pendingDeveloperRelease
            case prepareForSubmission
            case processingContent
            case readyToSubmit
            case rejected
            case removedFromSale
            case replaced
            case waitingForReview
            case waitingForScreenshot
            case waitingForUpload
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .approved: return "APPROVED"
                case .created: return "CREATED"
                case .deleted: return "DELETED"
                case .deletionInProgress: return "DELETION_IN_PROGRESS"
                case .developerActionNeeded: return "DEVELOPER_ACTION_NEEDED"
                case .developerRemovedFromSale: return "DEVELOPER_REMOVED_FROM_SALE"
                case .developerSignedOff: return "DEVELOPER_SIGNED_OFF"
                case .inReview: return "IN_REVIEW"
                case .missingMetadata: return "MISSING_METADATA"
                case .pendingDeveloperRelease: return "PENDING_DEVELOPER_RELEASE"
                case .prepareForSubmission: return "PREPARE_FOR_SUBMISSION"
                case .processingContent: return "PROCESSING_CONTENT"
                case .readyToSubmit: return "READY_TO_SUBMIT"
                case .rejected: return "REJECTED"
                case .removedFromSale: return "REMOVED_FROM_SALE"
                case .replaced: return "REPLACED"
                case .waitingForReview: return "WAITING_FOR_REVIEW"
                case .waitingForScreenshot: return "WAITING_FOR_SCREENSHOT"
                case .waitingForUpload: return "WAITING_FOR_UPLOAD"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "APPROVED": self = .approved
                case "CREATED": self = .created
                case "DELETED": self = .deleted
                case "DELETION_IN_PROGRESS": self = .deletionInProgress
                case "DEVELOPER_ACTION_NEEDED": self = .developerActionNeeded
                case "DEVELOPER_REMOVED_FROM_SALE": self = .developerRemovedFromSale
                case "DEVELOPER_SIGNED_OFF": self = .developerSignedOff
                case "IN_REVIEW": self = .inReview
                case "MISSING_METADATA": self = .missingMetadata
                case "PENDING_DEVELOPER_RELEASE": self = .pendingDeveloperRelease
                case "PREPARE_FOR_SUBMISSION": self = .prepareForSubmission
                case "PROCESSING_CONTENT": self = .processingContent
                case "READY_TO_SUBMIT": self = .readyToSubmit
                case "REJECTED": self = .rejected
                case "REMOVED_FROM_SALE": self = .removedFromSale
                case "REPLACED": self = .replaced
                case "WAITING_FOR_REVIEW": self = .waitingForReview
                case "WAITING_FOR_SCREENSHOT": self = .waitingForScreenshot
                case "WAITING_FOR_UPLOAD": self = .waitingForUpload
                default: self = .unknown(rawValue)
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var apps: Apps?

        public init(apps: Apps? = nil) {
            self.apps = apps
        }

        private enum CodingKeys: String, CodingKey {
            case apps
        }

        public struct Apps: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: Hashable, Codable, RawRepresentable {
                    case apps
                    case unknown(String)

                    public var rawValue: String {
                        switch self {
                        case .apps: return "apps"
                        case .unknown(let rawValue): return rawValue
                        }
                    }

                    public init(rawValue: String) {
                        switch rawValue {
                        case "apps": self = .apps
                        default: self = .unknown(rawValue)
                        }
                    }
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
