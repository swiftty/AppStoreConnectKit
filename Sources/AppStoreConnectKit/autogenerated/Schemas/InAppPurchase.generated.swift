// autogenerated

// swiftlint:disable all
import Foundation

public struct InAppPurchase: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case inAppPurchases
    }

    public struct Attributes: Hashable, Codable {
        public var inAppPurchaseType: InAppPurchaseType?

        public var productId: String?

        public var referenceName: String?

        public var state: State?

        public init(
            inAppPurchaseType: InAppPurchaseType? = nil,
            productId: String? = nil,
            referenceName: String? = nil,
            state: State? = nil
        ) {
            self.inAppPurchaseType = inAppPurchaseType
            self.productId = productId
            self.referenceName = referenceName
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case inAppPurchaseType
            case productId
            case referenceName
            case state
        }

        public enum InAppPurchaseType: String, Hashable, Codable {
            case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
            case consumable = "CONSUMABLE"
            case freeSubscription = "FREE_SUBSCRIPTION"
            case nonConsumable = "NON_CONSUMABLE"
            case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
        }

        public enum State: String, Hashable, Codable {
            case approved = "APPROVED"
            case created = "CREATED"
            case deleted = "DELETED"
            case deletionInProgress = "DELETION_IN_PROGRESS"
            case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
            case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
            case developerSignedOff = "DEVELOPER_SIGNED_OFF"
            case inReview = "IN_REVIEW"
            case missingMetadata = "MISSING_METADATA"
            case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case processingContent = "PROCESSING_CONTENT"
            case readyToSubmit = "READY_TO_SUBMIT"
            case rejected = "REJECTED"
            case removedFromSale = "REMOVED_FROM_SALE"
            case replaced = "REPLACED"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case waitingForScreenshot = "WAITING_FOR_SCREENSHOT"
            case waitingForUpload = "WAITING_FOR_UPLOAD"
        }
    }

    public struct Relationships: Hashable, Codable {
        public var apps: Apps?

        public init(apps: Apps? = nil) {
            self.apps = apps
        }

        private enum CodingKeys: String, CodingKey {
            case apps
        }

        public struct Apps: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case apps
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
