// autogenerated

// swiftlint:disable all
import Foundation

public struct Build: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case builds
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var buildAudienceType: BuildAudienceType?

        public var computedMinMacOsVersion: String?

        public var computedMinVisionOsVersion: String?

        public var expirationDate: String?

        public var expired: Bool?

        public var iconAssetToken: ImageAsset?

        public var lsMinimumSystemVersion: String?

        public var minOsVersion: String?

        public var processingState: ProcessingState?

        public var uploadedDate: String?

        public var usesNonExemptEncryption: Bool?

        public var version: String?

        public init(
            buildAudienceType: BuildAudienceType? = nil,
            computedMinMacOsVersion: String? = nil,
            computedMinVisionOsVersion: String? = nil,
            expirationDate: String? = nil,
            expired: Bool? = nil,
            iconAssetToken: ImageAsset? = nil,
            lsMinimumSystemVersion: String? = nil,
            minOsVersion: String? = nil,
            processingState: ProcessingState? = nil,
            uploadedDate: String? = nil,
            usesNonExemptEncryption: Bool? = nil,
            version: String? = nil
        ) {
            self.buildAudienceType = buildAudienceType
            self.computedMinMacOsVersion = computedMinMacOsVersion
            self.computedMinVisionOsVersion = computedMinVisionOsVersion
            self.expirationDate = expirationDate
            self.expired = expired
            self.iconAssetToken = iconAssetToken
            self.lsMinimumSystemVersion = lsMinimumSystemVersion
            self.minOsVersion = minOsVersion
            self.processingState = processingState
            self.uploadedDate = uploadedDate
            self.usesNonExemptEncryption = usesNonExemptEncryption
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case buildAudienceType
            case computedMinMacOsVersion
            case computedMinVisionOsVersion
            case expirationDate
            case expired
            case iconAssetToken
            case lsMinimumSystemVersion
            case minOsVersion
            case processingState
            case uploadedDate
            case usesNonExemptEncryption
            case version
        }

        public struct ProcessingState: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var failed: Self {
                .init(rawValue: "FAILED")
            }

            public static var invalid: Self {
                .init(rawValue: "INVALID")
            }

            public static var processing: Self {
                .init(rawValue: "PROCESSING")
            }

            public static var valid: Self {
                .init(rawValue: "VALID")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var app: App?

        public var appEncryptionDeclaration: AppEncryptionDeclaration?

        public var appStoreVersion: AppStoreVersion?

        public var betaAppReviewSubmission: BetaAppReviewSubmission?

        public var betaBuildLocalizations: BetaBuildLocalizations?

        public var betaGroups: BetaGroups?

        public var buildBetaDetail: BuildBetaDetail?

        public var buildBundles: BuildBundles?

        public var diagnosticSignatures: DiagnosticSignatures?

        public var icons: Icons?

        public var individualTesters: IndividualTesters?

        public var perfPowerMetrics: PerfPowerMetrics?

        public var preReleaseVersion: PreReleaseVersion?

        public init(
            app: App? = nil,
            appEncryptionDeclaration: AppEncryptionDeclaration? = nil,
            appStoreVersion: AppStoreVersion? = nil,
            betaAppReviewSubmission: BetaAppReviewSubmission? = nil,
            betaBuildLocalizations: BetaBuildLocalizations? = nil,
            betaGroups: BetaGroups? = nil,
            buildBetaDetail: BuildBetaDetail? = nil,
            buildBundles: BuildBundles? = nil,
            diagnosticSignatures: DiagnosticSignatures? = nil,
            icons: Icons? = nil,
            individualTesters: IndividualTesters? = nil,
            perfPowerMetrics: PerfPowerMetrics? = nil,
            preReleaseVersion: PreReleaseVersion? = nil
        ) {
            self.app = app
            self.appEncryptionDeclaration = appEncryptionDeclaration
            self.appStoreVersion = appStoreVersion
            self.betaAppReviewSubmission = betaAppReviewSubmission
            self.betaBuildLocalizations = betaBuildLocalizations
            self.betaGroups = betaGroups
            self.buildBetaDetail = buildBetaDetail
            self.buildBundles = buildBundles
            self.diagnosticSignatures = diagnosticSignatures
            self.icons = icons
            self.individualTesters = individualTesters
            self.perfPowerMetrics = perfPowerMetrics
            self.preReleaseVersion = preReleaseVersion
        }

        private enum CodingKeys: String, CodingKey {
            case app
            case appEncryptionDeclaration
            case appStoreVersion
            case betaAppReviewSubmission
            case betaBuildLocalizations
            case betaGroups
            case buildBetaDetail
            case buildBundles
            case diagnosticSignatures
            case icons
            case individualTesters
            case perfPowerMetrics
            case preReleaseVersion
        }

        public struct App: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case apps
                }
            }
        }

        public struct AppEncryptionDeclaration: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appEncryptionDeclarations
                }
            }
        }

        public struct AppStoreVersion: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersions
                }
            }
        }

        public struct BetaAppReviewSubmission: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaAppReviewSubmissions
                }
            }
        }

        public struct BetaBuildLocalizations: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaBuildLocalizations
                }
            }
        }

        public struct BetaGroups: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaGroups
                }
            }
        }

        public struct BuildBetaDetail: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case buildBetaDetails
                }
            }
        }

        public struct BuildBundles: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case buildBundles
                }
            }
        }

        public struct DiagnosticSignatures: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct Icons: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case buildIcons
                }
            }
        }

        public struct IndividualTesters: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaTesters
                }
            }
        }

        public struct PerfPowerMetrics: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct PreReleaseVersion: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case preReleaseVersions
                }
            }
        }
    }
}

// swiftlint:enable all
