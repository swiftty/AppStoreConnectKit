// autogenerated

// swiftlint:disable all
import Foundation

public struct AgeRatingDeclaration: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case ageRatingDeclarations
    }

    public struct Attributes: Hashable, Codable {
        public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?

        public var contests: Contests?

        public var gambling: Bool?

        @available(*, deprecated)
        public var gamblingAndContests: Bool?

        public var gamblingSimulated: GamblingSimulated?

        public var horrorOrFearThemes: HorrorOrFearThemes?

        public var kidsAgeBand: KidsAgeBand?

        public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?

        public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?

        public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?

        public var seventeenPlus: Bool?

        public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?

        public var sexualContentOrNudity: SexualContentOrNudity?

        public var unrestrictedWebAccess: Bool?

        public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?

        public var violenceRealistic: ViolenceRealistic?

        public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?

        public init(
            alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil,
            contests: Contests? = nil,
            gambling: Bool? = nil,
            gamblingAndContests: Bool? = nil,
            gamblingSimulated: GamblingSimulated? = nil,
            horrorOrFearThemes: HorrorOrFearThemes? = nil,
            kidsAgeBand: KidsAgeBand? = nil,
            matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil,
            medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil,
            profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil,
            seventeenPlus: Bool? = nil,
            sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil,
            sexualContentOrNudity: SexualContentOrNudity? = nil,
            unrestrictedWebAccess: Bool? = nil,
            violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil,
            violenceRealistic: ViolenceRealistic? = nil,
            violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil
        ) {
            self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
            self.contests = contests
            self.gambling = gambling
            self.gamblingAndContests = gamblingAndContests
            self.gamblingSimulated = gamblingSimulated
            self.horrorOrFearThemes = horrorOrFearThemes
            self.kidsAgeBand = kidsAgeBand
            self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
            self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
            self.profanityOrCrudeHumor = profanityOrCrudeHumor
            self.seventeenPlus = seventeenPlus
            self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
            self.sexualContentOrNudity = sexualContentOrNudity
            self.unrestrictedWebAccess = unrestrictedWebAccess
            self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
            self.violenceRealistic = violenceRealistic
            self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
        }

        private enum CodingKeys: String, CodingKey {
            case alcoholTobaccoOrDrugUseOrReferences
            case contests
            case gambling
            case gamblingAndContests
            case gamblingSimulated
            case horrorOrFearThemes
            case kidsAgeBand
            case matureOrSuggestiveThemes
            case medicalOrTreatmentInformation
            case profanityOrCrudeHumor
            case seventeenPlus
            case sexualContentGraphicAndNudity
            case sexualContentOrNudity
            case unrestrictedWebAccess
            case violenceCartoonOrFantasy
            case violenceRealistic
            case violenceRealisticProlongedGraphicOrSadistic
        }

        public enum AlcoholTobaccoOrDrugUseOrReferences: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum Contests: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum GamblingSimulated: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum HorrorOrFearThemes: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum MatureOrSuggestiveThemes: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum MedicalOrTreatmentInformation: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum ProfanityOrCrudeHumor: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum SexualContentGraphicAndNudity: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum SexualContentOrNudity: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum ViolenceCartoonOrFantasy: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum ViolenceRealistic: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum ViolenceRealisticProlongedGraphicOrSadistic: Hashable, Codable, RawRepresentable {
            case frequentOrIntense
            case infrequentOrMild
            case none
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .frequentOrIntense: return "FREQUENT_OR_INTENSE"
                case .infrequentOrMild: return "INFREQUENT_OR_MILD"
                case .none: return "NONE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "FREQUENT_OR_INTENSE": self = .frequentOrIntense
                case "INFREQUENT_OR_MILD": self = .infrequentOrMild
                case "NONE": self = .none
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

// swiftlint:enable all
