// autogenerated

// swiftlint:disable all
import Foundation

public struct CiBuildRun: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case ciBuildRuns
    }

    public struct Attributes: Hashable, Codable {
        public var cancelReason: CancelReason?

        public var completionStatus: CiCompletionStatus?

        public var createdDate: String?

        public var destinationCommit: DestinationCommit?

        public var executionProgress: CiExecutionProgress?

        public var finishedDate: String?

        public var isPullRequestBuild: Bool?

        public var issueCounts: CiIssueCounts?

        public var number: Int?

        public var sourceCommit: SourceCommit?

        public var startReason: StartReason?

        public var startedDate: String?

        public init(
            cancelReason: CancelReason? = nil,
            completionStatus: CiCompletionStatus? = nil,
            createdDate: String? = nil,
            destinationCommit: DestinationCommit? = nil,
            executionProgress: CiExecutionProgress? = nil,
            finishedDate: String? = nil,
            isPullRequestBuild: Bool? = nil,
            issueCounts: CiIssueCounts? = nil,
            number: Int? = nil,
            sourceCommit: SourceCommit? = nil,
            startReason: StartReason? = nil,
            startedDate: String? = nil
        ) {
            self.cancelReason = cancelReason
            self.completionStatus = completionStatus
            self.createdDate = createdDate
            self.destinationCommit = destinationCommit
            self.executionProgress = executionProgress
            self.finishedDate = finishedDate
            self.isPullRequestBuild = isPullRequestBuild
            self.issueCounts = issueCounts
            self.number = number
            self.sourceCommit = sourceCommit
            self.startReason = startReason
            self.startedDate = startedDate
        }

        private enum CodingKeys: String, CodingKey {
            case cancelReason
            case completionStatus
            case createdDate
            case destinationCommit
            case executionProgress
            case finishedDate
            case isPullRequestBuild
            case issueCounts
            case number
            case sourceCommit
            case startReason
            case startedDate
        }

        public enum CancelReason: Hashable, Codable, RawRepresentable {
            case automaticallyByNewerBuild
            case manuallyByUser
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .automaticallyByNewerBuild: return "AUTOMATICALLY_BY_NEWER_BUILD"
                case .manuallyByUser: return "MANUALLY_BY_USER"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "AUTOMATICALLY_BY_NEWER_BUILD": self = .automaticallyByNewerBuild
                case "MANUALLY_BY_USER": self = .manuallyByUser
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct DestinationCommit: Hashable, Codable {
            public var author: CiGitUser?

            public var commitSha: String?

            public var committer: CiGitUser?

            public var message: String?

            public var webUrl: URL?

            public init(
                author: CiGitUser? = nil,
                commitSha: String? = nil,
                committer: CiGitUser? = nil,
                message: String? = nil,
                webUrl: URL? = nil
            ) {
                self.author = author
                self.commitSha = commitSha
                self.committer = committer
                self.message = message
                self.webUrl = webUrl
            }

            private enum CodingKeys: String, CodingKey {
                case author
                case commitSha
                case committer
                case message
                case webUrl
            }
        }

        public struct SourceCommit: Hashable, Codable {
            public var author: CiGitUser?

            public var commitSha: String?

            public var committer: CiGitUser?

            public var message: String?

            public var webUrl: URL?

            public init(
                author: CiGitUser? = nil,
                commitSha: String? = nil,
                committer: CiGitUser? = nil,
                message: String? = nil,
                webUrl: URL? = nil
            ) {
                self.author = author
                self.commitSha = commitSha
                self.committer = committer
                self.message = message
                self.webUrl = webUrl
            }

            private enum CodingKeys: String, CodingKey {
                case author
                case commitSha
                case committer
                case message
                case webUrl
            }
        }

        public enum StartReason: Hashable, Codable, RawRepresentable {
            case gitRefChange
            case manual
            case manualRebuild
            case pullRequestOpen
            case pullRequestUpdate
            case schedule
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .gitRefChange: return "GIT_REF_CHANGE"
                case .manual: return "MANUAL"
                case .manualRebuild: return "MANUAL_REBUILD"
                case .pullRequestOpen: return "PULL_REQUEST_OPEN"
                case .pullRequestUpdate: return "PULL_REQUEST_UPDATE"
                case .schedule: return "SCHEDULE"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "GIT_REF_CHANGE": self = .gitRefChange
                case "MANUAL": self = .manual
                case "MANUAL_REBUILD": self = .manualRebuild
                case "PULL_REQUEST_OPEN": self = .pullRequestOpen
                case "PULL_REQUEST_UPDATE": self = .pullRequestUpdate
                case "SCHEDULE": self = .schedule
                default: self = .unknown(rawValue)
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var builds: Builds?

        public var destinationBranch: DestinationBranch?

        public var product: Product?

        public var pullRequest: PullRequest?

        public var sourceBranchOrTag: SourceBranchOrTag?

        public var workflow: Workflow?

        public init(
            builds: Builds? = nil,
            destinationBranch: DestinationBranch? = nil,
            product: Product? = nil,
            pullRequest: PullRequest? = nil,
            sourceBranchOrTag: SourceBranchOrTag? = nil,
            workflow: Workflow? = nil
        ) {
            self.builds = builds
            self.destinationBranch = destinationBranch
            self.product = product
            self.pullRequest = pullRequest
            self.sourceBranchOrTag = sourceBranchOrTag
            self.workflow = workflow
        }

        private enum CodingKeys: String, CodingKey {
            case builds
            case destinationBranch
            case product
            case pullRequest
            case sourceBranchOrTag
            case workflow
        }

        public struct Builds: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case builds
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct DestinationBranch: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case scmGitReferences
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct Product: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case ciProducts
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct PullRequest: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case scmPullRequests
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct SourceBranchOrTag: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case scmGitReferences
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct Workflow: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case ciWorkflows
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
