// autogenerated

// swiftlint:disable all
import Foundation

public struct BackgroundAssetVersion: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case backgroundAssetVersions
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var createdDate: String?

        public var platforms: [Platform]?

        public var state: BackgroundAssetVersionState?

        public var version: String?

        public init(
            createdDate: String? = nil,
            platforms: [Platform]? = nil,
            state: BackgroundAssetVersionState? = nil,
            version: String? = nil
        ) {
            self.createdDate = createdDate
            self.platforms = platforms
            self.state = state
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate
            case platforms
            case state
            case version
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var assetFile: AssetFile?

        public var backgroundAssetUploadFiles: BackgroundAssetUploadFiles?

        public var internalBetaRelease: InternalBetaRelease?

        public var manifestFile: ManifestFile?

        public init(
            assetFile: AssetFile? = nil,
            backgroundAssetUploadFiles: BackgroundAssetUploadFiles? = nil,
            internalBetaRelease: InternalBetaRelease? = nil,
            manifestFile: ManifestFile? = nil
        ) {
            self.assetFile = assetFile
            self.backgroundAssetUploadFiles = backgroundAssetUploadFiles
            self.internalBetaRelease = internalBetaRelease
            self.manifestFile = manifestFile
        }

        private enum CodingKeys: String, CodingKey {
            case assetFile
            case backgroundAssetUploadFiles
            case internalBetaRelease
            case manifestFile
        }

        public struct AssetFile: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case backgroundAssetUploadFiles
                }
            }
        }

        public struct BackgroundAssetUploadFiles: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct InternalBetaRelease: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case backgroundAssetVersionInternalBetaReleases
                }
            }
        }

        public struct ManifestFile: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case backgroundAssetUploadFiles
                }
            }
        }
    }
}

// swiftlint:enable all
