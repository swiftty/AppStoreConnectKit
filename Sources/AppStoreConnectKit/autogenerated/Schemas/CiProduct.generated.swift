// autogenerated

// swiftlint:disable all
import Foundation

public struct CiProduct: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case ciProducts
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var createdDate: String?

        public var name: String?

        public var productType: ProductType?

        public init(
            createdDate: String? = nil,
            name: String? = nil,
            productType: ProductType? = nil
        ) {
            self.createdDate = createdDate
            self.name = name
            self.productType = productType
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate
            case name
            case productType
        }

        public struct ProductType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var app: Self {
                .init(rawValue: "APP")
            }

            public static var framework: Self {
                .init(rawValue: "FRAMEWORK")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var additionalRepositories: AdditionalRepositories?

        public var app: App?

        public var buildRuns: BuildRuns?

        public var bundleId: BundleId?

        public var primaryRepositories: PrimaryRepositories?

        public var workflows: Workflows?

        public init(
            additionalRepositories: AdditionalRepositories? = nil,
            app: App? = nil,
            buildRuns: BuildRuns? = nil,
            bundleId: BundleId? = nil,
            primaryRepositories: PrimaryRepositories? = nil,
            workflows: Workflows? = nil
        ) {
            self.additionalRepositories = additionalRepositories
            self.app = app
            self.buildRuns = buildRuns
            self.bundleId = bundleId
            self.primaryRepositories = primaryRepositories
            self.workflows = workflows
        }

        private enum CodingKeys: String, CodingKey {
            case additionalRepositories
            case app
            case buildRuns
            case bundleId
            case primaryRepositories
            case workflows
        }

        public struct AdditionalRepositories: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct App: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case apps
                }
            }
        }

        public struct BuildRuns: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct BundleId: Hashable, Codable, Sendable {
            public var data: Data?

            public init(data: Data? = nil) {
                self.data = data
            }

            private enum CodingKeys: String, CodingKey {
                case data
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case bundleIds
                }
            }
        }

        public struct PrimaryRepositories: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case scmRepositories
                }
            }
        }

        public struct Workflows: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }
    }
}

// swiftlint:enable all
