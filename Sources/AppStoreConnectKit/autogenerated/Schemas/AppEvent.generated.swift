// autogenerated

// swiftlint:disable all
import Foundation

public struct AppEvent: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case appEvents
    }

    public struct Attributes: Hashable, Codable {
        public var archivedTerritorySchedules: [ArchivedTerritorySchedules]?

        public var badge: Badge?

        public var deepLink: URL?

        public var eventState: EventState?

        public var primaryLocale: String?

        public var priority: Priority?

        public var purchaseRequirement: PurchaseRequirement?

        public var purpose: Purpose?

        public var referenceName: String?

        public var territorySchedules: [TerritorySchedules]?

        public init(
            archivedTerritorySchedules: [ArchivedTerritorySchedules]? = nil,
            badge: Badge? = nil,
            deepLink: URL? = nil,
            eventState: EventState? = nil,
            primaryLocale: String? = nil,
            priority: Priority? = nil,
            purchaseRequirement: PurchaseRequirement? = nil,
            purpose: Purpose? = nil,
            referenceName: String? = nil,
            territorySchedules: [TerritorySchedules]? = nil
        ) {
            self.archivedTerritorySchedules = archivedTerritorySchedules
            self.badge = badge
            self.deepLink = deepLink
            self.eventState = eventState
            self.primaryLocale = primaryLocale
            self.priority = priority
            self.purchaseRequirement = purchaseRequirement
            self.purpose = purpose
            self.referenceName = referenceName
            self.territorySchedules = territorySchedules
        }

        private enum CodingKeys: String, CodingKey {
            case archivedTerritorySchedules
            case badge
            case deepLink
            case eventState
            case primaryLocale
            case priority
            case purchaseRequirement
            case purpose
            case referenceName
            case territorySchedules
        }

        public struct ArchivedTerritorySchedules: Hashable, Codable {
            public var eventEnd: String?

            public var eventStart: String?

            public var publishStart: String?

            public var territories: [String]?

            public init(
                eventEnd: String? = nil,
                eventStart: String? = nil,
                publishStart: String? = nil,
                territories: [String]? = nil
            ) {
                self.eventEnd = eventEnd
                self.eventStart = eventStart
                self.publishStart = publishStart
                self.territories = territories
            }

            private enum CodingKeys: String, CodingKey {
                case eventEnd
                case eventStart
                case publishStart
                case territories
            }
        }

        public enum Badge: Hashable, Codable, RawRepresentable {
            case challenge
            case competition
            case liveEvent
            case majorUpdate
            case newSeason
            case premiere
            case specialEvent
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .challenge: return "CHALLENGE"
                case .competition: return "COMPETITION"
                case .liveEvent: return "LIVE_EVENT"
                case .majorUpdate: return "MAJOR_UPDATE"
                case .newSeason: return "NEW_SEASON"
                case .premiere: return "PREMIERE"
                case .specialEvent: return "SPECIAL_EVENT"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "CHALLENGE": self = .challenge
                case "COMPETITION": self = .competition
                case "LIVE_EVENT": self = .liveEvent
                case "MAJOR_UPDATE": self = .majorUpdate
                case "NEW_SEASON": self = .newSeason
                case "PREMIERE": self = .premiere
                case "SPECIAL_EVENT": self = .specialEvent
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum EventState: Hashable, Codable, RawRepresentable {
            case accepted
            case approved
            case archived
            case draft
            case inReview
            case past
            case published
            case readyForReview
            case rejected
            case waitingForReview
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .accepted: return "ACCEPTED"
                case .approved: return "APPROVED"
                case .archived: return "ARCHIVED"
                case .draft: return "DRAFT"
                case .inReview: return "IN_REVIEW"
                case .past: return "PAST"
                case .published: return "PUBLISHED"
                case .readyForReview: return "READY_FOR_REVIEW"
                case .rejected: return "REJECTED"
                case .waitingForReview: return "WAITING_FOR_REVIEW"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "ACCEPTED": self = .accepted
                case "APPROVED": self = .approved
                case "ARCHIVED": self = .archived
                case "DRAFT": self = .draft
                case "IN_REVIEW": self = .inReview
                case "PAST": self = .past
                case "PUBLISHED": self = .published
                case "READY_FOR_REVIEW": self = .readyForReview
                case "REJECTED": self = .rejected
                case "WAITING_FOR_REVIEW": self = .waitingForReview
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum Priority: Hashable, Codable, RawRepresentable {
            case high
            case normal
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .high: return "HIGH"
                case .normal: return "NORMAL"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "HIGH": self = .high
                case "NORMAL": self = .normal
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum PurchaseRequirement: Hashable, Codable, RawRepresentable {
            case inAppPurchase
            case inAppPurchaseAndSubscription
            case inAppPurchaseOrSubscription
            case noCostAssociated
            case subscription
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .inAppPurchase: return "IN_APP_PURCHASE"
                case .inAppPurchaseAndSubscription: return "IN_APP_PURCHASE_AND_SUBSCRIPTION"
                case .inAppPurchaseOrSubscription: return "IN_APP_PURCHASE_OR_SUBSCRIPTION"
                case .noCostAssociated: return "NO_COST_ASSOCIATED"
                case .subscription: return "SUBSCRIPTION"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "IN_APP_PURCHASE": self = .inAppPurchase
                case "IN_APP_PURCHASE_AND_SUBSCRIPTION": self = .inAppPurchaseAndSubscription
                case "IN_APP_PURCHASE_OR_SUBSCRIPTION": self = .inAppPurchaseOrSubscription
                case "NO_COST_ASSOCIATED": self = .noCostAssociated
                case "SUBSCRIPTION": self = .subscription
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum Purpose: Hashable, Codable, RawRepresentable {
            case appropriateForAllUsers
            case attractNewUsers
            case bringBackLapsedUsers
            case keepActiveUsersInformed
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appropriateForAllUsers: return "APPROPRIATE_FOR_ALL_USERS"
                case .attractNewUsers: return "ATTRACT_NEW_USERS"
                case .bringBackLapsedUsers: return "BRING_BACK_LAPSED_USERS"
                case .keepActiveUsersInformed: return "KEEP_ACTIVE_USERS_INFORMED"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "APPROPRIATE_FOR_ALL_USERS": self = .appropriateForAllUsers
                case "ATTRACT_NEW_USERS": self = .attractNewUsers
                case "BRING_BACK_LAPSED_USERS": self = .bringBackLapsedUsers
                case "KEEP_ACTIVE_USERS_INFORMED": self = .keepActiveUsersInformed
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct TerritorySchedules: Hashable, Codable {
            public var eventEnd: String?

            public var eventStart: String?

            public var publishStart: String?

            public var territories: [String]?

            public init(
                eventEnd: String? = nil,
                eventStart: String? = nil,
                publishStart: String? = nil,
                territories: [String]? = nil
            ) {
                self.eventEnd = eventEnd
                self.eventStart = eventStart
                self.publishStart = publishStart
                self.territories = territories
            }

            private enum CodingKeys: String, CodingKey {
                case eventEnd
                case eventStart
                case publishStart
                case territories
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var localizations: Localizations?

        public init(localizations: Localizations? = nil) {
            self.localizations = localizations
        }

        private enum CodingKeys: String, CodingKey {
            case localizations
        }

        public struct Localizations: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case appEventLocalizations
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
