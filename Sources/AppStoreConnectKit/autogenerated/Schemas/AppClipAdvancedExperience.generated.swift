// autogenerated

// swiftlint:disable all
import Foundation

public struct AppClipAdvancedExperience: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case appClipAdvancedExperiences
    }

    public struct Attributes: Hashable, Codable {
        public var action: AppClipAction?

        public var businessCategory: BusinessCategory?

        public var defaultLanguage: AppClipAdvancedExperienceLanguage?

        public var isPoweredBy: Bool?

        public var link: URL?

        public var place: Place?

        public var placeStatus: PlaceStatus?

        public var status: Status?

        public var version: Int?

        public init(
            action: AppClipAction? = nil,
            businessCategory: BusinessCategory? = nil,
            defaultLanguage: AppClipAdvancedExperienceLanguage? = nil,
            isPoweredBy: Bool? = nil,
            link: URL? = nil,
            place: Place? = nil,
            placeStatus: PlaceStatus? = nil,
            status: Status? = nil,
            version: Int? = nil
        ) {
            self.action = action
            self.businessCategory = businessCategory
            self.defaultLanguage = defaultLanguage
            self.isPoweredBy = isPoweredBy
            self.link = link
            self.place = place
            self.placeStatus = placeStatus
            self.status = status
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case action
            case businessCategory
            case defaultLanguage
            case isPoweredBy
            case link
            case place
            case placeStatus
            case status
            case version
        }

        public enum BusinessCategory: Hashable, Codable, RawRepresentable {
            case automotive
            case beauty
            case bikes
            case books
            case casino
            case education
            case educationJapan
            case entertainment
            case evCharger
            case financialCny
            case financialEur
            case financialGbp
            case financialJpy
            case financialUsd
            case fitness
            case foodAndDrink
            case gas
            case grocery
            case healthAndMedical
            case hotelAndTravel
            case music
            case parking
            case petServices
            case professionalServices
            case shopping
            case ticketing
            case transit
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .automotive: return "AUTOMOTIVE"
                case .beauty: return "BEAUTY"
                case .bikes: return "BIKES"
                case .books: return "BOOKS"
                case .casino: return "CASINO"
                case .education: return "EDUCATION"
                case .educationJapan: return "EDUCATION_JAPAN"
                case .entertainment: return "ENTERTAINMENT"
                case .evCharger: return "EV_CHARGER"
                case .financialCny: return "FINANCIAL_CNY"
                case .financialEur: return "FINANCIAL_EUR"
                case .financialGbp: return "FINANCIAL_GBP"
                case .financialJpy: return "FINANCIAL_JPY"
                case .financialUsd: return "FINANCIAL_USD"
                case .fitness: return "FITNESS"
                case .foodAndDrink: return "FOOD_AND_DRINK"
                case .gas: return "GAS"
                case .grocery: return "GROCERY"
                case .healthAndMedical: return "HEALTH_AND_MEDICAL"
                case .hotelAndTravel: return "HOTEL_AND_TRAVEL"
                case .music: return "MUSIC"
                case .parking: return "PARKING"
                case .petServices: return "PET_SERVICES"
                case .professionalServices: return "PROFESSIONAL_SERVICES"
                case .shopping: return "SHOPPING"
                case .ticketing: return "TICKETING"
                case .transit: return "TRANSIT"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "AUTOMOTIVE": self = .automotive
                case "BEAUTY": self = .beauty
                case "BIKES": self = .bikes
                case "BOOKS": self = .books
                case "CASINO": self = .casino
                case "EDUCATION": self = .education
                case "EDUCATION_JAPAN": self = .educationJapan
                case "ENTERTAINMENT": self = .entertainment
                case "EV_CHARGER": self = .evCharger
                case "FINANCIAL_CNY": self = .financialCny
                case "FINANCIAL_EUR": self = .financialEur
                case "FINANCIAL_GBP": self = .financialGbp
                case "FINANCIAL_JPY": self = .financialJpy
                case "FINANCIAL_USD": self = .financialUsd
                case "FITNESS": self = .fitness
                case "FOOD_AND_DRINK": self = .foodAndDrink
                case "GAS": self = .gas
                case "GROCERY": self = .grocery
                case "HEALTH_AND_MEDICAL": self = .healthAndMedical
                case "HOTEL_AND_TRAVEL": self = .hotelAndTravel
                case "MUSIC": self = .music
                case "PARKING": self = .parking
                case "PET_SERVICES": self = .petServices
                case "PROFESSIONAL_SERVICES": self = .professionalServices
                case "SHOPPING": self = .shopping
                case "TICKETING": self = .ticketing
                case "TRANSIT": self = .transit
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Place: Hashable, Codable {
            public var categories: [String]?

            public var displayPoint: DisplayPoint?

            public var homePage: String?

            public var mainAddress: MainAddress?

            public var mapAction: MapAction?

            public var names: [String]?

            public var phoneNumber: PhoneNumber?

            public var placeId: String?

            public var relationship: Relationship?

            public init(
                categories: [String]? = nil,
                displayPoint: DisplayPoint? = nil,
                homePage: String? = nil,
                mainAddress: MainAddress? = nil,
                mapAction: MapAction? = nil,
                names: [String]? = nil,
                phoneNumber: PhoneNumber? = nil,
                placeId: String? = nil,
                relationship: Relationship? = nil
            ) {
                self.categories = categories
                self.displayPoint = displayPoint
                self.homePage = homePage
                self.mainAddress = mainAddress
                self.mapAction = mapAction
                self.names = names
                self.phoneNumber = phoneNumber
                self.placeId = placeId
                self.relationship = relationship
            }

            private enum CodingKeys: String, CodingKey {
                case categories
                case displayPoint
                case homePage
                case mainAddress
                case mapAction
                case names
                case phoneNumber
                case placeId
                case relationship
            }

            public struct DisplayPoint: Hashable, Codable {
                public var coordinates: Coordinates?

                public var source: Source?

                public init(
                    coordinates: Coordinates? = nil,
                    source: Source? = nil
                ) {
                    self.coordinates = coordinates
                    self.source = source
                }

                private enum CodingKeys: String, CodingKey {
                    case coordinates
                    case source
                }

                public struct Coordinates: Hashable, Codable {
                    public var latitude: Float?

                    public var longitude: Float?

                    public init(
                        latitude: Float? = nil,
                        longitude: Float? = nil
                    ) {
                        self.latitude = latitude
                        self.longitude = longitude
                    }

                    private enum CodingKeys: String, CodingKey {
                        case latitude
                        case longitude
                    }
                }

                public enum Source: Hashable, Codable, RawRepresentable {
                    case calculated
                    case manuallyPlaced
                    case unknown(String)

                    public var rawValue: String {
                        switch self {
                        case .calculated: return "CALCULATED"
                        case .manuallyPlaced: return "MANUALLY_PLACED"
                        case .unknown(let rawValue): return rawValue
                        }
                    }

                    public init(rawValue: String) {
                        switch rawValue {
                        case "CALCULATED": self = .calculated
                        case "MANUALLY_PLACED": self = .manuallyPlaced
                        default: self = .unknown(rawValue)
                        }
                    }
                }
            }

            public struct MainAddress: Hashable, Codable {
                public var fullAddress: String?

                public var structuredAddress: StructuredAddress?

                public init(
                    fullAddress: String? = nil,
                    structuredAddress: StructuredAddress? = nil
                ) {
                    self.fullAddress = fullAddress
                    self.structuredAddress = structuredAddress
                }

                private enum CodingKeys: String, CodingKey {
                    case fullAddress
                    case structuredAddress
                }

                public struct StructuredAddress: Hashable, Codable {
                    public var countryCode: String?

                    public var floor: String?

                    public var locality: String?

                    public var neighborhood: String?

                    public var postalCode: String?

                    public var stateProvince: String?

                    public var streetAddress: [String]?

                    public init(
                        countryCode: String? = nil,
                        floor: String? = nil,
                        locality: String? = nil,
                        neighborhood: String? = nil,
                        postalCode: String? = nil,
                        stateProvince: String? = nil,
                        streetAddress: [String]? = nil
                    ) {
                        self.countryCode = countryCode
                        self.floor = floor
                        self.locality = locality
                        self.neighborhood = neighborhood
                        self.postalCode = postalCode
                        self.stateProvince = stateProvince
                        self.streetAddress = streetAddress
                    }

                    private enum CodingKeys: String, CodingKey {
                        case countryCode
                        case floor
                        case locality
                        case neighborhood
                        case postalCode
                        case stateProvince
                        case streetAddress
                    }
                }
            }

            public enum MapAction: Hashable, Codable, RawRepresentable {
                case buyTickets
                case hotelBookRoom
                case parkingReserveParking
                case restaurantJoinWaitlist
                case restaurantOrderDelivery
                case restaurantOrderFood
                case restaurantOrderTakeout
                case restaurantReservation
                case restaurantViewMenu
                case scheduleAppointment
                case theaterNowPlaying
                case viewAvailability
                case viewPricing
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .buyTickets: return "BUY_TICKETS"
                    case .hotelBookRoom: return "HOTEL_BOOK_ROOM"
                    case .parkingReserveParking: return "PARKING_RESERVE_PARKING"
                    case .restaurantJoinWaitlist: return "RESTAURANT_JOIN_WAITLIST"
                    case .restaurantOrderDelivery: return "RESTAURANT_ORDER_DELIVERY"
                    case .restaurantOrderFood: return "RESTAURANT_ORDER_FOOD"
                    case .restaurantOrderTakeout: return "RESTAURANT_ORDER_TAKEOUT"
                    case .restaurantReservation: return "RESTAURANT_RESERVATION"
                    case .restaurantViewMenu: return "RESTAURANT_VIEW_MENU"
                    case .scheduleAppointment: return "SCHEDULE_APPOINTMENT"
                    case .theaterNowPlaying: return "THEATER_NOW_PLAYING"
                    case .viewAvailability: return "VIEW_AVAILABILITY"
                    case .viewPricing: return "VIEW_PRICING"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "BUY_TICKETS": self = .buyTickets
                    case "HOTEL_BOOK_ROOM": self = .hotelBookRoom
                    case "PARKING_RESERVE_PARKING": self = .parkingReserveParking
                    case "RESTAURANT_JOIN_WAITLIST": self = .restaurantJoinWaitlist
                    case "RESTAURANT_ORDER_DELIVERY": self = .restaurantOrderDelivery
                    case "RESTAURANT_ORDER_FOOD": self = .restaurantOrderFood
                    case "RESTAURANT_ORDER_TAKEOUT": self = .restaurantOrderTakeout
                    case "RESTAURANT_RESERVATION": self = .restaurantReservation
                    case "RESTAURANT_VIEW_MENU": self = .restaurantViewMenu
                    case "SCHEDULE_APPOINTMENT": self = .scheduleAppointment
                    case "THEATER_NOW_PLAYING": self = .theaterNowPlaying
                    case "VIEW_AVAILABILITY": self = .viewAvailability
                    case "VIEW_PRICING": self = .viewPricing
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct PhoneNumber: Hashable, Codable {
                public var type: `Type`?

                public var intent: String?

                public var number: String?

                public init(
                    type: `Type`? = nil,
                    intent: String? = nil,
                    number: String? = nil
                ) {
                    self.type = type
                    self.intent = intent
                    self.number = number
                }

                private enum CodingKeys: String, CodingKey {
                    case type
                    case intent
                    case number
                }

                public enum `Type`: Hashable, Codable, RawRepresentable {
                    case fax
                    case landline
                    case mobile
                    case tollfree
                    case unknown(String)

                    public var rawValue: String {
                        switch self {
                        case .fax: return "FAX"
                        case .landline: return "LANDLINE"
                        case .mobile: return "MOBILE"
                        case .tollfree: return "TOLLFREE"
                        case .unknown(let rawValue): return rawValue
                        }
                    }

                    public init(rawValue: String) {
                        switch rawValue {
                        case "FAX": self = .fax
                        case "LANDLINE": self = .landline
                        case "MOBILE": self = .mobile
                        case "TOLLFREE": self = .tollfree
                        default: self = .unknown(rawValue)
                        }
                    }
                }
            }

            public enum Relationship: Hashable, Codable, RawRepresentable {
                case authorized
                case other
                case owner
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .authorized: return "AUTHORIZED"
                    case .other: return "OTHER"
                    case .owner: return "OWNER"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "AUTHORIZED": self = .authorized
                    case "OTHER": self = .other
                    case "OWNER": self = .owner
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum PlaceStatus: Hashable, Codable, RawRepresentable {
            case matched
            case noMatch
            case pending
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .matched: return "MATCHED"
                case .noMatch: return "NO_MATCH"
                case .pending: return "PENDING"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "MATCHED": self = .matched
                case "NO_MATCH": self = .noMatch
                case "PENDING": self = .pending
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum Status: Hashable, Codable, RawRepresentable {
            case appTransferInProgress
            case deactivated
            case received
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appTransferInProgress: return "APP_TRANSFER_IN_PROGRESS"
                case .deactivated: return "DEACTIVATED"
                case .received: return "RECEIVED"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "APP_TRANSFER_IN_PROGRESS": self = .appTransferInProgress
                case "DEACTIVATED": self = .deactivated
                case "RECEIVED": self = .received
                default: self = .unknown(rawValue)
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var appClip: AppClip?

        public var headerImage: HeaderImage?

        public var localizations: Localizations?

        public init(
            appClip: AppClip? = nil,
            headerImage: HeaderImage? = nil,
            localizations: Localizations? = nil
        ) {
            self.appClip = appClip
            self.headerImage = headerImage
            self.localizations = localizations
        }

        private enum CodingKeys: String, CodingKey {
            case appClip
            case headerImage
            case localizations
        }

        public struct AppClip: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case appClips
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct HeaderImage: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case appClipAdvancedExperienceImages
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct Localizations: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case appClipAdvancedExperienceLocalizations
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
