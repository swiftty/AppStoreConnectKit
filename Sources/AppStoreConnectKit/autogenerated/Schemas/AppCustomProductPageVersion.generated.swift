// autogenerated

// swiftlint:disable all
import Foundation

public struct AppCustomProductPageVersion: Hashable, Codable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable {
        case appCustomProductPageVersions
    }

    public struct Attributes: Hashable, Codable {
        public var state: State?

        public var version: String?

        public init(
            state: State? = nil,
            version: String? = nil
        ) {
            self.state = state
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case version
        }

        public enum State: Hashable, Codable, RawRepresentable {
            case accepted
            case approved
            case inReview
            case prepareForSubmission
            case readyForReview
            case rejected
            case replacedWithNewVersion
            case waitingForReview
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .accepted: return "ACCEPTED"
                case .approved: return "APPROVED"
                case .inReview: return "IN_REVIEW"
                case .prepareForSubmission: return "PREPARE_FOR_SUBMISSION"
                case .readyForReview: return "READY_FOR_REVIEW"
                case .rejected: return "REJECTED"
                case .replacedWithNewVersion: return "REPLACED_WITH_NEW_VERSION"
                case .waitingForReview: return "WAITING_FOR_REVIEW"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "ACCEPTED": self = .accepted
                case "APPROVED": self = .approved
                case "IN_REVIEW": self = .inReview
                case "PREPARE_FOR_SUBMISSION": self = .prepareForSubmission
                case "READY_FOR_REVIEW": self = .readyForReview
                case "REJECTED": self = .rejected
                case "REPLACED_WITH_NEW_VERSION": self = .replacedWithNewVersion
                case "WAITING_FOR_REVIEW": self = .waitingForReview
                default: self = .unknown(rawValue)
                }
            }
        }
    }

    public struct Relationships: Hashable, Codable {
        public var appCustomProductPage: AppCustomProductPage?

        public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations?

        public init(
            appCustomProductPage: AppCustomProductPage? = nil,
            appCustomProductPageLocalizations: AppCustomProductPageLocalizations? = nil
        ) {
            self.appCustomProductPage = appCustomProductPage
            self.appCustomProductPageLocalizations = appCustomProductPageLocalizations
        }

        private enum CodingKeys: String, CodingKey {
            case appCustomProductPage
            case appCustomProductPageLocalizations
        }

        public struct AppCustomProductPage: Hashable, Codable {
            public var data: Data?

            public var links: Links?

            public init(
                data: Data? = nil,
                links: Links? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case appCustomProductPages
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }

        public struct AppCustomProductPageLocalizations: Hashable, Codable {
            public var data: [Data]?

            public var links: Links?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: Links? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable {
                    case appCustomProductPageLocalizations
                }
            }

            public struct Links: Hashable, Codable {
                public var related: URL?

                public var `self`: URL?

                public init(
                    related: URL? = nil,
                    self _self: URL? = nil
                ) {
                    self.related = related
                    self.`self` = _self
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case `self` = "self"
                }
            }
        }
    }
}

// swiftlint:enable all
