// autogenerated

// swiftlint:disable all
import Foundation

public struct App: Hashable, Codable, Sendable {
    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public var links: ResourceLinks?

    public init(
        id: String,
        type: `Type`,
        attributes: Attributes? = nil,
        relationships: Relationships? = nil,
        links: ResourceLinks? = nil
    ) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case attributes
        case relationships
        case links
    }

    public enum `Type`: String, Hashable, Codable, Sendable {
        case apps
    }

    public struct Attributes: Hashable, Codable, Sendable {
        public var accessibilityUrl: URL?

        public var bundleId: String?

        public var contentRightsDeclaration: ContentRightsDeclaration?

        public var isOrEverWasMadeForKids: Bool?

        public var name: String?

        public var primaryLocale: String?

        public var sku: String?

        public var streamlinedPurchasingEnabled: Bool?

        public var subscriptionStatusUrl: URL?

        public var subscriptionStatusUrlForSandbox: URL?

        public var subscriptionStatusUrlVersion: SubscriptionStatusUrlVersion?

        public var subscriptionStatusUrlVersionForSandbox: SubscriptionStatusUrlVersion?

        public init(
            accessibilityUrl: URL? = nil,
            bundleId: String? = nil,
            contentRightsDeclaration: ContentRightsDeclaration? = nil,
            isOrEverWasMadeForKids: Bool? = nil,
            name: String? = nil,
            primaryLocale: String? = nil,
            sku: String? = nil,
            streamlinedPurchasingEnabled: Bool? = nil,
            subscriptionStatusUrl: URL? = nil,
            subscriptionStatusUrlForSandbox: URL? = nil,
            subscriptionStatusUrlVersion: SubscriptionStatusUrlVersion? = nil,
            subscriptionStatusUrlVersionForSandbox: SubscriptionStatusUrlVersion? = nil
        ) {
            self.accessibilityUrl = accessibilityUrl
            self.bundleId = bundleId
            self.contentRightsDeclaration = contentRightsDeclaration
            self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
            self.name = name
            self.primaryLocale = primaryLocale
            self.sku = sku
            self.streamlinedPurchasingEnabled = streamlinedPurchasingEnabled
            self.subscriptionStatusUrl = subscriptionStatusUrl
            self.subscriptionStatusUrlForSandbox = subscriptionStatusUrlForSandbox
            self.subscriptionStatusUrlVersion = subscriptionStatusUrlVersion
            self.subscriptionStatusUrlVersionForSandbox = subscriptionStatusUrlVersionForSandbox
        }

        private enum CodingKeys: String, CodingKey {
            case accessibilityUrl
            case bundleId
            case contentRightsDeclaration
            case isOrEverWasMadeForKids
            case name
            case primaryLocale
            case sku
            case streamlinedPurchasingEnabled
            case subscriptionStatusUrl
            case subscriptionStatusUrlForSandbox
            case subscriptionStatusUrlVersion
            case subscriptionStatusUrlVersionForSandbox
        }

        public struct ContentRightsDeclaration: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var doesNotUseThirdPartyContent: Self {
                .init(rawValue: "DOES_NOT_USE_THIRD_PARTY_CONTENT")
            }

            public static var usesThirdPartyContent: Self {
                .init(rawValue: "USES_THIRD_PARTY_CONTENT")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }

    public struct Relationships: Hashable, Codable, Sendable {
        public var accessibilityDeclarations: AccessibilityDeclarations?

        public var alternativeDistributionKey: AlternativeDistributionKey?

        public var analyticsReportRequests: AnalyticsReportRequests?

        public var appAvailabilityV2: AppAvailabilityV2?

        public var appClips: AppClips?

        public var appCustomProductPages: AppCustomProductPages?

        public var appEncryptionDeclarations: AppEncryptionDeclarations?

        public var appEvents: AppEvents?

        public var appInfos: AppInfos?

        public var appPricePoints: AppPricePoints?

        public var appPriceSchedule: AppPriceSchedule?

        public var appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2?

        public var appStoreVersions: AppStoreVersions?

        public var backgroundAssets: BackgroundAssets?

        public var betaAppLocalizations: BetaAppLocalizations?

        public var betaAppReviewDetail: BetaAppReviewDetail?

        public var betaFeedbackCrashSubmissions: BetaFeedbackCrashSubmissions?

        public var betaFeedbackScreenshotSubmissions: BetaFeedbackScreenshotSubmissions?

        public var betaGroups: BetaGroups?

        public var betaLicenseAgreement: BetaLicenseAgreement?

        public var betaTesters: BetaTesters?

        public var builds: Builds?

        public var ciProduct: CiProduct?

        public var customerReviewSummarizations: CustomerReviewSummarizations?

        public var customerReviews: CustomerReviews?

        public var endUserLicenseAgreement: EndUserLicenseAgreement?

        public var gameCenterDetail: GameCenterDetail?

        public var gameCenterEnabledVersions: GameCenterEnabledVersions?

        @available(*, deprecated)
        public var inAppPurchases: InAppPurchases?

        public var inAppPurchasesV2: InAppPurchasesV2?

        public var marketplaceSearchDetail: MarketplaceSearchDetail?

        public var perfPowerMetrics: PerfPowerMetrics?

        public var preReleaseVersions: PreReleaseVersions?

        public var promotedPurchases: PromotedPurchases?

        public var reviewSubmissions: ReviewSubmissions?

        public var subscriptionGracePeriod: SubscriptionGracePeriod?

        public var subscriptionGroups: SubscriptionGroups?

        public var webhooks: Webhooks?

        public init(
            accessibilityDeclarations: AccessibilityDeclarations? = nil,
            alternativeDistributionKey: AlternativeDistributionKey? = nil,
            analyticsReportRequests: AnalyticsReportRequests? = nil,
            appAvailabilityV2: AppAvailabilityV2? = nil,
            appClips: AppClips? = nil,
            appCustomProductPages: AppCustomProductPages? = nil,
            appEncryptionDeclarations: AppEncryptionDeclarations? = nil,
            appEvents: AppEvents? = nil,
            appInfos: AppInfos? = nil,
            appPricePoints: AppPricePoints? = nil,
            appPriceSchedule: AppPriceSchedule? = nil,
            appStoreVersionExperimentsV2: AppStoreVersionExperimentsV2? = nil,
            appStoreVersions: AppStoreVersions? = nil,
            backgroundAssets: BackgroundAssets? = nil,
            betaAppLocalizations: BetaAppLocalizations? = nil,
            betaAppReviewDetail: BetaAppReviewDetail? = nil,
            betaFeedbackCrashSubmissions: BetaFeedbackCrashSubmissions? = nil,
            betaFeedbackScreenshotSubmissions: BetaFeedbackScreenshotSubmissions? = nil,
            betaGroups: BetaGroups? = nil,
            betaLicenseAgreement: BetaLicenseAgreement? = nil,
            betaTesters: BetaTesters? = nil,
            builds: Builds? = nil,
            ciProduct: CiProduct? = nil,
            customerReviewSummarizations: CustomerReviewSummarizations? = nil,
            customerReviews: CustomerReviews? = nil,
            endUserLicenseAgreement: EndUserLicenseAgreement? = nil,
            gameCenterDetail: GameCenterDetail? = nil,
            gameCenterEnabledVersions: GameCenterEnabledVersions? = nil,
            inAppPurchases: InAppPurchases? = nil,
            inAppPurchasesV2: InAppPurchasesV2? = nil,
            marketplaceSearchDetail: MarketplaceSearchDetail? = nil,
            perfPowerMetrics: PerfPowerMetrics? = nil,
            preReleaseVersions: PreReleaseVersions? = nil,
            promotedPurchases: PromotedPurchases? = nil,
            reviewSubmissions: ReviewSubmissions? = nil,
            subscriptionGracePeriod: SubscriptionGracePeriod? = nil,
            subscriptionGroups: SubscriptionGroups? = nil,
            webhooks: Webhooks? = nil
        ) {
            self.accessibilityDeclarations = accessibilityDeclarations
            self.alternativeDistributionKey = alternativeDistributionKey
            self.analyticsReportRequests = analyticsReportRequests
            self.appAvailabilityV2 = appAvailabilityV2
            self.appClips = appClips
            self.appCustomProductPages = appCustomProductPages
            self.appEncryptionDeclarations = appEncryptionDeclarations
            self.appEvents = appEvents
            self.appInfos = appInfos
            self.appPricePoints = appPricePoints
            self.appPriceSchedule = appPriceSchedule
            self.appStoreVersionExperimentsV2 = appStoreVersionExperimentsV2
            self.appStoreVersions = appStoreVersions
            self.backgroundAssets = backgroundAssets
            self.betaAppLocalizations = betaAppLocalizations
            self.betaAppReviewDetail = betaAppReviewDetail
            self.betaFeedbackCrashSubmissions = betaFeedbackCrashSubmissions
            self.betaFeedbackScreenshotSubmissions = betaFeedbackScreenshotSubmissions
            self.betaGroups = betaGroups
            self.betaLicenseAgreement = betaLicenseAgreement
            self.betaTesters = betaTesters
            self.builds = builds
            self.ciProduct = ciProduct
            self.customerReviewSummarizations = customerReviewSummarizations
            self.customerReviews = customerReviews
            self.endUserLicenseAgreement = endUserLicenseAgreement
            self.gameCenterDetail = gameCenterDetail
            self.gameCenterEnabledVersions = gameCenterEnabledVersions
            self.inAppPurchases = inAppPurchases
            self.inAppPurchasesV2 = inAppPurchasesV2
            self.marketplaceSearchDetail = marketplaceSearchDetail
            self.perfPowerMetrics = perfPowerMetrics
            self.preReleaseVersions = preReleaseVersions
            self.promotedPurchases = promotedPurchases
            self.reviewSubmissions = reviewSubmissions
            self.subscriptionGracePeriod = subscriptionGracePeriod
            self.subscriptionGroups = subscriptionGroups
            self.webhooks = webhooks
        }

        private enum CodingKeys: String, CodingKey {
            case accessibilityDeclarations
            case alternativeDistributionKey
            case analyticsReportRequests
            case appAvailabilityV2
            case appClips
            case appCustomProductPages
            case appEncryptionDeclarations
            case appEvents
            case appInfos
            case appPricePoints
            case appPriceSchedule
            case appStoreVersionExperimentsV2
            case appStoreVersions
            case backgroundAssets
            case betaAppLocalizations
            case betaAppReviewDetail
            case betaFeedbackCrashSubmissions
            case betaFeedbackScreenshotSubmissions
            case betaGroups
            case betaLicenseAgreement
            case betaTesters
            case builds
            case ciProduct
            case customerReviewSummarizations
            case customerReviews
            case endUserLicenseAgreement
            case gameCenterDetail
            case gameCenterEnabledVersions
            case inAppPurchases
            case inAppPurchasesV2
            case marketplaceSearchDetail
            case perfPowerMetrics
            case preReleaseVersions
            case promotedPurchases
            case reviewSubmissions
            case subscriptionGracePeriod
            case subscriptionGroups
            case webhooks
        }

        public struct AccessibilityDeclarations: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct AlternativeDistributionKey: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct AnalyticsReportRequests: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct AppAvailabilityV2: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct AppClips: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appClips
                }
            }
        }

        public struct AppCustomProductPages: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appCustomProductPages
                }
            }
        }

        public struct AppEncryptionDeclarations: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appEncryptionDeclarations
                }
            }
        }

        public struct AppEvents: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appEvents
                }
            }
        }

        public struct AppInfos: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appInfos
                }
            }
        }

        public struct AppPricePoints: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct AppPriceSchedule: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct AppStoreVersionExperimentsV2: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersionExperiments
                }
            }
        }

        public struct AppStoreVersions: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case appStoreVersions
                }
            }
        }

        public struct BackgroundAssets: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct BetaAppLocalizations: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaAppLocalizations
                }
            }
        }

        public struct BetaAppReviewDetail: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaAppReviewDetails
                }
            }
        }

        public struct BetaFeedbackCrashSubmissions: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct BetaFeedbackScreenshotSubmissions: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct BetaGroups: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaGroups
                }
            }
        }

        public struct BetaLicenseAgreement: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case betaLicenseAgreements
                }
            }
        }

        public struct BetaTesters: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct Builds: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case builds
                }
            }
        }

        public struct CiProduct: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case ciProducts
                }
            }
        }

        public struct CustomerReviewSummarizations: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct CustomerReviews: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct EndUserLicenseAgreement: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case endUserLicenseAgreements
                }
            }
        }

        public struct GameCenterDetail: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterDetails
                }
            }
        }

        public struct GameCenterEnabledVersions: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case gameCenterEnabledVersions
                }
            }
        }

        public struct InAppPurchases: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case inAppPurchases
                }
            }
        }

        public struct InAppPurchasesV2: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case inAppPurchases
                }
            }
        }

        public struct MarketplaceSearchDetail: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct PerfPowerMetrics: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }

        public struct PreReleaseVersions: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case preReleaseVersions
                }
            }
        }

        public struct PromotedPurchases: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case promotedPurchases
                }
            }
        }

        public struct ReviewSubmissions: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case reviewSubmissions
                }
            }
        }

        public struct SubscriptionGracePeriod: Hashable, Codable, Sendable {
            public var data: Data?

            public var links: RelationshipLinks?

            public init(
                data: Data? = nil,
                links: RelationshipLinks? = nil
            ) {
                self.data = data
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionGracePeriods
                }
            }
        }

        public struct SubscriptionGroups: Hashable, Codable, Sendable {
            public var data: [Data]?

            public var links: RelationshipLinks?

            public var meta: PagingInformation?

            public init(
                data: [Data]? = nil,
                links: RelationshipLinks? = nil,
                meta: PagingInformation? = nil
            ) {
                self.data = data
                self.links = links
                self.meta = meta
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case links
                case meta
            }

            public struct Data: Hashable, Codable, Sendable {
                public var id: String

                public var type: `Type`

                public init(
                    id: String,
                    type: `Type`
                ) {
                    self.id = id
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case id
                    case type
                }

                public enum `Type`: String, Hashable, Codable, Sendable {
                    case subscriptionGroups
                }
            }
        }

        public struct Webhooks: Hashable, Codable, Sendable {
            public var links: RelationshipLinks?

            public init(links: RelationshipLinks? = nil) {
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case links
            }
        }
    }
}

// swiftlint:enable all
