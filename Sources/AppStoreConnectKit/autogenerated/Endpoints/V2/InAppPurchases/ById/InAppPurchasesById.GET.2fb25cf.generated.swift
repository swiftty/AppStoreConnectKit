// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V2.InAppPurchases.ById {
    public struct GET: Endpoint {
        public typealias Response = InAppPurchaseV2Response

        public var path: String {
            "/v2/inAppPurchases/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[inAppPurchaseAppStoreReviewScreenshots]",
                             value: parameters.fields[.inAppPurchaseAppStoreReviewScreenshots]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchaseAvailabilities]",
                             value: parameters.fields[.inAppPurchaseAvailabilities]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchaseContents]",
                             value: parameters.fields[.inAppPurchaseContents]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchaseImages]",
                             value: parameters.fields[.inAppPurchaseImages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchaseLocalizations]",
                             value: parameters.fields[.inAppPurchaseLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchasePricePoints]",
                             value: parameters.fields[.inAppPurchasePricePoints]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchasePriceSchedules]",
                             value: parameters.fields[.inAppPurchasePriceSchedules]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchases]",
                             value: parameters.fields[.inAppPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[promotedPurchases]",
                             value: parameters.fields[.promotedPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[images]",
                             value: parameters.limit[.images].map { "\($0)" }),
                URLQueryItem(name: "limit[inAppPurchaseLocalizations]",
                             value: parameters.limit[.inAppPurchaseLocalizations].map { "\($0)" }),
                URLQueryItem(name: "limit[pricePoints]",
                             value: parameters.limit[.pricePoints].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single InAppPurchase as `InAppPurchaseV2Response`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(InAppPurchaseV2Response.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V2.InAppPurchases.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct InAppPurchaseAppStoreReviewScreenshots: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var assetDeliveryState: Self {
                    .init(rawValue: "assetDeliveryState")
                }

                public static var assetToken: Self {
                    .init(rawValue: "assetToken")
                }

                public static var assetType: Self {
                    .init(rawValue: "assetType")
                }

                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var imageAsset: Self {
                    .init(rawValue: "imageAsset")
                }

                public static var inAppPurchaseV2: Self {
                    .init(rawValue: "inAppPurchaseV2")
                }

                public static var sourceFileChecksum: Self {
                    .init(rawValue: "sourceFileChecksum")
                }

                public static var uploadOperations: Self {
                    .init(rawValue: "uploadOperations")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchaseAvailabilities: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var availableInNewTerritories: Self {
                    .init(rawValue: "availableInNewTerritories")
                }

                public static var availableTerritories: Self {
                    .init(rawValue: "availableTerritories")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchaseContents: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var inAppPurchaseV2: Self {
                    .init(rawValue: "inAppPurchaseV2")
                }

                public static var lastModifiedDate: Self {
                    .init(rawValue: "lastModifiedDate")
                }

                public static var url: Self {
                    .init(rawValue: "url")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchaseImages: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var assetToken: Self {
                    .init(rawValue: "assetToken")
                }

                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var imageAsset: Self {
                    .init(rawValue: "imageAsset")
                }

                public static var inAppPurchase: Self {
                    .init(rawValue: "inAppPurchase")
                }

                public static var sourceFileChecksum: Self {
                    .init(rawValue: "sourceFileChecksum")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var uploadOperations: Self {
                    .init(rawValue: "uploadOperations")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchaseLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var description: Self {
                    .init(rawValue: "description")
                }

                public static var inAppPurchaseV2: Self {
                    .init(rawValue: "inAppPurchaseV2")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchasePricePoints: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var customerPrice: Self {
                    .init(rawValue: "customerPrice")
                }

                public static var equalizations: Self {
                    .init(rawValue: "equalizations")
                }

                public static var proceeds: Self {
                    .init(rawValue: "proceeds")
                }

                public static var territory: Self {
                    .init(rawValue: "territory")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchasePriceSchedules: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var automaticPrices: Self {
                    .init(rawValue: "automaticPrices")
                }

                public static var baseTerritory: Self {
                    .init(rawValue: "baseTerritory")
                }

                public static var manualPrices: Self {
                    .init(rawValue: "manualPrices")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appStoreReviewScreenshot: Self {
                    .init(rawValue: "appStoreReviewScreenshot")
                }

                public static var content: Self {
                    .init(rawValue: "content")
                }

                public static var contentHosting: Self {
                    .init(rawValue: "contentHosting")
                }

                public static var familySharable: Self {
                    .init(rawValue: "familySharable")
                }

                public static var iapPriceSchedule: Self {
                    .init(rawValue: "iapPriceSchedule")
                }

                public static var images: Self {
                    .init(rawValue: "images")
                }

                public static var inAppPurchaseAvailability: Self {
                    .init(rawValue: "inAppPurchaseAvailability")
                }

                public static var inAppPurchaseLocalizations: Self {
                    .init(rawValue: "inAppPurchaseLocalizations")
                }

                public static var inAppPurchaseType: Self {
                    .init(rawValue: "inAppPurchaseType")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var pricePoints: Self {
                    .init(rawValue: "pricePoints")
                }

                public static var productId: Self {
                    .init(rawValue: "productId")
                }

                public static var promotedPurchase: Self {
                    .init(rawValue: "promotedPurchase")
                }

                public static var reviewNote: Self {
                    .init(rawValue: "reviewNote")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct PromotedPurchases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var enabled: Self {
                    .init(rawValue: "enabled")
                }

                public static var inAppPurchaseV2: Self {
                    .init(rawValue: "inAppPurchaseV2")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public static var visibleForAllUsers: Self {
                    .init(rawValue: "visibleForAllUsers")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
                public static var inAppPurchaseAppStoreReviewScreenshots: Relation<[InAppPurchaseAppStoreReviewScreenshots]?> {
                    .init(key: "fields[inAppPurchaseAppStoreReviewScreenshots]")
                }

                /// the fields to include for returned resources of type inAppPurchaseAvailabilities
                public static var inAppPurchaseAvailabilities: Relation<[InAppPurchaseAvailabilities]?> {
                    .init(key: "fields[inAppPurchaseAvailabilities]")
                }

                /// the fields to include for returned resources of type inAppPurchaseContents
                public static var inAppPurchaseContents: Relation<[InAppPurchaseContents]?> {
                    .init(key: "fields[inAppPurchaseContents]")
                }

                /// the fields to include for returned resources of type inAppPurchaseImages
                public static var inAppPurchaseImages: Relation<[InAppPurchaseImages]?> {
                    .init(key: "fields[inAppPurchaseImages]")
                }

                /// the fields to include for returned resources of type inAppPurchaseLocalizations
                public static var inAppPurchaseLocalizations: Relation<[InAppPurchaseLocalizations]?> {
                    .init(key: "fields[inAppPurchaseLocalizations]")
                }

                /// the fields to include for returned resources of type inAppPurchasePricePoints
                public static var inAppPurchasePricePoints: Relation<[InAppPurchasePricePoints]?> {
                    .init(key: "fields[inAppPurchasePricePoints]")
                }

                /// the fields to include for returned resources of type inAppPurchasePriceSchedules
                public static var inAppPurchasePriceSchedules: Relation<[InAppPurchasePriceSchedules]?> {
                    .init(key: "fields[inAppPurchasePriceSchedules]")
                }

                /// the fields to include for returned resources of type inAppPurchases
                public static var inAppPurchases: Relation<[InAppPurchases]?> {
                    .init(key: "fields[inAppPurchases]")
                }

                /// the fields to include for returned resources of type promotedPurchases
                public static var promotedPurchases: Relation<[PromotedPurchases]?> {
                    .init(key: "fields[promotedPurchases]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appStoreReviewScreenshot: Self {
                .init(rawValue: "appStoreReviewScreenshot")
            }

            public static var content: Self {
                .init(rawValue: "content")
            }

            public static var iapPriceSchedule: Self {
                .init(rawValue: "iapPriceSchedule")
            }

            public static var images: Self {
                .init(rawValue: "images")
            }

            public static var inAppPurchaseAvailability: Self {
                .init(rawValue: "inAppPurchaseAvailability")
            }

            public static var inAppPurchaseLocalizations: Self {
                .init(rawValue: "inAppPurchaseLocalizations")
            }

            public static var pricePoints: Self {
                .init(rawValue: "pricePoints")
            }

            public static var promotedPurchase: Self {
                .init(rawValue: "promotedPurchase")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related images returned (when they are included)
                public static var images: Relation<Int?> {
                    .init(key: "limit[images]")
                }

                /// maximum number of related inAppPurchaseLocalizations returned (when they are included)
                public static var inAppPurchaseLocalizations: Relation<Int?> {
                    .init(key: "limit[inAppPurchaseLocalizations]")
                }

                /// maximum number of related pricePoints returned (when they are included)
                public static var pricePoints: Relation<Int?> {
                    .init(key: "limit[pricePoints]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
