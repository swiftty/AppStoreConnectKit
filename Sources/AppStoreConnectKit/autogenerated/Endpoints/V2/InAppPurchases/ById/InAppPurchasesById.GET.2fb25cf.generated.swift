// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V2.InAppPurchases.ById {
    public struct GET: Endpoint {
        public typealias Response = InAppPurchaseV2Response

        public var path: String {
            "/v2/inAppPurchases/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[inAppPurchaseAppStoreReviewScreenshots]",
                             value: parameters.fields[.inAppPurchaseAppStoreReviewScreenshots]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchaseAvailabilities]",
                             value: parameters.fields[.inAppPurchaseAvailabilities]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchaseContents]",
                             value: parameters.fields[.inAppPurchaseContents]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchaseLocalizations]",
                             value: parameters.fields[.inAppPurchaseLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchasePricePoints]",
                             value: parameters.fields[.inAppPurchasePricePoints]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchasePriceSchedules]",
                             value: parameters.fields[.inAppPurchasePriceSchedules]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchases]",
                             value: parameters.fields[.inAppPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[promotedPurchases]",
                             value: parameters.fields[.promotedPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[inAppPurchaseLocalizations]",
                             value: parameters.limit[.inAppPurchaseLocalizations].map { "\($0)" }),
                URLQueryItem(name: "limit[pricePoints]",
                             value: parameters.limit[.pricePoints].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single InAppPurchase as `InAppPurchaseV2Response`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(InAppPurchaseV2Response.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V2.InAppPurchases.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum InAppPurchaseAppStoreReviewScreenshots: Hashable, Codable, RawRepresentable {
                case assetDeliveryState
                case assetToken
                case assetType
                case fileName
                case fileSize
                case imageAsset
                case inAppPurchaseV2
                case sourceFileChecksum
                case uploadOperations
                case uploaded
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .assetDeliveryState: return "assetDeliveryState"
                    case .assetToken: return "assetToken"
                    case .assetType: return "assetType"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .imageAsset: return "imageAsset"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .sourceFileChecksum: return "sourceFileChecksum"
                    case .uploadOperations: return "uploadOperations"
                    case .uploaded: return "uploaded"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "assetDeliveryState": self = .assetDeliveryState
                    case "assetToken": self = .assetToken
                    case "assetType": self = .assetType
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "imageAsset": self = .imageAsset
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "sourceFileChecksum": self = .sourceFileChecksum
                    case "uploadOperations": self = .uploadOperations
                    case "uploaded": self = .uploaded
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchaseAvailabilities: Hashable, Codable, RawRepresentable {
                case availableInNewTerritories
                case availableTerritories
                case inAppPurchase
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .availableInNewTerritories: return "availableInNewTerritories"
                    case .availableTerritories: return "availableTerritories"
                    case .inAppPurchase: return "inAppPurchase"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "availableInNewTerritories": self = .availableInNewTerritories
                    case "availableTerritories": self = .availableTerritories
                    case "inAppPurchase": self = .inAppPurchase
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchaseContents: Hashable, Codable, RawRepresentable {
                case fileName
                case fileSize
                case inAppPurchaseV2
                case lastModifiedDate
                case url
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .lastModifiedDate: return "lastModifiedDate"
                    case .url: return "url"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "lastModifiedDate": self = .lastModifiedDate
                    case "url": self = .url
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchaseLocalizations: Hashable, Codable, RawRepresentable {
                case description
                case inAppPurchaseV2
                case locale
                case name
                case state
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .description: return "description"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .locale: return "locale"
                    case .name: return "name"
                    case .state: return "state"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "description": self = .description
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "locale": self = .locale
                    case "name": self = .name
                    case "state": self = .state
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchasePricePoints: Hashable, Codable, RawRepresentable {
                case customerPrice
                case inAppPurchaseV2
                case priceTier
                case proceeds
                case territory
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .customerPrice: return "customerPrice"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .priceTier: return "priceTier"
                    case .proceeds: return "proceeds"
                    case .territory: return "territory"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "customerPrice": self = .customerPrice
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "priceTier": self = .priceTier
                    case "proceeds": self = .proceeds
                    case "territory": self = .territory
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchasePriceSchedules: Hashable, Codable, RawRepresentable {
                case automaticPrices
                case baseTerritory
                case inAppPurchase
                case manualPrices
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .automaticPrices: return "automaticPrices"
                    case .baseTerritory: return "baseTerritory"
                    case .inAppPurchase: return "inAppPurchase"
                    case .manualPrices: return "manualPrices"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "automaticPrices": self = .automaticPrices
                    case "baseTerritory": self = .baseTerritory
                    case "inAppPurchase": self = .inAppPurchase
                    case "manualPrices": self = .manualPrices
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchases: Hashable, Codable, RawRepresentable {
                case app
                case appStoreReviewScreenshot
                case availableInAllTerritories
                case content
                case contentHosting
                case familySharable
                case iapPriceSchedule
                case inAppPurchaseAvailability
                case inAppPurchaseLocalizations
                case inAppPurchaseType
                case name
                case pricePoints
                case productId
                case promotedPurchase
                case reviewNote
                case state
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appStoreReviewScreenshot: return "appStoreReviewScreenshot"
                    case .availableInAllTerritories: return "availableInAllTerritories"
                    case .content: return "content"
                    case .contentHosting: return "contentHosting"
                    case .familySharable: return "familySharable"
                    case .iapPriceSchedule: return "iapPriceSchedule"
                    case .inAppPurchaseAvailability: return "inAppPurchaseAvailability"
                    case .inAppPurchaseLocalizations: return "inAppPurchaseLocalizations"
                    case .inAppPurchaseType: return "inAppPurchaseType"
                    case .name: return "name"
                    case .pricePoints: return "pricePoints"
                    case .productId: return "productId"
                    case .promotedPurchase: return "promotedPurchase"
                    case .reviewNote: return "reviewNote"
                    case .state: return "state"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appStoreReviewScreenshot": self = .appStoreReviewScreenshot
                    case "availableInAllTerritories": self = .availableInAllTerritories
                    case "content": self = .content
                    case "contentHosting": self = .contentHosting
                    case "familySharable": self = .familySharable
                    case "iapPriceSchedule": self = .iapPriceSchedule
                    case "inAppPurchaseAvailability": self = .inAppPurchaseAvailability
                    case "inAppPurchaseLocalizations": self = .inAppPurchaseLocalizations
                    case "inAppPurchaseType": self = .inAppPurchaseType
                    case "name": self = .name
                    case "pricePoints": self = .pricePoints
                    case "productId": self = .productId
                    case "promotedPurchase": self = .promotedPurchase
                    case "reviewNote": self = .reviewNote
                    case "state": self = .state
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PromotedPurchases: Hashable, Codable, RawRepresentable {
                case app
                case enabled
                case inAppPurchaseV2
                case promotionImages
                case state
                case subscription
                case visibleForAllUsers
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .enabled: return "enabled"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .promotionImages: return "promotionImages"
                    case .state: return "state"
                    case .subscription: return "subscription"
                    case .visibleForAllUsers: return "visibleForAllUsers"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "enabled": self = .enabled
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "promotionImages": self = .promotionImages
                    case "state": self = .state
                    case "subscription": self = .subscription
                    case "visibleForAllUsers": self = .visibleForAllUsers
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case appStoreReviewScreenshot
            case content
            case iapPriceSchedule
            case inAppPurchaseAvailability
            case inAppPurchaseLocalizations
            case pricePoints
            case promotedPurchase
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appStoreReviewScreenshot: return "appStoreReviewScreenshot"
                case .content: return "content"
                case .iapPriceSchedule: return "iapPriceSchedule"
                case .inAppPurchaseAvailability: return "inAppPurchaseAvailability"
                case .inAppPurchaseLocalizations: return "inAppPurchaseLocalizations"
                case .pricePoints: return "pricePoints"
                case .promotedPurchase: return "promotedPurchase"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "appStoreReviewScreenshot": self = .appStoreReviewScreenshot
                case "content": self = .content
                case "iapPriceSchedule": self = .iapPriceSchedule
                case "inAppPurchaseAvailability": self = .inAppPurchaseAvailability
                case "inAppPurchaseLocalizations": self = .inAppPurchaseLocalizations
                case "pricePoints": self = .pricePoints
                case "promotedPurchase": self = .promotedPurchase
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.InAppPurchaseAppStoreReviewScreenshots]?> {
    /// the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
    public static var inAppPurchaseAppStoreReviewScreenshots: Relation {
        .init(key: "fields[inAppPurchaseAppStoreReviewScreenshots]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.InAppPurchaseAvailabilities]?> {
    /// the fields to include for returned resources of type inAppPurchaseAvailabilities
    public static var inAppPurchaseAvailabilities: Relation {
        .init(key: "fields[inAppPurchaseAvailabilities]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.InAppPurchaseContents]?> {
    /// the fields to include for returned resources of type inAppPurchaseContents
    public static var inAppPurchaseContents: Relation {
        .init(key: "fields[inAppPurchaseContents]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.InAppPurchaseLocalizations]?> {
    /// the fields to include for returned resources of type inAppPurchaseLocalizations
    public static var inAppPurchaseLocalizations: Relation {
        .init(key: "fields[inAppPurchaseLocalizations]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.InAppPurchasePricePoints]?> {
    /// the fields to include for returned resources of type inAppPurchasePricePoints
    public static var inAppPurchasePricePoints: Relation {
        .init(key: "fields[inAppPurchasePricePoints]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.InAppPurchasePriceSchedules]?> {
    /// the fields to include for returned resources of type inAppPurchasePriceSchedules
    public static var inAppPurchasePriceSchedules: Relation {
        .init(key: "fields[inAppPurchasePriceSchedules]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.InAppPurchases]?> {
    /// the fields to include for returned resources of type inAppPurchases
    public static var inAppPurchases: Relation {
        .init(key: "fields[inAppPurchases]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Fields, [V2.InAppPurchases.ById.GET.Parameters.Fields.PromotedPurchases]?> {
    /// the fields to include for returned resources of type promotedPurchases
    public static var promotedPurchases: Relation {
        .init(key: "fields[promotedPurchases]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related inAppPurchaseLocalizations returned (when they are included)
    public static var inAppPurchaseLocalizations: Relation {
        .init(key: "limit[inAppPurchaseLocalizations]")
    }
}

extension Relation<V2.InAppPurchases.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related pricePoints returned (when they are included)
    public static var pricePoints: Relation {
        .init(key: "limit[pricePoints]")
    }
}

// swiftlint:enable all
