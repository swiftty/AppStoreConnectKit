// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V2.InAppPurchases.ById.AppStoreReviewScreenshot {
    public struct GET: Endpoint {
        public typealias Response = InAppPurchaseAppStoreReviewScreenshotResponse

        public var path: String {
            "/v2/inAppPurchases/\(id)/appStoreReviewScreenshot"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[inAppPurchaseAppStoreReviewScreenshots]",
                             value: parameters.fields[.inAppPurchaseAppStoreReviewScreenshots]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchases]",
                             value: parameters.fields[.inAppPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single InAppPurchaseAppStoreReviewScreenshot as `InAppPurchaseAppStoreReviewScreenshotResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(InAppPurchaseAppStoreReviewScreenshotResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V2.InAppPurchases.ById.AppStoreReviewScreenshot.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum InAppPurchaseAppStoreReviewScreenshots: Hashable, Codable, RawRepresentable {
                case assetDeliveryState
                case assetToken
                case assetType
                case fileName
                case fileSize
                case imageAsset
                case inAppPurchaseV2
                case sourceFileChecksum
                case uploadOperations
                case uploaded
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .assetDeliveryState: return "assetDeliveryState"
                    case .assetToken: return "assetToken"
                    case .assetType: return "assetType"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .imageAsset: return "imageAsset"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .sourceFileChecksum: return "sourceFileChecksum"
                    case .uploadOperations: return "uploadOperations"
                    case .uploaded: return "uploaded"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "assetDeliveryState": self = .assetDeliveryState
                    case "assetToken": self = .assetToken
                    case "assetType": self = .assetType
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "imageAsset": self = .imageAsset
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "sourceFileChecksum": self = .sourceFileChecksum
                    case "uploadOperations": self = .uploadOperations
                    case "uploaded": self = .uploaded
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchases: Hashable, Codable, RawRepresentable {
                case app
                case appStoreReviewScreenshot
                case availableInAllTerritories
                case content
                case contentHosting
                case familySharable
                case iapPriceSchedule
                case inAppPurchaseAvailability
                case inAppPurchaseLocalizations
                case inAppPurchaseType
                case name
                case pricePoints
                case productId
                case promotedPurchase
                case reviewNote
                case state
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appStoreReviewScreenshot: return "appStoreReviewScreenshot"
                    case .availableInAllTerritories: return "availableInAllTerritories"
                    case .content: return "content"
                    case .contentHosting: return "contentHosting"
                    case .familySharable: return "familySharable"
                    case .iapPriceSchedule: return "iapPriceSchedule"
                    case .inAppPurchaseAvailability: return "inAppPurchaseAvailability"
                    case .inAppPurchaseLocalizations: return "inAppPurchaseLocalizations"
                    case .inAppPurchaseType: return "inAppPurchaseType"
                    case .name: return "name"
                    case .pricePoints: return "pricePoints"
                    case .productId: return "productId"
                    case .promotedPurchase: return "promotedPurchase"
                    case .reviewNote: return "reviewNote"
                    case .state: return "state"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appStoreReviewScreenshot": self = .appStoreReviewScreenshot
                    case "availableInAllTerritories": self = .availableInAllTerritories
                    case "content": self = .content
                    case "contentHosting": self = .contentHosting
                    case "familySharable": self = .familySharable
                    case "iapPriceSchedule": self = .iapPriceSchedule
                    case "inAppPurchaseAvailability": self = .inAppPurchaseAvailability
                    case "inAppPurchaseLocalizations": self = .inAppPurchaseLocalizations
                    case "inAppPurchaseType": self = .inAppPurchaseType
                    case "name": self = .name
                    case "pricePoints": self = .pricePoints
                    case "productId": self = .productId
                    case "promotedPurchase": self = .promotedPurchase
                    case "reviewNote": self = .reviewNote
                    case "state": self = .state
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case inAppPurchaseV2
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .inAppPurchaseV2: return "inAppPurchaseV2"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "inAppPurchaseV2": self = .inAppPurchaseV2
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

extension Relation<V2.InAppPurchases.ById.AppStoreReviewScreenshot.GET.Parameters.Fields, [V2.InAppPurchases.ById.AppStoreReviewScreenshot.GET.Parameters.Fields.InAppPurchaseAppStoreReviewScreenshots]?> {
    /// the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
    public static var inAppPurchaseAppStoreReviewScreenshots: Relation {
        .init(key: "fields[inAppPurchaseAppStoreReviewScreenshots]")
    }
}

extension Relation<V2.InAppPurchases.ById.AppStoreReviewScreenshot.GET.Parameters.Fields, [V2.InAppPurchases.ById.AppStoreReviewScreenshot.GET.Parameters.Fields.InAppPurchases]?> {
    /// the fields to include for returned resources of type inAppPurchases
    public static var inAppPurchases: Relation {
        .init(key: "fields[inAppPurchases]")
    }
}

// swiftlint:enable all
