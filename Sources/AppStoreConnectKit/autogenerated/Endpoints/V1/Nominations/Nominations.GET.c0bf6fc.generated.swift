// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Nominations {
    public struct GET: Endpoint {
        public typealias Response = NominationsResponse

        public var path: String {
            "/v1/nominations"
        }

        public var parameters: Parameters = Parameters()

        public init() {

        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[nominations]",
                             value: parameters.fields[.nominations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[relatedApps]",
                             value: parameters.filter[.relatedApps]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[state]",
                             value: parameters.filter[.state]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[type]",
                             value: parameters.filter[.type]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[inAppEvents]",
                             value: parameters.limit[.inAppEvents].map { "\($0)" }),
                URLQueryItem(name: "limit[relatedApps]",
                             value: parameters.limit[.relatedApps].map { "\($0)" }),
                URLQueryItem(name: "limit[supportedTerritories]",
                             value: parameters.limit[.supportedTerritories].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of Nominations as `NominationsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(NominationsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Nominations.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Nominations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var createdByActor: Self {
                    .init(rawValue: "createdByActor")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var description: Self {
                    .init(rawValue: "description")
                }

                public static var deviceFamilies: Self {
                    .init(rawValue: "deviceFamilies")
                }

                public static var hasInAppEvents: Self {
                    .init(rawValue: "hasInAppEvents")
                }

                public static var inAppEvents: Self {
                    .init(rawValue: "inAppEvents")
                }

                public static var lastModifiedByActor: Self {
                    .init(rawValue: "lastModifiedByActor")
                }

                public static var lastModifiedDate: Self {
                    .init(rawValue: "lastModifiedDate")
                }

                public static var launchInSelectMarketsFirst: Self {
                    .init(rawValue: "launchInSelectMarketsFirst")
                }

                public static var locales: Self {
                    .init(rawValue: "locales")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var notes: Self {
                    .init(rawValue: "notes")
                }

                public static var preOrderEnabled: Self {
                    .init(rawValue: "preOrderEnabled")
                }

                public static var publishEndDate: Self {
                    .init(rawValue: "publishEndDate")
                }

                public static var publishStartDate: Self {
                    .init(rawValue: "publishStartDate")
                }

                public static var relatedApps: Self {
                    .init(rawValue: "relatedApps")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var submittedByActor: Self {
                    .init(rawValue: "submittedByActor")
                }

                public static var submittedDate: Self {
                    .init(rawValue: "submittedDate")
                }

                public static var supplementalMaterialsUris: Self {
                    .init(rawValue: "supplementalMaterialsUris")
                }

                public static var supportedTerritories: Self {
                    .init(rawValue: "supportedTerritories")
                }

                public static var type: Self {
                    .init(rawValue: "type")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type nominations
                public static var nominations: Relation<[Nominations]?> {
                    .init(key: "fields[nominations]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var archived: Self {
                    .init(rawValue: "ARCHIVED")
                }

                public static var draft: Self {
                    .init(rawValue: "DRAFT")
                }

                public static var submitted: Self {
                    .init(rawValue: "SUBMITTED")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct `Type`: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appEnhancements: Self {
                    .init(rawValue: "APP_ENHANCEMENTS")
                }

                public static var appLaunch: Self {
                    .init(rawValue: "APP_LAUNCH")
                }

                public static var newContent: Self {
                    .init(rawValue: "NEW_CONTENT")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by id(s) of related 'relatedApps'
                public static var relatedApps: Relation<[String]?> {
                    .init(key: "filter[relatedApps]")
                }

                /// filter by attribute 'state' **(required)**
                public static var state: Relation<[State]?> {
                    .init(key: "filter[state]")
                }

                /// filter by attribute 'type'
                public static var type: Relation<[`Type`]?> {
                    .init(key: "filter[type]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var createdByActor: Self {
                .init(rawValue: "createdByActor")
            }

            public static var inAppEvents: Self {
                .init(rawValue: "inAppEvents")
            }

            public static var lastModifiedByActor: Self {
                .init(rawValue: "lastModifiedByActor")
            }

            public static var relatedApps: Self {
                .init(rawValue: "relatedApps")
            }

            public static var submittedByActor: Self {
                .init(rawValue: "submittedByActor")
            }

            public static var supportedTerritories: Self {
                .init(rawValue: "supportedTerritories")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related inAppEvents returned (when they are included)
                public static var inAppEvents: Relation<Int?> {
                    .init(key: "limit[inAppEvents]")
                }

                /// maximum number of related relatedApps returned (when they are included)
                public static var relatedApps: Relation<Int?> {
                    .init(key: "limit[relatedApps]")
                }

                /// maximum number of related supportedTerritories returned (when they are included)
                public static var supportedTerritories: Relation<Int?> {
                    .init(key: "limit[supportedTerritories]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Sort: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var lastModifiedDate: Self {
                .init(rawValue: "lastModifiedDate")
            }

            public static var lastModifiedDateDesc: Self {
                .init(rawValue: "-lastModifiedDate")
            }

            public static var name: Self {
                .init(rawValue: "name")
            }

            public static var nameDesc: Self {
                .init(rawValue: "-name")
            }

            public static var publishEndDate: Self {
                .init(rawValue: "publishEndDate")
            }

            public static var publishEndDateDesc: Self {
                .init(rawValue: "-publishEndDate")
            }

            public static var publishStartDate: Self {
                .init(rawValue: "publishStartDate")
            }

            public static var publishStartDateDesc: Self {
                .init(rawValue: "-publishStartDate")
            }

            public static var type: Self {
                .init(rawValue: "type")
            }

            public static var typeDesc: Self {
                .init(rawValue: "-type")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
