// autogenerated

// swiftlint:disable all
import Foundation

extension V1.Certificates {
    public struct GET: Endpoint {
        public typealias Response = CertificatesResponse

        public var path: String {
            "/v1/certificates"
        }

        public var parameters: Parameters = Parameters()

        public init() {

        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[certificates]",
                             value: parameters.fields[.certificates]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[certificateType]",
                             value: parameters.filter[.certificateType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[displayName]",
                             value: parameters.filter[.displayName]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[id]",
                             value: parameters.filter[.id]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[serialNumber]",
                             value: parameters.filter[.serialNumber]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of Certificates as `CertificatesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(CertificatesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Certificates.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// maximum resources per page
        public var limit: Int?

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum Certificates: String, Hashable, Codable {
                case certificateContent
                case certificateType
                case csrContent
                case displayName
                case expirationDate
                case name
                case platform
                case serialNumber
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type certificates
                public static var certificates: Relation<[Certificates]?> {
                    .init(key: "fields[certificates]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum CertificateType: String, Hashable, Codable {
                case developerIdApplication = "DEVELOPER_ID_APPLICATION"
                case developerIdKext = "DEVELOPER_ID_KEXT"
                case development = "DEVELOPMENT"
                case distribution = "DISTRIBUTION"
                case iOSDevelopment = "IOS_DEVELOPMENT"
                case iOSDistribution = "IOS_DISTRIBUTION"
                case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                case macAppDistribution = "MAC_APP_DISTRIBUTION"
                case macInstallerDistribution = "MAC_INSTALLER_DISTRIBUTION"
                case passTypeId = "PASS_TYPE_ID"
                case passTypeIdWithNfc = "PASS_TYPE_ID_WITH_NFC"
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'certificateType'
                public static var certificateType: Relation<[CertificateType]?> {
                    .init(key: "filter[certificateType]")
                }

                /// filter by attribute 'displayName'
                public static var displayName: Relation<[String]?> {
                    .init(key: "filter[displayName]")
                }

                /// filter by id(s)
                public static var id: Relation<[String]?> {
                    .init(key: "filter[id]")
                }

                /// filter by attribute 'serialNumber'
                public static var serialNumber: Relation<[String]?> {
                    .init(key: "filter[serialNumber]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Sort: String, Hashable, Codable {
            case certificateTypeDesc = "-certificateType"
            case displayNameDesc = "-displayName"
            case idDesc = "-id"
            case serialNumberDesc = "-serialNumber"
            case certificateType
            case displayName
            case id
            case serialNumber
        }
    }
}

// swiftlint:enable all
