// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.AppClips.ById.AppClipAdvancedExperiences {
    public struct GET: Endpoint {
        public typealias Response = AppClipAdvancedExperiencesResponse

        public var path: String {
            "/v1/appClips/\(id)/appClipAdvancedExperiences"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appClipAdvancedExperienceImages]",
                             value: parameters.fields[.appClipAdvancedExperienceImages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appClipAdvancedExperienceLocalizations]",
                             value: parameters.fields[.appClipAdvancedExperienceLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appClipAdvancedExperiences]",
                             value: parameters.fields[.appClipAdvancedExperiences]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appClips]",
                             value: parameters.fields[.appClips]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[action]",
                             value: parameters.filter[.action]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[placeStatus]",
                             value: parameters.filter[.placeStatus]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[status]",
                             value: parameters.filter[.status]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[localizations]",
                             value: parameters.limit[.localizations].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of AppClipAdvancedExperiences as `AppClipAdvancedExperiencesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppClipAdvancedExperiencesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.AppClips.ById.AppClipAdvancedExperiences.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppClipAdvancedExperienceImages: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var assetDeliveryState: Self {
                    .init(rawValue: "assetDeliveryState")
                }

                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var imageAsset: Self {
                    .init(rawValue: "imageAsset")
                }

                public static var sourceFileChecksum: Self {
                    .init(rawValue: "sourceFileChecksum")
                }

                public static var uploadOperations: Self {
                    .init(rawValue: "uploadOperations")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppClipAdvancedExperienceLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var language: Self {
                    .init(rawValue: "language")
                }

                public static var subtitle: Self {
                    .init(rawValue: "subtitle")
                }

                public static var title: Self {
                    .init(rawValue: "title")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppClipAdvancedExperiences: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var action: Self {
                    .init(rawValue: "action")
                }

                public static var appClip: Self {
                    .init(rawValue: "appClip")
                }

                public static var businessCategory: Self {
                    .init(rawValue: "businessCategory")
                }

                public static var defaultLanguage: Self {
                    .init(rawValue: "defaultLanguage")
                }

                public static var headerImage: Self {
                    .init(rawValue: "headerImage")
                }

                public static var isPoweredBy: Self {
                    .init(rawValue: "isPoweredBy")
                }

                public static var link: Self {
                    .init(rawValue: "link")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var place: Self {
                    .init(rawValue: "place")
                }

                public static var placeStatus: Self {
                    .init(rawValue: "placeStatus")
                }

                public static var status: Self {
                    .init(rawValue: "status")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppClips: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appClipAdvancedExperiences: Self {
                    .init(rawValue: "appClipAdvancedExperiences")
                }

                public static var appClipDefaultExperiences: Self {
                    .init(rawValue: "appClipDefaultExperiences")
                }

                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appClipAdvancedExperienceImages
                public static var appClipAdvancedExperienceImages: Relation<[AppClipAdvancedExperienceImages]?> {
                    .init(key: "fields[appClipAdvancedExperienceImages]")
                }

                /// the fields to include for returned resources of type appClipAdvancedExperienceLocalizations
                public static var appClipAdvancedExperienceLocalizations: Relation<[AppClipAdvancedExperienceLocalizations]?> {
                    .init(key: "fields[appClipAdvancedExperienceLocalizations]")
                }

                /// the fields to include for returned resources of type appClipAdvancedExperiences
                public static var appClipAdvancedExperiences: Relation<[AppClipAdvancedExperiences]?> {
                    .init(key: "fields[appClipAdvancedExperiences]")
                }

                /// the fields to include for returned resources of type appClips
                public static var appClips: Relation<[AppClips]?> {
                    .init(key: "fields[appClips]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Action: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var open: Self {
                    .init(rawValue: "OPEN")
                }

                public static var play: Self {
                    .init(rawValue: "PLAY")
                }

                public static var view: Self {
                    .init(rawValue: "VIEW")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct PlaceStatus: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var matched: Self {
                    .init(rawValue: "MATCHED")
                }

                public static var noMatch: Self {
                    .init(rawValue: "NO_MATCH")
                }

                public static var pending: Self {
                    .init(rawValue: "PENDING")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Status: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appTransferInProgress: Self {
                    .init(rawValue: "APP_TRANSFER_IN_PROGRESS")
                }

                public static var deactivated: Self {
                    .init(rawValue: "DEACTIVATED")
                }

                public static var received: Self {
                    .init(rawValue: "RECEIVED")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'action'
                public static var action: Relation<[Action]?> {
                    .init(key: "filter[action]")
                }

                /// filter by attribute 'placeStatus'
                public static var placeStatus: Relation<[PlaceStatus]?> {
                    .init(key: "filter[placeStatus]")
                }

                /// filter by attribute 'status'
                public static var status: Relation<[Status]?> {
                    .init(key: "filter[status]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appClip: Self {
                .init(rawValue: "appClip")
            }

            public static var headerImage: Self {
                .init(rawValue: "headerImage")
            }

            public static var localizations: Self {
                .init(rawValue: "localizations")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related localizations returned (when they are included)
                public static var localizations: Relation<Int?> {
                    .init(key: "limit[localizations]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
