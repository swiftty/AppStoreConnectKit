// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterGroups.ById.GameCenterChallenges {
    public struct GET: Endpoint {
        public typealias Response = GameCenterChallengesResponse

        public var path: String {
            "/v1/gameCenterGroups/\(id)/gameCenterChallenges"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[gameCenterChallengeVersions]",
                             value: parameters.fields[.gameCenterChallengeVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterChallenges]",
                             value: parameters.fields[.gameCenterChallenges]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterDetails]",
                             value: parameters.fields[.gameCenterDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterGroups]",
                             value: parameters.fields[.gameCenterGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboards]",
                             value: parameters.fields[.gameCenterLeaderboards]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[archived]",
                             value: parameters.filter[.archived]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[id]",
                             value: parameters.filter[.id]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[referenceName]",
                             value: parameters.filter[.referenceName]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[versions]",
                             value: parameters.limit[.versions].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of GameCenterChallenges as `GameCenterChallengesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterChallengesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterGroups.ById.GameCenterChallenges.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct GameCenterChallengeVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var challenge: Self {
                    .init(rawValue: "challenge")
                }

                public static var defaultImage: Self {
                    .init(rawValue: "defaultImage")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var releases: Self {
                    .init(rawValue: "releases")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterChallenges: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var allowedDurations: Self {
                    .init(rawValue: "allowedDurations")
                }

                public static var archived: Self {
                    .init(rawValue: "archived")
                }

                public static var challengeType: Self {
                    .init(rawValue: "challengeType")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var leaderboard: Self {
                    .init(rawValue: "leaderboard")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var repeatable: Self {
                    .init(rawValue: "repeatable")
                }

                public static var vendorIdentifier: Self {
                    .init(rawValue: "vendorIdentifier")
                }

                public static var versions: Self {
                    .init(rawValue: "versions")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterDetails: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var achievementReleases: Self {
                    .init(rawValue: "achievementReleases")
                }

                public static var activityReleases: Self {
                    .init(rawValue: "activityReleases")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var arcadeEnabled: Self {
                    .init(rawValue: "arcadeEnabled")
                }

                public static var challengeEnabled: Self {
                    .init(rawValue: "challengeEnabled")
                }

                public static var challengeReleases: Self {
                    .init(rawValue: "challengeReleases")
                }

                public static var challengesMinimumPlatformVersions: Self {
                    .init(rawValue: "challengesMinimumPlatformVersions")
                }

                public static var defaultGroupLeaderboard: Self {
                    .init(rawValue: "defaultGroupLeaderboard")
                }

                public static var defaultLeaderboard: Self {
                    .init(rawValue: "defaultLeaderboard")
                }

                public static var gameCenterAchievements: Self {
                    .init(rawValue: "gameCenterAchievements")
                }

                public static var gameCenterActivities: Self {
                    .init(rawValue: "gameCenterActivities")
                }

                public static var gameCenterAppVersions: Self {
                    .init(rawValue: "gameCenterAppVersions")
                }

                public static var gameCenterChallenges: Self {
                    .init(rawValue: "gameCenterChallenges")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var gameCenterLeaderboardSets: Self {
                    .init(rawValue: "gameCenterLeaderboardSets")
                }

                public static var gameCenterLeaderboards: Self {
                    .init(rawValue: "gameCenterLeaderboards")
                }

                public static var leaderboardReleases: Self {
                    .init(rawValue: "leaderboardReleases")
                }

                public static var leaderboardSetReleases: Self {
                    .init(rawValue: "leaderboardSetReleases")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterGroups: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var gameCenterAchievements: Self {
                    .init(rawValue: "gameCenterAchievements")
                }

                public static var gameCenterActivities: Self {
                    .init(rawValue: "gameCenterActivities")
                }

                public static var gameCenterChallenges: Self {
                    .init(rawValue: "gameCenterChallenges")
                }

                public static var gameCenterDetails: Self {
                    .init(rawValue: "gameCenterDetails")
                }

                public static var gameCenterLeaderboardSets: Self {
                    .init(rawValue: "gameCenterLeaderboardSets")
                }

                public static var gameCenterLeaderboards: Self {
                    .init(rawValue: "gameCenterLeaderboards")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterLeaderboards: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var activity: Self {
                    .init(rawValue: "activity")
                }

                public static var activityProperties: Self {
                    .init(rawValue: "activityProperties")
                }

                public static var archived: Self {
                    .init(rawValue: "archived")
                }

                public static var challenge: Self {
                    .init(rawValue: "challenge")
                }

                public static var defaultFormatter: Self {
                    .init(rawValue: "defaultFormatter")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var gameCenterLeaderboardSets: Self {
                    .init(rawValue: "gameCenterLeaderboardSets")
                }

                public static var groupLeaderboard: Self {
                    .init(rawValue: "groupLeaderboard")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var recurrenceDuration: Self {
                    .init(rawValue: "recurrenceDuration")
                }

                public static var recurrenceRule: Self {
                    .init(rawValue: "recurrenceRule")
                }

                public static var recurrenceStartDate: Self {
                    .init(rawValue: "recurrenceStartDate")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var releases: Self {
                    .init(rawValue: "releases")
                }

                public static var scoreRangeEnd: Self {
                    .init(rawValue: "scoreRangeEnd")
                }

                public static var scoreRangeStart: Self {
                    .init(rawValue: "scoreRangeStart")
                }

                public static var scoreSortType: Self {
                    .init(rawValue: "scoreSortType")
                }

                public static var submissionType: Self {
                    .init(rawValue: "submissionType")
                }

                public static var vendorIdentifier: Self {
                    .init(rawValue: "vendorIdentifier")
                }

                public static var visibility: Self {
                    .init(rawValue: "visibility")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type gameCenterChallengeVersions
                public static var gameCenterChallengeVersions: Relation<[GameCenterChallengeVersions]?> {
                    .init(key: "fields[gameCenterChallengeVersions]")
                }

                /// the fields to include for returned resources of type gameCenterChallenges
                public static var gameCenterChallenges: Relation<[GameCenterChallenges]?> {
                    .init(key: "fields[gameCenterChallenges]")
                }

                /// the fields to include for returned resources of type gameCenterDetails
                public static var gameCenterDetails: Relation<[GameCenterDetails]?> {
                    .init(key: "fields[gameCenterDetails]")
                }

                /// the fields to include for returned resources of type gameCenterGroups
                public static var gameCenterGroups: Relation<[GameCenterGroups]?> {
                    .init(key: "fields[gameCenterGroups]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboards
                public static var gameCenterLeaderboards: Relation<[GameCenterLeaderboards]?> {
                    .init(key: "fields[gameCenterLeaderboards]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// filter by attribute 'archived'
                public static var archived: Relation<[String]?> {
                    .init(key: "filter[archived]")
                }

                /// filter by id(s)
                public static var id: Relation<[String]?> {
                    .init(key: "filter[id]")
                }

                /// filter by attribute 'referenceName'
                public static var referenceName: Relation<[String]?> {
                    .init(key: "filter[referenceName]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var gameCenterDetail: Self {
                .init(rawValue: "gameCenterDetail")
            }

            public static var gameCenterGroup: Self {
                .init(rawValue: "gameCenterGroup")
            }

            public static var leaderboard: Self {
                .init(rawValue: "leaderboard")
            }

            public static var versions: Self {
                .init(rawValue: "versions")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related versions returned (when they are included)
                public static var versions: Relation<Int?> {
                    .init(key: "limit[versions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
