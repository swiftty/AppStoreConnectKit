// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterMatchmakingRules.ById.Metrics.MatchmakingRuleErrors {
    public struct GET: Endpoint {
        public typealias Response = GameCenterMatchmakingRuleErrorsV1MetricResponse

        public var path: String {
            "/v1/gameCenterMatchmakingRules/\(id)/metrics/matchmakingRuleErrors"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "filter[gameCenterMatchmakingQueue]",
                             value: parameters.filter[.gameCenterMatchmakingQueue].map { "\($0)" }),
                URLQueryItem(name: "granularity",
                             value: parameters.granularity?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "groupBy",
                             value: parameters.groupBy?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Metrics data response as `GameCenterMatchmakingRuleErrorsV1MetricResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterMatchmakingRuleErrorsV1MetricResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterMatchmakingRules.ById.Metrics.MatchmakingRuleErrors.GET {
    public struct Parameters: Hashable {
        public var filter: Filter = Filter()

        /// the granularity of the per-group dataset
        public var granularity: [Granularity]

        /// the dimension by which to group the results
        public var groupBy: [GroupBy]?

        /// maximum number of groups to return per page
        public var limit: Int?

        /// comma-separated list of sort expressions; metrics will be sorted as specified
        public var sort: [Sort]?

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// filter by 'gameCenterMatchmakingQueue' relationship dimension
                public static var gameCenterMatchmakingQueue: Relation<String?> {
                    .init(key: "filter[gameCenterMatchmakingQueue]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Granularity: Hashable, Codable, RawRepresentable {
            case p1D
            case pT15M
            case pT1H
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .p1D: return "P1D"
                case .pT15M: return "PT15M"
                case .pT1H: return "PT1H"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "P1D": self = .p1D
                case "PT15M": self = .pT15M
                case "PT1H": self = .pT1H
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum GroupBy: Hashable, Codable, RawRepresentable {
            case gameCenterMatchmakingQueue
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .gameCenterMatchmakingQueue: return "gameCenterMatchmakingQueue"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "gameCenterMatchmakingQueue": self = .gameCenterMatchmakingQueue
                default: self = .unknown(rawValue)
                }
            }
        }

        public enum Sort: Hashable, Codable, RawRepresentable {
            case count
            case countDesc
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .count: return "count"
                case .countDesc: return "-count"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "count": self = .count
                case "-count": self = .countDesc
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

// swiftlint:enable all
