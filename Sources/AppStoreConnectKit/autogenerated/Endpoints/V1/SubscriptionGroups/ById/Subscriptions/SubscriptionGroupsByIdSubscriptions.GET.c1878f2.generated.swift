// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.SubscriptionGroups.ById.Subscriptions {
    public struct GET: Endpoint {
        public typealias Response = SubscriptionsResponse

        public var path: String {
            "/v1/subscriptionGroups/\(id)/subscriptions"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[promotedPurchases]",
                             value: parameters.fields[.promotedPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionAppStoreReviewScreenshots]",
                             value: parameters.fields[.subscriptionAppStoreReviewScreenshots]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionAvailabilities]",
                             value: parameters.fields[.subscriptionAvailabilities]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionGroups]",
                             value: parameters.fields[.subscriptionGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionImages]",
                             value: parameters.fields[.subscriptionImages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionIntroductoryOffers]",
                             value: parameters.fields[.subscriptionIntroductoryOffers]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionLocalizations]",
                             value: parameters.fields[.subscriptionLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionOfferCodes]",
                             value: parameters.fields[.subscriptionOfferCodes]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionPrices]",
                             value: parameters.fields[.subscriptionPrices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionPromotionalOffers]",
                             value: parameters.fields[.subscriptionPromotionalOffers]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptions]",
                             value: parameters.fields[.subscriptions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[winBackOffers]",
                             value: parameters.fields[.winBackOffers]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[name]",
                             value: parameters.filter[.name]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[productId]",
                             value: parameters.filter[.productId]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[state]",
                             value: parameters.filter[.state]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[images]",
                             value: parameters.limit[.images].map { "\($0)" }),
                URLQueryItem(name: "limit[introductoryOffers]",
                             value: parameters.limit[.introductoryOffers].map { "\($0)" }),
                URLQueryItem(name: "limit[offerCodes]",
                             value: parameters.limit[.offerCodes].map { "\($0)" }),
                URLQueryItem(name: "limit[prices]",
                             value: parameters.limit[.prices].map { "\($0)" }),
                URLQueryItem(name: "limit[promotionalOffers]",
                             value: parameters.limit[.promotionalOffers].map { "\($0)" }),
                URLQueryItem(name: "limit[subscriptionLocalizations]",
                             value: parameters.limit[.subscriptionLocalizations].map { "\($0)" }),
                URLQueryItem(name: "limit[winBackOffers]",
                             value: parameters.limit[.winBackOffers].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of Subscriptions as `SubscriptionsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(SubscriptionsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.SubscriptionGroups.ById.Subscriptions.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct PromotedPurchases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var enabled: Self {
                    .init(rawValue: "enabled")
                }

                public static var inAppPurchaseV2: Self {
                    .init(rawValue: "inAppPurchaseV2")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public static var visibleForAllUsers: Self {
                    .init(rawValue: "visibleForAllUsers")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionAppStoreReviewScreenshots: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var assetDeliveryState: Self {
                    .init(rawValue: "assetDeliveryState")
                }

                public static var assetToken: Self {
                    .init(rawValue: "assetToken")
                }

                public static var assetType: Self {
                    .init(rawValue: "assetType")
                }

                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var imageAsset: Self {
                    .init(rawValue: "imageAsset")
                }

                public static var sourceFileChecksum: Self {
                    .init(rawValue: "sourceFileChecksum")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public static var uploadOperations: Self {
                    .init(rawValue: "uploadOperations")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionAvailabilities: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var availableInNewTerritories: Self {
                    .init(rawValue: "availableInNewTerritories")
                }

                public static var availableTerritories: Self {
                    .init(rawValue: "availableTerritories")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionGroups: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var subscriptionGroupLocalizations: Self {
                    .init(rawValue: "subscriptionGroupLocalizations")
                }

                public static var subscriptions: Self {
                    .init(rawValue: "subscriptions")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionImages: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var assetToken: Self {
                    .init(rawValue: "assetToken")
                }

                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var imageAsset: Self {
                    .init(rawValue: "imageAsset")
                }

                public static var sourceFileChecksum: Self {
                    .init(rawValue: "sourceFileChecksum")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public static var uploadOperations: Self {
                    .init(rawValue: "uploadOperations")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionIntroductoryOffers: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var duration: Self {
                    .init(rawValue: "duration")
                }

                public static var endDate: Self {
                    .init(rawValue: "endDate")
                }

                public static var numberOfPeriods: Self {
                    .init(rawValue: "numberOfPeriods")
                }

                public static var offerMode: Self {
                    .init(rawValue: "offerMode")
                }

                public static var startDate: Self {
                    .init(rawValue: "startDate")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public static var subscriptionPricePoint: Self {
                    .init(rawValue: "subscriptionPricePoint")
                }

                public static var territory: Self {
                    .init(rawValue: "territory")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var description: Self {
                    .init(rawValue: "description")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionOfferCodes: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var active: Self {
                    .init(rawValue: "active")
                }

                public static var customCodes: Self {
                    .init(rawValue: "customCodes")
                }

                public static var customerEligibilities: Self {
                    .init(rawValue: "customerEligibilities")
                }

                public static var duration: Self {
                    .init(rawValue: "duration")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var numberOfPeriods: Self {
                    .init(rawValue: "numberOfPeriods")
                }

                public static var offerEligibility: Self {
                    .init(rawValue: "offerEligibility")
                }

                public static var offerMode: Self {
                    .init(rawValue: "offerMode")
                }

                public static var oneTimeUseCodes: Self {
                    .init(rawValue: "oneTimeUseCodes")
                }

                public static var prices: Self {
                    .init(rawValue: "prices")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionPrices: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var preserved: Self {
                    .init(rawValue: "preserved")
                }

                public static var startDate: Self {
                    .init(rawValue: "startDate")
                }

                public static var subscriptionPricePoint: Self {
                    .init(rawValue: "subscriptionPricePoint")
                }

                public static var territory: Self {
                    .init(rawValue: "territory")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionPromotionalOffers: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var duration: Self {
                    .init(rawValue: "duration")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var numberOfPeriods: Self {
                    .init(rawValue: "numberOfPeriods")
                }

                public static var offerCode: Self {
                    .init(rawValue: "offerCode")
                }

                public static var offerMode: Self {
                    .init(rawValue: "offerMode")
                }

                public static var prices: Self {
                    .init(rawValue: "prices")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Subscriptions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appStoreReviewScreenshot: Self {
                    .init(rawValue: "appStoreReviewScreenshot")
                }

                public static var familySharable: Self {
                    .init(rawValue: "familySharable")
                }

                public static var group: Self {
                    .init(rawValue: "group")
                }

                public static var groupLevel: Self {
                    .init(rawValue: "groupLevel")
                }

                public static var images: Self {
                    .init(rawValue: "images")
                }

                public static var introductoryOffers: Self {
                    .init(rawValue: "introductoryOffers")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var offerCodes: Self {
                    .init(rawValue: "offerCodes")
                }

                public static var pricePoints: Self {
                    .init(rawValue: "pricePoints")
                }

                public static var prices: Self {
                    .init(rawValue: "prices")
                }

                public static var productId: Self {
                    .init(rawValue: "productId")
                }

                public static var promotedPurchase: Self {
                    .init(rawValue: "promotedPurchase")
                }

                public static var promotionalOffers: Self {
                    .init(rawValue: "promotionalOffers")
                }

                public static var reviewNote: Self {
                    .init(rawValue: "reviewNote")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var subscriptionAvailability: Self {
                    .init(rawValue: "subscriptionAvailability")
                }

                public static var subscriptionLocalizations: Self {
                    .init(rawValue: "subscriptionLocalizations")
                }

                public static var subscriptionPeriod: Self {
                    .init(rawValue: "subscriptionPeriod")
                }

                public static var winBackOffers: Self {
                    .init(rawValue: "winBackOffers")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct WinBackOffers: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var customerEligibilityPaidSubscriptionDurationInMonths: Self {
                    .init(rawValue: "customerEligibilityPaidSubscriptionDurationInMonths")
                }

                public static var customerEligibilityTimeSinceLastSubscribedInMonths: Self {
                    .init(rawValue: "customerEligibilityTimeSinceLastSubscribedInMonths")
                }

                public static var customerEligibilityWaitBetweenOffersInMonths: Self {
                    .init(rawValue: "customerEligibilityWaitBetweenOffersInMonths")
                }

                public static var duration: Self {
                    .init(rawValue: "duration")
                }

                public static var endDate: Self {
                    .init(rawValue: "endDate")
                }

                public static var offerId: Self {
                    .init(rawValue: "offerId")
                }

                public static var offerMode: Self {
                    .init(rawValue: "offerMode")
                }

                public static var periodCount: Self {
                    .init(rawValue: "periodCount")
                }

                public static var prices: Self {
                    .init(rawValue: "prices")
                }

                public static var priority: Self {
                    .init(rawValue: "priority")
                }

                public static var promotionIntent: Self {
                    .init(rawValue: "promotionIntent")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var startDate: Self {
                    .init(rawValue: "startDate")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type promotedPurchases
                public static var promotedPurchases: Relation<[PromotedPurchases]?> {
                    .init(key: "fields[promotedPurchases]")
                }

                /// the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
                public static var subscriptionAppStoreReviewScreenshots: Relation<[SubscriptionAppStoreReviewScreenshots]?> {
                    .init(key: "fields[subscriptionAppStoreReviewScreenshots]")
                }

                /// the fields to include for returned resources of type subscriptionAvailabilities
                public static var subscriptionAvailabilities: Relation<[SubscriptionAvailabilities]?> {
                    .init(key: "fields[subscriptionAvailabilities]")
                }

                /// the fields to include for returned resources of type subscriptionGroups
                public static var subscriptionGroups: Relation<[SubscriptionGroups]?> {
                    .init(key: "fields[subscriptionGroups]")
                }

                /// the fields to include for returned resources of type subscriptionImages
                public static var subscriptionImages: Relation<[SubscriptionImages]?> {
                    .init(key: "fields[subscriptionImages]")
                }

                /// the fields to include for returned resources of type subscriptionIntroductoryOffers
                public static var subscriptionIntroductoryOffers: Relation<[SubscriptionIntroductoryOffers]?> {
                    .init(key: "fields[subscriptionIntroductoryOffers]")
                }

                /// the fields to include for returned resources of type subscriptionLocalizations
                public static var subscriptionLocalizations: Relation<[SubscriptionLocalizations]?> {
                    .init(key: "fields[subscriptionLocalizations]")
                }

                /// the fields to include for returned resources of type subscriptionOfferCodes
                public static var subscriptionOfferCodes: Relation<[SubscriptionOfferCodes]?> {
                    .init(key: "fields[subscriptionOfferCodes]")
                }

                /// the fields to include for returned resources of type subscriptionPrices
                public static var subscriptionPrices: Relation<[SubscriptionPrices]?> {
                    .init(key: "fields[subscriptionPrices]")
                }

                /// the fields to include for returned resources of type subscriptionPromotionalOffers
                public static var subscriptionPromotionalOffers: Relation<[SubscriptionPromotionalOffers]?> {
                    .init(key: "fields[subscriptionPromotionalOffers]")
                }

                /// the fields to include for returned resources of type subscriptions
                public static var subscriptions: Relation<[Subscriptions]?> {
                    .init(key: "fields[subscriptions]")
                }

                /// the fields to include for returned resources of type winBackOffers
                public static var winBackOffers: Relation<[WinBackOffers]?> {
                    .init(key: "fields[winBackOffers]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var approved: Self {
                    .init(rawValue: "APPROVED")
                }

                public static var developerActionNeeded: Self {
                    .init(rawValue: "DEVELOPER_ACTION_NEEDED")
                }

                public static var developerRemovedFromSale: Self {
                    .init(rawValue: "DEVELOPER_REMOVED_FROM_SALE")
                }

                public static var inReview: Self {
                    .init(rawValue: "IN_REVIEW")
                }

                public static var missingMetadata: Self {
                    .init(rawValue: "MISSING_METADATA")
                }

                public static var pendingBinaryApproval: Self {
                    .init(rawValue: "PENDING_BINARY_APPROVAL")
                }

                public static var readyToSubmit: Self {
                    .init(rawValue: "READY_TO_SUBMIT")
                }

                public static var rejected: Self {
                    .init(rawValue: "REJECTED")
                }

                public static var removedFromSale: Self {
                    .init(rawValue: "REMOVED_FROM_SALE")
                }

                public static var waitingForReview: Self {
                    .init(rawValue: "WAITING_FOR_REVIEW")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'name'
                public static var name: Relation<[String]?> {
                    .init(key: "filter[name]")
                }

                /// filter by attribute 'productId'
                public static var productId: Relation<[String]?> {
                    .init(key: "filter[productId]")
                }

                /// filter by attribute 'state'
                public static var state: Relation<[State]?> {
                    .init(key: "filter[state]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appStoreReviewScreenshot: Self {
                .init(rawValue: "appStoreReviewScreenshot")
            }

            public static var group: Self {
                .init(rawValue: "group")
            }

            public static var images: Self {
                .init(rawValue: "images")
            }

            public static var introductoryOffers: Self {
                .init(rawValue: "introductoryOffers")
            }

            public static var offerCodes: Self {
                .init(rawValue: "offerCodes")
            }

            public static var prices: Self {
                .init(rawValue: "prices")
            }

            public static var promotedPurchase: Self {
                .init(rawValue: "promotedPurchase")
            }

            public static var promotionalOffers: Self {
                .init(rawValue: "promotionalOffers")
            }

            public static var subscriptionAvailability: Self {
                .init(rawValue: "subscriptionAvailability")
            }

            public static var subscriptionLocalizations: Self {
                .init(rawValue: "subscriptionLocalizations")
            }

            public static var winBackOffers: Self {
                .init(rawValue: "winBackOffers")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related images returned (when they are included)
                public static var images: Relation<Int?> {
                    .init(key: "limit[images]")
                }

                /// maximum number of related introductoryOffers returned (when they are included)
                public static var introductoryOffers: Relation<Int?> {
                    .init(key: "limit[introductoryOffers]")
                }

                /// maximum number of related offerCodes returned (when they are included)
                public static var offerCodes: Relation<Int?> {
                    .init(key: "limit[offerCodes]")
                }

                /// maximum number of related prices returned (when they are included)
                public static var prices: Relation<Int?> {
                    .init(key: "limit[prices]")
                }

                /// maximum number of related promotionalOffers returned (when they are included)
                public static var promotionalOffers: Relation<Int?> {
                    .init(key: "limit[promotionalOffers]")
                }

                /// maximum number of related subscriptionLocalizations returned (when they are included)
                public static var subscriptionLocalizations: Relation<Int?> {
                    .init(key: "limit[subscriptionLocalizations]")
                }

                /// maximum number of related winBackOffers returned (when they are included)
                public static var winBackOffers: Relation<Int?> {
                    .init(key: "limit[winBackOffers]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Sort: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var name: Self {
                .init(rawValue: "name")
            }

            public static var nameDesc: Self {
                .init(rawValue: "-name")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
