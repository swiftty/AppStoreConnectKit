// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.ReviewSubmissions.ById.Items {
    public struct GET: Endpoint {
        public typealias Response = ReviewSubmissionItemsResponse

        public var path: String {
            "/v1/reviewSubmissions/\(id)/items"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appCustomProductPageVersions]",
                             value: parameters.fields[.appCustomProductPageVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appEvents]",
                             value: parameters.fields[.appEvents]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionExperiments]",
                             value: parameters.fields[.appStoreVersionExperiments]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[reviewSubmissionItems]",
                             value: parameters.fields[.reviewSubmissionItems]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of ReviewSubmissionItems as `ReviewSubmissionItemsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(ReviewSubmissionItemsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.ReviewSubmissions.ById.Items.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppCustomProductPageVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appCustomProductPage: Self {
                    .init(rawValue: "appCustomProductPage")
                }

                public static var appCustomProductPageLocalizations: Self {
                    .init(rawValue: "appCustomProductPageLocalizations")
                }

                public static var deepLink: Self {
                    .init(rawValue: "deepLink")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppEvents: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var archivedTerritorySchedules: Self {
                    .init(rawValue: "archivedTerritorySchedules")
                }

                public static var badge: Self {
                    .init(rawValue: "badge")
                }

                public static var deepLink: Self {
                    .init(rawValue: "deepLink")
                }

                public static var eventState: Self {
                    .init(rawValue: "eventState")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var primaryLocale: Self {
                    .init(rawValue: "primaryLocale")
                }

                public static var priority: Self {
                    .init(rawValue: "priority")
                }

                public static var purchaseRequirement: Self {
                    .init(rawValue: "purchaseRequirement")
                }

                public static var purpose: Self {
                    .init(rawValue: "purpose")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var territorySchedules: Self {
                    .init(rawValue: "territorySchedules")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersionExperiments: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var appStoreVersionExperimentTreatments: Self {
                    .init(rawValue: "appStoreVersionExperimentTreatments")
                }

                public static var controlVersions: Self {
                    .init(rawValue: "controlVersions")
                }

                public static var endDate: Self {
                    .init(rawValue: "endDate")
                }

                public static var latestControlVersion: Self {
                    .init(rawValue: "latestControlVersion")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var reviewRequired: Self {
                    .init(rawValue: "reviewRequired")
                }

                public static var startDate: Self {
                    .init(rawValue: "startDate")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var trafficProportion: Self {
                    .init(rawValue: "trafficProportion")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var ageRatingDeclaration: Self {
                    .init(rawValue: "ageRatingDeclaration")
                }

                public static var alternativeDistributionPackage: Self {
                    .init(rawValue: "alternativeDistributionPackage")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appClipDefaultExperience: Self {
                    .init(rawValue: "appClipDefaultExperience")
                }

                public static var appStoreReviewDetail: Self {
                    .init(rawValue: "appStoreReviewDetail")
                }

                public static var appStoreState: Self {
                    .init(rawValue: "appStoreState")
                }

                public static var appStoreVersionExperiments: Self {
                    .init(rawValue: "appStoreVersionExperiments")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersionLocalizations: Self {
                    .init(rawValue: "appStoreVersionLocalizations")
                }

                public static var appStoreVersionPhasedRelease: Self {
                    .init(rawValue: "appStoreVersionPhasedRelease")
                }

                public static var appStoreVersionSubmission: Self {
                    .init(rawValue: "appStoreVersionSubmission")
                }

                public static var appVersionState: Self {
                    .init(rawValue: "appVersionState")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var copyright: Self {
                    .init(rawValue: "copyright")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var downloadable: Self {
                    .init(rawValue: "downloadable")
                }

                public static var earliestReleaseDate: Self {
                    .init(rawValue: "earliestReleaseDate")
                }

                public static var gameCenterAppVersion: Self {
                    .init(rawValue: "gameCenterAppVersion")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var releaseType: Self {
                    .init(rawValue: "releaseType")
                }

                public static var reviewType: Self {
                    .init(rawValue: "reviewType")
                }

                public static var routingAppCoverage: Self {
                    .init(rawValue: "routingAppCoverage")
                }

                public static var usesIdfa: Self {
                    .init(rawValue: "usesIdfa")
                }

                public static var versionString: Self {
                    .init(rawValue: "versionString")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct ReviewSubmissionItems: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appCustomProductPageVersion: Self {
                    .init(rawValue: "appCustomProductPageVersion")
                }

                public static var appEvent: Self {
                    .init(rawValue: "appEvent")
                }

                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var appStoreVersionExperiment: Self {
                    .init(rawValue: "appStoreVersionExperiment")
                }

                public static var appStoreVersionExperimentV2: Self {
                    .init(rawValue: "appStoreVersionExperimentV2")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appCustomProductPageVersions
                public static var appCustomProductPageVersions: Relation<[AppCustomProductPageVersions]?> {
                    .init(key: "fields[appCustomProductPageVersions]")
                }

                /// the fields to include for returned resources of type appEvents
                public static var appEvents: Relation<[AppEvents]?> {
                    .init(key: "fields[appEvents]")
                }

                /// the fields to include for returned resources of type appStoreVersionExperiments
                public static var appStoreVersionExperiments: Relation<[AppStoreVersionExperiments]?> {
                    .init(key: "fields[appStoreVersionExperiments]")
                }

                /// the fields to include for returned resources of type appStoreVersions
                public static var appStoreVersions: Relation<[AppStoreVersions]?> {
                    .init(key: "fields[appStoreVersions]")
                }

                /// the fields to include for returned resources of type reviewSubmissionItems
                public static var reviewSubmissionItems: Relation<[ReviewSubmissionItems]?> {
                    .init(key: "fields[reviewSubmissionItems]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appCustomProductPageVersion: Self {
                .init(rawValue: "appCustomProductPageVersion")
            }

            public static var appEvent: Self {
                .init(rawValue: "appEvent")
            }

            public static var appStoreVersion: Self {
                .init(rawValue: "appStoreVersion")
            }

            public static var appStoreVersionExperiment: Self {
                .init(rawValue: "appStoreVersionExperiment")
            }

            public static var appStoreVersionExperimentV2: Self {
                .init(rawValue: "appStoreVersionExperimentV2")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
