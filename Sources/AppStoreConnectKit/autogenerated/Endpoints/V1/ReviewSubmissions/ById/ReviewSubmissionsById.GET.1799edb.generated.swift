// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.ReviewSubmissions.ById {
    public struct GET: Endpoint {
        public typealias Response = ReviewSubmissionResponse

        public var path: String {
            "/v1/reviewSubmissions/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[reviewSubmissionItems]",
                             value: parameters.fields[.reviewSubmissionItems]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[reviewSubmissions]",
                             value: parameters.fields[.reviewSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[items]",
                             value: parameters.limit[.items].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single ReviewSubmission as `ReviewSubmissionResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(ReviewSubmissionResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.ReviewSubmissions.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum ReviewSubmissionItems: Hashable, Codable, RawRepresentable {
                case appCustomProductPageVersion
                case appEvent
                case appStoreVersion
                case appStoreVersionExperiment
                case appStoreVersionExperimentV2
                case removed
                case resolved
                case reviewSubmission
                case state
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appCustomProductPageVersion: return "appCustomProductPageVersion"
                    case .appEvent: return "appEvent"
                    case .appStoreVersion: return "appStoreVersion"
                    case .appStoreVersionExperiment: return "appStoreVersionExperiment"
                    case .appStoreVersionExperimentV2: return "appStoreVersionExperimentV2"
                    case .removed: return "removed"
                    case .resolved: return "resolved"
                    case .reviewSubmission: return "reviewSubmission"
                    case .state: return "state"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appCustomProductPageVersion": self = .appCustomProductPageVersion
                    case "appEvent": self = .appEvent
                    case "appStoreVersion": self = .appStoreVersion
                    case "appStoreVersionExperiment": self = .appStoreVersionExperiment
                    case "appStoreVersionExperimentV2": self = .appStoreVersionExperimentV2
                    case "removed": self = .removed
                    case "resolved": self = .resolved
                    case "reviewSubmission": self = .reviewSubmission
                    case "state": self = .state
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum ReviewSubmissions: Hashable, Codable, RawRepresentable {
                case app
                case appStoreVersionForReview
                case canceled
                case items
                case lastUpdatedByActor
                case platform
                case state
                case submitted
                case submittedByActor
                case submittedDate
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appStoreVersionForReview: return "appStoreVersionForReview"
                    case .canceled: return "canceled"
                    case .items: return "items"
                    case .lastUpdatedByActor: return "lastUpdatedByActor"
                    case .platform: return "platform"
                    case .state: return "state"
                    case .submitted: return "submitted"
                    case .submittedByActor: return "submittedByActor"
                    case .submittedDate: return "submittedDate"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appStoreVersionForReview": self = .appStoreVersionForReview
                    case "canceled": self = .canceled
                    case "items": self = .items
                    case "lastUpdatedByActor": self = .lastUpdatedByActor
                    case "platform": self = .platform
                    case "state": self = .state
                    case "submitted": self = .submitted
                    case "submittedByActor": self = .submittedByActor
                    case "submittedDate": self = .submittedDate
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case app
            case appStoreVersionForReview
            case items
            case lastUpdatedByActor
            case submittedByActor
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .app: return "app"
                case .appStoreVersionForReview: return "appStoreVersionForReview"
                case .items: return "items"
                case .lastUpdatedByActor: return "lastUpdatedByActor"
                case .submittedByActor: return "submittedByActor"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "app": self = .app
                case "appStoreVersionForReview": self = .appStoreVersionForReview
                case "items": self = .items
                case "lastUpdatedByActor": self = .lastUpdatedByActor
                case "submittedByActor": self = .submittedByActor
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }
    }
}

extension Relation<V1.ReviewSubmissions.ById.GET.Parameters.Fields, [V1.ReviewSubmissions.ById.GET.Parameters.Fields.ReviewSubmissionItems]?> {
    /// the fields to include for returned resources of type reviewSubmissionItems
    public static var reviewSubmissionItems: Relation {
        .init(key: "fields[reviewSubmissionItems]")
    }
}

extension Relation<V1.ReviewSubmissions.ById.GET.Parameters.Fields, [V1.ReviewSubmissions.ById.GET.Parameters.Fields.ReviewSubmissions]?> {
    /// the fields to include for returned resources of type reviewSubmissions
    public static var reviewSubmissions: Relation {
        .init(key: "fields[reviewSubmissions]")
    }
}

extension Relation<V1.ReviewSubmissions.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related items returned (when they are included)
    public static var items: Relation {
        .init(key: "limit[items]")
    }
}

// swiftlint:enable all
