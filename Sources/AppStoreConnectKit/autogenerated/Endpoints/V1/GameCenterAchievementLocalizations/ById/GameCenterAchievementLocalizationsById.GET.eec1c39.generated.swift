// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterAchievementLocalizations.ById {
    public struct GET: Endpoint {
        public typealias Response = GameCenterAchievementLocalizationResponse

        public var path: String {
            "/v1/gameCenterAchievementLocalizations/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[gameCenterAchievementImages]",
                             value: parameters.fields[.gameCenterAchievementImages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAchievementLocalizations]",
                             value: parameters.fields[.gameCenterAchievementLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAchievements]",
                             value: parameters.fields[.gameCenterAchievements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single GameCenterAchievementLocalization as `GameCenterAchievementLocalizationResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterAchievementLocalizationResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterAchievementLocalizations.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum GameCenterAchievementImages: Hashable, Codable, RawRepresentable {
                case assetDeliveryState
                case fileName
                case fileSize
                case gameCenterAchievementLocalization
                case imageAsset
                case uploadOperations
                case uploaded
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .assetDeliveryState: return "assetDeliveryState"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .gameCenterAchievementLocalization: return "gameCenterAchievementLocalization"
                    case .imageAsset: return "imageAsset"
                    case .uploadOperations: return "uploadOperations"
                    case .uploaded: return "uploaded"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "assetDeliveryState": self = .assetDeliveryState
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "gameCenterAchievementLocalization": self = .gameCenterAchievementLocalization
                    case "imageAsset": self = .imageAsset
                    case "uploadOperations": self = .uploadOperations
                    case "uploaded": self = .uploaded
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterAchievementLocalizations: Hashable, Codable, RawRepresentable {
                case afterEarnedDescription
                case beforeEarnedDescription
                case gameCenterAchievement
                case gameCenterAchievementImage
                case locale
                case name
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .afterEarnedDescription: return "afterEarnedDescription"
                    case .beforeEarnedDescription: return "beforeEarnedDescription"
                    case .gameCenterAchievement: return "gameCenterAchievement"
                    case .gameCenterAchievementImage: return "gameCenterAchievementImage"
                    case .locale: return "locale"
                    case .name: return "name"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "afterEarnedDescription": self = .afterEarnedDescription
                    case "beforeEarnedDescription": self = .beforeEarnedDescription
                    case "gameCenterAchievement": self = .gameCenterAchievement
                    case "gameCenterAchievementImage": self = .gameCenterAchievementImage
                    case "locale": self = .locale
                    case "name": self = .name
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterAchievements: Hashable, Codable, RawRepresentable {
                case archived
                case gameCenterDetail
                case gameCenterGroup
                case groupAchievement
                case localizations
                case points
                case referenceName
                case releases
                case repeatable
                case showBeforeEarned
                case vendorIdentifier
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .archived: return "archived"
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterGroup: return "gameCenterGroup"
                    case .groupAchievement: return "groupAchievement"
                    case .localizations: return "localizations"
                    case .points: return "points"
                    case .referenceName: return "referenceName"
                    case .releases: return "releases"
                    case .repeatable: return "repeatable"
                    case .showBeforeEarned: return "showBeforeEarned"
                    case .vendorIdentifier: return "vendorIdentifier"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "archived": self = .archived
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterGroup": self = .gameCenterGroup
                    case "groupAchievement": self = .groupAchievement
                    case "localizations": self = .localizations
                    case "points": self = .points
                    case "referenceName": self = .referenceName
                    case "releases": self = .releases
                    case "repeatable": self = .repeatable
                    case "showBeforeEarned": self = .showBeforeEarned
                    case "vendorIdentifier": self = .vendorIdentifier
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type gameCenterAchievementImages
                public static var gameCenterAchievementImages: Relation<[GameCenterAchievementImages]?> {
                    .init(key: "fields[gameCenterAchievementImages]")
                }

                /// the fields to include for returned resources of type gameCenterAchievementLocalizations
                public static var gameCenterAchievementLocalizations: Relation<[GameCenterAchievementLocalizations]?> {
                    .init(key: "fields[gameCenterAchievementLocalizations]")
                }

                /// the fields to include for returned resources of type gameCenterAchievements
                public static var gameCenterAchievements: Relation<[GameCenterAchievements]?> {
                    .init(key: "fields[gameCenterAchievements]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case gameCenterAchievement
            case gameCenterAchievementImage
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .gameCenterAchievement: return "gameCenterAchievement"
                case .gameCenterAchievementImage: return "gameCenterAchievementImage"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "gameCenterAchievement": self = .gameCenterAchievement
                case "gameCenterAchievementImage": self = .gameCenterAchievementImage
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

// swiftlint:enable all
