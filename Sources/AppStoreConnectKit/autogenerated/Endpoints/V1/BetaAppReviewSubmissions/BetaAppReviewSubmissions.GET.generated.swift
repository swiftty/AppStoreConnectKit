// autogenerated

// swiftlint:disable all
import Foundation

extension V1.BetaAppReviewSubmissions {
    public struct GET: Endpoint {
        public typealias Response = BetaAppReviewSubmissionsResponse

        public var path: String {
            "/v1/betaAppReviewSubmissions"
        }

        public var parameters: Parameters = Parameters()

        public init() {

        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[betaAppReviewSubmissions]",
                             value: parameters.fields[.betaAppReviewSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[builds]",
                             value: parameters.fields[.builds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[betaReviewState]",
                             value: parameters.filter[.betaReviewState]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[build]",
                             value: parameters.filter[.build]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of BetaAppReviewSubmissions as `BetaAppReviewSubmissionsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(BetaAppReviewSubmissionsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.BetaAppReviewSubmissions.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum BetaAppReviewSubmissions: String, Hashable, Codable {
                case betaReviewState
                case build
                case submittedDate
            }

            public enum Builds: String, Hashable, Codable {
                case app
                case appEncryptionDeclaration
                case appStoreVersion
                case betaAppReviewSubmission
                case betaBuildLocalizations
                case betaGroups
                case buildAudienceType
                case buildBetaDetail
                case buildBundles
                case computedMinMacOsVersion
                case diagnosticSignatures
                case expirationDate
                case expired
                case iconAssetToken
                case icons
                case individualTesters
                case lsMinimumSystemVersion
                case minOsVersion
                case perfPowerMetrics
                case preReleaseVersion
                case processingState
                case uploadedDate
                case usesNonExemptEncryption
                case version
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type betaAppReviewSubmissions
                public static var betaAppReviewSubmissions: Relation<[BetaAppReviewSubmissions]?> {
                    .init(key: "fields[betaAppReviewSubmissions]")
                }

                /// the fields to include for returned resources of type builds
                public static var builds: Relation<[Builds]?> {
                    .init(key: "fields[builds]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum BetaReviewState: String, Hashable, Codable {
                case approved = "APPROVED"
                case inReview = "IN_REVIEW"
                case rejected = "REJECTED"
                case waitingForReview = "WAITING_FOR_REVIEW"
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'betaReviewState'
                public static var betaReviewState: Relation<[BetaReviewState]?> {
                    .init(key: "filter[betaReviewState]")
                }

                /// filter by id(s) of related 'build' **(required)**
                public static var build: Relation<[String]?> {
                    .init(key: "filter[build]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: String, Hashable, Codable {
            case build
        }
    }
}

// swiftlint:enable all
