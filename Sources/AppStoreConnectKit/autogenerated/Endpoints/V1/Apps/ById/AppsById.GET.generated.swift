// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById {
    public struct GET: Endpoint {
        public typealias Response = AppResponse

        public var path: String {
            "/v1/apps/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appClips]",
                             value: parameters.fields[.appClips]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appCustomProductPages]",
                             value: parameters.fields[.appCustomProductPages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appEvents]",
                             value: parameters.fields[.appEvents]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appInfos]",
                             value: parameters.fields[.appInfos]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPreOrders]",
                             value: parameters.fields[.appPreOrders]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPricePoints]",
                             value: parameters.fields[.appPricePoints]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPrices]",
                             value: parameters.fields[.appPrices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[apps]",
                             value: parameters.fields[.apps]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaAppLocalizations]",
                             value: parameters.fields[.betaAppLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaAppReviewDetails]",
                             value: parameters.fields[.betaAppReviewDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaGroups]",
                             value: parameters.fields[.betaGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaLicenseAgreements]",
                             value: parameters.fields[.betaLicenseAgreements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[builds]",
                             value: parameters.fields[.builds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciProducts]",
                             value: parameters.fields[.ciProducts]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[endUserLicenseAgreements]",
                             value: parameters.fields[.endUserLicenseAgreements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterEnabledVersions]",
                             value: parameters.fields[.gameCenterEnabledVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchases]",
                             value: parameters.fields[.inAppPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[perfPowerMetrics]",
                             value: parameters.fields[.perfPowerMetrics]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[preReleaseVersions]",
                             value: parameters.fields[.preReleaseVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[reviewSubmissions]",
                             value: parameters.fields[.reviewSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[territories]",
                             value: parameters.fields[.territories]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appClips]",
                             value: parameters.limit[.appClips].map { "\($0)" }),
                URLQueryItem(name: "limit[appCustomProductPages]",
                             value: parameters.limit[.appCustomProductPages].map { "\($0)" }),
                URLQueryItem(name: "limit[appEvents]",
                             value: parameters.limit[.appEvents].map { "\($0)" }),
                URLQueryItem(name: "limit[appInfos]",
                             value: parameters.limit[.appInfos].map { "\($0)" }),
                URLQueryItem(name: "limit[appStoreVersions]",
                             value: parameters.limit[.appStoreVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[availableTerritories]",
                             value: parameters.limit[.availableTerritories].map { "\($0)" }),
                URLQueryItem(name: "limit[betaAppLocalizations]",
                             value: parameters.limit[.betaAppLocalizations].map { "\($0)" }),
                URLQueryItem(name: "limit[betaGroups]",
                             value: parameters.limit[.betaGroups].map { "\($0)" }),
                URLQueryItem(name: "limit[builds]",
                             value: parameters.limit[.builds].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterEnabledVersions]",
                             value: parameters.limit[.gameCenterEnabledVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[inAppPurchases]",
                             value: parameters.limit[.inAppPurchases].map { "\($0)" }),
                URLQueryItem(name: "limit[preReleaseVersions]",
                             value: parameters.limit[.preReleaseVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[prices]",
                             value: parameters.limit[.prices].map { "\($0)" }),
                URLQueryItem(name: "limit[reviewSubmissions]",
                             value: parameters.limit[.reviewSubmissions].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single App as `AppResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum AppClips: Hashable, Codable, RawRepresentable {
                case app
                case appClipAdvancedExperiences
                case appClipDefaultExperiences
                case bundleId
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appClipAdvancedExperiences: return "appClipAdvancedExperiences"
                    case .appClipDefaultExperiences: return "appClipDefaultExperiences"
                    case .bundleId: return "bundleId"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appClipAdvancedExperiences": self = .appClipAdvancedExperiences
                    case "appClipDefaultExperiences": self = .appClipDefaultExperiences
                    case "bundleId": self = .bundleId
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppCustomProductPages: Hashable, Codable, RawRepresentable {
                case app
                case appCustomProductPageVersions
                case appStoreVersionTemplate
                case customProductPageTemplate
                case name
                case url
                case visible
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appCustomProductPageVersions: return "appCustomProductPageVersions"
                    case .appStoreVersionTemplate: return "appStoreVersionTemplate"
                    case .customProductPageTemplate: return "customProductPageTemplate"
                    case .name: return "name"
                    case .url: return "url"
                    case .visible: return "visible"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appCustomProductPageVersions": self = .appCustomProductPageVersions
                    case "appStoreVersionTemplate": self = .appStoreVersionTemplate
                    case "customProductPageTemplate": self = .customProductPageTemplate
                    case "name": self = .name
                    case "url": self = .url
                    case "visible": self = .visible
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppEvents: Hashable, Codable, RawRepresentable {
                case app
                case archivedTerritorySchedules
                case badge
                case deepLink
                case eventState
                case localizations
                case primaryLocale
                case priority
                case purchaseRequirement
                case purpose
                case referenceName
                case territorySchedules
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .archivedTerritorySchedules: return "archivedTerritorySchedules"
                    case .badge: return "badge"
                    case .deepLink: return "deepLink"
                    case .eventState: return "eventState"
                    case .localizations: return "localizations"
                    case .primaryLocale: return "primaryLocale"
                    case .priority: return "priority"
                    case .purchaseRequirement: return "purchaseRequirement"
                    case .purpose: return "purpose"
                    case .referenceName: return "referenceName"
                    case .territorySchedules: return "territorySchedules"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "archivedTerritorySchedules": self = .archivedTerritorySchedules
                    case "badge": self = .badge
                    case "deepLink": self = .deepLink
                    case "eventState": self = .eventState
                    case "localizations": self = .localizations
                    case "primaryLocale": self = .primaryLocale
                    case "priority": self = .priority
                    case "purchaseRequirement": self = .purchaseRequirement
                    case "purpose": self = .purpose
                    case "referenceName": self = .referenceName
                    case "territorySchedules": self = .territorySchedules
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppInfos: Hashable, Codable, RawRepresentable {
                case ageRatingDeclaration
                case app
                case appInfoLocalizations
                case appStoreAgeRating
                case appStoreState
                case brazilAgeRating
                case kidsAgeBand
                case primaryCategory
                case primarySubcategoryOne
                case primarySubcategoryTwo
                case secondaryCategory
                case secondarySubcategoryOne
                case secondarySubcategoryTwo
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .ageRatingDeclaration: return "ageRatingDeclaration"
                    case .app: return "app"
                    case .appInfoLocalizations: return "appInfoLocalizations"
                    case .appStoreAgeRating: return "appStoreAgeRating"
                    case .appStoreState: return "appStoreState"
                    case .brazilAgeRating: return "brazilAgeRating"
                    case .kidsAgeBand: return "kidsAgeBand"
                    case .primaryCategory: return "primaryCategory"
                    case .primarySubcategoryOne: return "primarySubcategoryOne"
                    case .primarySubcategoryTwo: return "primarySubcategoryTwo"
                    case .secondaryCategory: return "secondaryCategory"
                    case .secondarySubcategoryOne: return "secondarySubcategoryOne"
                    case .secondarySubcategoryTwo: return "secondarySubcategoryTwo"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ageRatingDeclaration": self = .ageRatingDeclaration
                    case "app": self = .app
                    case "appInfoLocalizations": self = .appInfoLocalizations
                    case "appStoreAgeRating": self = .appStoreAgeRating
                    case "appStoreState": self = .appStoreState
                    case "brazilAgeRating": self = .brazilAgeRating
                    case "kidsAgeBand": self = .kidsAgeBand
                    case "primaryCategory": self = .primaryCategory
                    case "primarySubcategoryOne": self = .primarySubcategoryOne
                    case "primarySubcategoryTwo": self = .primarySubcategoryTwo
                    case "secondaryCategory": self = .secondaryCategory
                    case "secondarySubcategoryOne": self = .secondarySubcategoryOne
                    case "secondarySubcategoryTwo": self = .secondarySubcategoryTwo
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppPreOrders: Hashable, Codable, RawRepresentable {
                case app
                case appReleaseDate
                case preOrderAvailableDate
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appReleaseDate: return "appReleaseDate"
                    case .preOrderAvailableDate: return "preOrderAvailableDate"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appReleaseDate": self = .appReleaseDate
                    case "preOrderAvailableDate": self = .preOrderAvailableDate
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppPricePoints: Hashable, Codable, RawRepresentable {
                case app
                case customerPrice
                case priceTier
                case proceeds
                case territory
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .customerPrice: return "customerPrice"
                    case .priceTier: return "priceTier"
                    case .proceeds: return "proceeds"
                    case .territory: return "territory"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "customerPrice": self = .customerPrice
                    case "priceTier": self = .priceTier
                    case "proceeds": self = .proceeds
                    case "territory": self = .territory
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppPrices: Hashable, Codable, RawRepresentable {
                case app
                case priceTier
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .priceTier: return "priceTier"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "priceTier": self = .priceTier
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersions: Hashable, Codable, RawRepresentable {
                case ageRatingDeclaration
                case app
                case appClipDefaultExperience
                case appStoreReviewDetail
                case appStoreState
                case appStoreVersionExperiments
                case appStoreVersionLocalizations
                case appStoreVersionPhasedRelease
                case appStoreVersionSubmission
                case build
                case copyright
                case createdDate
                case downloadable
                case earliestReleaseDate
                case idfaDeclaration
                case platform
                case releaseType
                case routingAppCoverage
                case usesIdfa
                case versionString
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .ageRatingDeclaration: return "ageRatingDeclaration"
                    case .app: return "app"
                    case .appClipDefaultExperience: return "appClipDefaultExperience"
                    case .appStoreReviewDetail: return "appStoreReviewDetail"
                    case .appStoreState: return "appStoreState"
                    case .appStoreVersionExperiments: return "appStoreVersionExperiments"
                    case .appStoreVersionLocalizations: return "appStoreVersionLocalizations"
                    case .appStoreVersionPhasedRelease: return "appStoreVersionPhasedRelease"
                    case .appStoreVersionSubmission: return "appStoreVersionSubmission"
                    case .build: return "build"
                    case .copyright: return "copyright"
                    case .createdDate: return "createdDate"
                    case .downloadable: return "downloadable"
                    case .earliestReleaseDate: return "earliestReleaseDate"
                    case .idfaDeclaration: return "idfaDeclaration"
                    case .platform: return "platform"
                    case .releaseType: return "releaseType"
                    case .routingAppCoverage: return "routingAppCoverage"
                    case .usesIdfa: return "usesIdfa"
                    case .versionString: return "versionString"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ageRatingDeclaration": self = .ageRatingDeclaration
                    case "app": self = .app
                    case "appClipDefaultExperience": self = .appClipDefaultExperience
                    case "appStoreReviewDetail": self = .appStoreReviewDetail
                    case "appStoreState": self = .appStoreState
                    case "appStoreVersionExperiments": self = .appStoreVersionExperiments
                    case "appStoreVersionLocalizations": self = .appStoreVersionLocalizations
                    case "appStoreVersionPhasedRelease": self = .appStoreVersionPhasedRelease
                    case "appStoreVersionSubmission": self = .appStoreVersionSubmission
                    case "build": self = .build
                    case "copyright": self = .copyright
                    case "createdDate": self = .createdDate
                    case "downloadable": self = .downloadable
                    case "earliestReleaseDate": self = .earliestReleaseDate
                    case "idfaDeclaration": self = .idfaDeclaration
                    case "platform": self = .platform
                    case "releaseType": self = .releaseType
                    case "routingAppCoverage": self = .routingAppCoverage
                    case "usesIdfa": self = .usesIdfa
                    case "versionString": self = .versionString
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Apps: Hashable, Codable, RawRepresentable {
                case appClips
                case appCustomProductPages
                case appEvents
                case appInfos
                case appStoreVersions
                case availableInNewTerritories
                case availableTerritories
                case betaAppLocalizations
                case betaAppReviewDetail
                case betaGroups
                case betaLicenseAgreement
                case betaTesters
                case builds
                case bundleId
                case ciProduct
                case contentRightsDeclaration
                case endUserLicenseAgreement
                case gameCenterEnabledVersions
                case inAppPurchases
                case isOrEverWasMadeForKids
                case name
                case perfPowerMetrics
                case preOrder
                case preReleaseVersions
                case pricePoints
                case prices
                case primaryLocale
                case reviewSubmissions
                case sku
                case subscriptionStatusUrl
                case subscriptionStatusUrlForSandbox
                case subscriptionStatusUrlVersion
                case subscriptionStatusUrlVersionForSandbox
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appClips: return "appClips"
                    case .appCustomProductPages: return "appCustomProductPages"
                    case .appEvents: return "appEvents"
                    case .appInfos: return "appInfos"
                    case .appStoreVersions: return "appStoreVersions"
                    case .availableInNewTerritories: return "availableInNewTerritories"
                    case .availableTerritories: return "availableTerritories"
                    case .betaAppLocalizations: return "betaAppLocalizations"
                    case .betaAppReviewDetail: return "betaAppReviewDetail"
                    case .betaGroups: return "betaGroups"
                    case .betaLicenseAgreement: return "betaLicenseAgreement"
                    case .betaTesters: return "betaTesters"
                    case .builds: return "builds"
                    case .bundleId: return "bundleId"
                    case .ciProduct: return "ciProduct"
                    case .contentRightsDeclaration: return "contentRightsDeclaration"
                    case .endUserLicenseAgreement: return "endUserLicenseAgreement"
                    case .gameCenterEnabledVersions: return "gameCenterEnabledVersions"
                    case .inAppPurchases: return "inAppPurchases"
                    case .isOrEverWasMadeForKids: return "isOrEverWasMadeForKids"
                    case .name: return "name"
                    case .perfPowerMetrics: return "perfPowerMetrics"
                    case .preOrder: return "preOrder"
                    case .preReleaseVersions: return "preReleaseVersions"
                    case .pricePoints: return "pricePoints"
                    case .prices: return "prices"
                    case .primaryLocale: return "primaryLocale"
                    case .reviewSubmissions: return "reviewSubmissions"
                    case .sku: return "sku"
                    case .subscriptionStatusUrl: return "subscriptionStatusUrl"
                    case .subscriptionStatusUrlForSandbox: return "subscriptionStatusUrlForSandbox"
                    case .subscriptionStatusUrlVersion: return "subscriptionStatusUrlVersion"
                    case .subscriptionStatusUrlVersionForSandbox: return "subscriptionStatusUrlVersionForSandbox"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appClips": self = .appClips
                    case "appCustomProductPages": self = .appCustomProductPages
                    case "appEvents": self = .appEvents
                    case "appInfos": self = .appInfos
                    case "appStoreVersions": self = .appStoreVersions
                    case "availableInNewTerritories": self = .availableInNewTerritories
                    case "availableTerritories": self = .availableTerritories
                    case "betaAppLocalizations": self = .betaAppLocalizations
                    case "betaAppReviewDetail": self = .betaAppReviewDetail
                    case "betaGroups": self = .betaGroups
                    case "betaLicenseAgreement": self = .betaLicenseAgreement
                    case "betaTesters": self = .betaTesters
                    case "builds": self = .builds
                    case "bundleId": self = .bundleId
                    case "ciProduct": self = .ciProduct
                    case "contentRightsDeclaration": self = .contentRightsDeclaration
                    case "endUserLicenseAgreement": self = .endUserLicenseAgreement
                    case "gameCenterEnabledVersions": self = .gameCenterEnabledVersions
                    case "inAppPurchases": self = .inAppPurchases
                    case "isOrEverWasMadeForKids": self = .isOrEverWasMadeForKids
                    case "name": self = .name
                    case "perfPowerMetrics": self = .perfPowerMetrics
                    case "preOrder": self = .preOrder
                    case "preReleaseVersions": self = .preReleaseVersions
                    case "pricePoints": self = .pricePoints
                    case "prices": self = .prices
                    case "primaryLocale": self = .primaryLocale
                    case "reviewSubmissions": self = .reviewSubmissions
                    case "sku": self = .sku
                    case "subscriptionStatusUrl": self = .subscriptionStatusUrl
                    case "subscriptionStatusUrlForSandbox": self = .subscriptionStatusUrlForSandbox
                    case "subscriptionStatusUrlVersion": self = .subscriptionStatusUrlVersion
                    case "subscriptionStatusUrlVersionForSandbox": self = .subscriptionStatusUrlVersionForSandbox
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaAppLocalizations: Hashable, Codable, RawRepresentable {
                case app
                case description
                case feedbackEmail
                case locale
                case marketingUrl
                case privacyPolicyUrl
                case tvOsPrivacyPolicy
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .description: return "description"
                    case .feedbackEmail: return "feedbackEmail"
                    case .locale: return "locale"
                    case .marketingUrl: return "marketingUrl"
                    case .privacyPolicyUrl: return "privacyPolicyUrl"
                    case .tvOsPrivacyPolicy: return "tvOsPrivacyPolicy"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "description": self = .description
                    case "feedbackEmail": self = .feedbackEmail
                    case "locale": self = .locale
                    case "marketingUrl": self = .marketingUrl
                    case "privacyPolicyUrl": self = .privacyPolicyUrl
                    case "tvOsPrivacyPolicy": self = .tvOsPrivacyPolicy
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaAppReviewDetails: Hashable, Codable, RawRepresentable {
                case app
                case contactEmail
                case contactFirstName
                case contactLastName
                case contactPhone
                case demoAccountName
                case demoAccountPassword
                case demoAccountRequired
                case notes
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .contactEmail: return "contactEmail"
                    case .contactFirstName: return "contactFirstName"
                    case .contactLastName: return "contactLastName"
                    case .contactPhone: return "contactPhone"
                    case .demoAccountName: return "demoAccountName"
                    case .demoAccountPassword: return "demoAccountPassword"
                    case .demoAccountRequired: return "demoAccountRequired"
                    case .notes: return "notes"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "contactEmail": self = .contactEmail
                    case "contactFirstName": self = .contactFirstName
                    case "contactLastName": self = .contactLastName
                    case "contactPhone": self = .contactPhone
                    case "demoAccountName": self = .demoAccountName
                    case "demoAccountPassword": self = .demoAccountPassword
                    case "demoAccountRequired": self = .demoAccountRequired
                    case "notes": self = .notes
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaGroups: Hashable, Codable, RawRepresentable {
                case app
                case betaTesters
                case builds
                case createdDate
                case feedbackEnabled
                case hasAccessToAllBuilds
                case iosBuildsAvailableForAppleSiliconMac
                case isInternalGroup
                case name
                case publicLink
                case publicLinkEnabled
                case publicLinkId
                case publicLinkLimit
                case publicLinkLimitEnabled
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .betaTesters: return "betaTesters"
                    case .builds: return "builds"
                    case .createdDate: return "createdDate"
                    case .feedbackEnabled: return "feedbackEnabled"
                    case .hasAccessToAllBuilds: return "hasAccessToAllBuilds"
                    case .iosBuildsAvailableForAppleSiliconMac: return "iosBuildsAvailableForAppleSiliconMac"
                    case .isInternalGroup: return "isInternalGroup"
                    case .name: return "name"
                    case .publicLink: return "publicLink"
                    case .publicLinkEnabled: return "publicLinkEnabled"
                    case .publicLinkId: return "publicLinkId"
                    case .publicLinkLimit: return "publicLinkLimit"
                    case .publicLinkLimitEnabled: return "publicLinkLimitEnabled"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "betaTesters": self = .betaTesters
                    case "builds": self = .builds
                    case "createdDate": self = .createdDate
                    case "feedbackEnabled": self = .feedbackEnabled
                    case "hasAccessToAllBuilds": self = .hasAccessToAllBuilds
                    case "iosBuildsAvailableForAppleSiliconMac": self = .iosBuildsAvailableForAppleSiliconMac
                    case "isInternalGroup": self = .isInternalGroup
                    case "name": self = .name
                    case "publicLink": self = .publicLink
                    case "publicLinkEnabled": self = .publicLinkEnabled
                    case "publicLinkId": self = .publicLinkId
                    case "publicLinkLimit": self = .publicLinkLimit
                    case "publicLinkLimitEnabled": self = .publicLinkLimitEnabled
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaLicenseAgreements: Hashable, Codable, RawRepresentable {
                case agreementText
                case app
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .agreementText: return "agreementText"
                    case .app: return "app"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "agreementText": self = .agreementText
                    case "app": self = .app
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Builds: Hashable, Codable, RawRepresentable {
                case app
                case appEncryptionDeclaration
                case appStoreVersion
                case betaAppReviewSubmission
                case betaBuildLocalizations
                case betaGroups
                case buildAudienceType
                case buildBetaDetail
                case buildBundles
                case computedMinMacOsVersion
                case diagnosticSignatures
                case expirationDate
                case expired
                case iconAssetToken
                case icons
                case individualTesters
                case lsMinimumSystemVersion
                case minOsVersion
                case perfPowerMetrics
                case preReleaseVersion
                case processingState
                case uploadedDate
                case usesNonExemptEncryption
                case version
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appEncryptionDeclaration: return "appEncryptionDeclaration"
                    case .appStoreVersion: return "appStoreVersion"
                    case .betaAppReviewSubmission: return "betaAppReviewSubmission"
                    case .betaBuildLocalizations: return "betaBuildLocalizations"
                    case .betaGroups: return "betaGroups"
                    case .buildAudienceType: return "buildAudienceType"
                    case .buildBetaDetail: return "buildBetaDetail"
                    case .buildBundles: return "buildBundles"
                    case .computedMinMacOsVersion: return "computedMinMacOsVersion"
                    case .diagnosticSignatures: return "diagnosticSignatures"
                    case .expirationDate: return "expirationDate"
                    case .expired: return "expired"
                    case .iconAssetToken: return "iconAssetToken"
                    case .icons: return "icons"
                    case .individualTesters: return "individualTesters"
                    case .lsMinimumSystemVersion: return "lsMinimumSystemVersion"
                    case .minOsVersion: return "minOsVersion"
                    case .perfPowerMetrics: return "perfPowerMetrics"
                    case .preReleaseVersion: return "preReleaseVersion"
                    case .processingState: return "processingState"
                    case .uploadedDate: return "uploadedDate"
                    case .usesNonExemptEncryption: return "usesNonExemptEncryption"
                    case .version: return "version"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appEncryptionDeclaration": self = .appEncryptionDeclaration
                    case "appStoreVersion": self = .appStoreVersion
                    case "betaAppReviewSubmission": self = .betaAppReviewSubmission
                    case "betaBuildLocalizations": self = .betaBuildLocalizations
                    case "betaGroups": self = .betaGroups
                    case "buildAudienceType": self = .buildAudienceType
                    case "buildBetaDetail": self = .buildBetaDetail
                    case "buildBundles": self = .buildBundles
                    case "computedMinMacOsVersion": self = .computedMinMacOsVersion
                    case "diagnosticSignatures": self = .diagnosticSignatures
                    case "expirationDate": self = .expirationDate
                    case "expired": self = .expired
                    case "iconAssetToken": self = .iconAssetToken
                    case "icons": self = .icons
                    case "individualTesters": self = .individualTesters
                    case "lsMinimumSystemVersion": self = .lsMinimumSystemVersion
                    case "minOsVersion": self = .minOsVersion
                    case "perfPowerMetrics": self = .perfPowerMetrics
                    case "preReleaseVersion": self = .preReleaseVersion
                    case "processingState": self = .processingState
                    case "uploadedDate": self = .uploadedDate
                    case "usesNonExemptEncryption": self = .usesNonExemptEncryption
                    case "version": self = .version
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CiProducts: Hashable, Codable, RawRepresentable {
                case additionalRepositories
                case app
                case buildRuns
                case bundleId
                case createdDate
                case name
                case primaryRepositories
                case productType
                case workflows
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .additionalRepositories: return "additionalRepositories"
                    case .app: return "app"
                    case .buildRuns: return "buildRuns"
                    case .bundleId: return "bundleId"
                    case .createdDate: return "createdDate"
                    case .name: return "name"
                    case .primaryRepositories: return "primaryRepositories"
                    case .productType: return "productType"
                    case .workflows: return "workflows"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "additionalRepositories": self = .additionalRepositories
                    case "app": self = .app
                    case "buildRuns": self = .buildRuns
                    case "bundleId": self = .bundleId
                    case "createdDate": self = .createdDate
                    case "name": self = .name
                    case "primaryRepositories": self = .primaryRepositories
                    case "productType": self = .productType
                    case "workflows": self = .workflows
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum EndUserLicenseAgreements: Hashable, Codable, RawRepresentable {
                case agreementText
                case app
                case territories
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .agreementText: return "agreementText"
                    case .app: return "app"
                    case .territories: return "territories"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "agreementText": self = .agreementText
                    case "app": self = .app
                    case "territories": self = .territories
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterEnabledVersions: Hashable, Codable, RawRepresentable {
                case app
                case compatibleVersions
                case iconAsset
                case platform
                case versionString
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .compatibleVersions: return "compatibleVersions"
                    case .iconAsset: return "iconAsset"
                    case .platform: return "platform"
                    case .versionString: return "versionString"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "compatibleVersions": self = .compatibleVersions
                    case "iconAsset": self = .iconAsset
                    case "platform": self = .platform
                    case "versionString": self = .versionString
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchases: Hashable, Codable, RawRepresentable {
                case apps
                case inAppPurchaseType
                case productId
                case referenceName
                case state
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .apps: return "apps"
                    case .inAppPurchaseType: return "inAppPurchaseType"
                    case .productId: return "productId"
                    case .referenceName: return "referenceName"
                    case .state: return "state"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "apps": self = .apps
                    case "inAppPurchaseType": self = .inAppPurchaseType
                    case "productId": self = .productId
                    case "referenceName": self = .referenceName
                    case "state": self = .state
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PerfPowerMetrics: Hashable, Codable, RawRepresentable {
                case deviceType
                case metricType
                case platform
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .deviceType: return "deviceType"
                    case .metricType: return "metricType"
                    case .platform: return "platform"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "deviceType": self = .deviceType
                    case "metricType": self = .metricType
                    case "platform": self = .platform
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PreReleaseVersions: Hashable, Codable, RawRepresentable {
                case app
                case builds
                case platform
                case version
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .builds: return "builds"
                    case .platform: return "platform"
                    case .version: return "version"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "builds": self = .builds
                    case "platform": self = .platform
                    case "version": self = .version
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum ReviewSubmissions: Hashable, Codable, RawRepresentable {
                case app
                case appStoreVersionForReview
                case canceled
                case items
                case platform
                case state
                case submitted
                case submittedDate
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appStoreVersionForReview: return "appStoreVersionForReview"
                    case .canceled: return "canceled"
                    case .items: return "items"
                    case .platform: return "platform"
                    case .state: return "state"
                    case .submitted: return "submitted"
                    case .submittedDate: return "submittedDate"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appStoreVersionForReview": self = .appStoreVersionForReview
                    case "canceled": self = .canceled
                    case "items": self = .items
                    case "platform": self = .platform
                    case "state": self = .state
                    case "submitted": self = .submitted
                    case "submittedDate": self = .submittedDate
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Territories: Hashable, Codable, RawRepresentable {
                case currency
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .currency: return "currency"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "currency": self = .currency
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appClips
                public static var appClips: Relation<[AppClips]?> {
                    .init(key: "fields[appClips]")
                }

                /// the fields to include for returned resources of type appCustomProductPages
                public static var appCustomProductPages: Relation<[AppCustomProductPages]?> {
                    .init(key: "fields[appCustomProductPages]")
                }

                /// the fields to include for returned resources of type appEvents
                public static var appEvents: Relation<[AppEvents]?> {
                    .init(key: "fields[appEvents]")
                }

                /// the fields to include for returned resources of type appInfos
                public static var appInfos: Relation<[AppInfos]?> {
                    .init(key: "fields[appInfos]")
                }

                /// the fields to include for returned resources of type appPreOrders
                public static var appPreOrders: Relation<[AppPreOrders]?> {
                    .init(key: "fields[appPreOrders]")
                }

                /// the fields to include for returned resources of type appPricePoints
                public static var appPricePoints: Relation<[AppPricePoints]?> {
                    .init(key: "fields[appPricePoints]")
                }

                /// the fields to include for returned resources of type appPrices
                public static var appPrices: Relation<[AppPrices]?> {
                    .init(key: "fields[appPrices]")
                }

                /// the fields to include for returned resources of type appStoreVersions
                public static var appStoreVersions: Relation<[AppStoreVersions]?> {
                    .init(key: "fields[appStoreVersions]")
                }

                /// the fields to include for returned resources of type apps
                public static var apps: Relation<[Apps]?> {
                    .init(key: "fields[apps]")
                }

                /// the fields to include for returned resources of type betaAppLocalizations
                public static var betaAppLocalizations: Relation<[BetaAppLocalizations]?> {
                    .init(key: "fields[betaAppLocalizations]")
                }

                /// the fields to include for returned resources of type betaAppReviewDetails
                public static var betaAppReviewDetails: Relation<[BetaAppReviewDetails]?> {
                    .init(key: "fields[betaAppReviewDetails]")
                }

                /// the fields to include for returned resources of type betaGroups
                public static var betaGroups: Relation<[BetaGroups]?> {
                    .init(key: "fields[betaGroups]")
                }

                /// the fields to include for returned resources of type betaLicenseAgreements
                public static var betaLicenseAgreements: Relation<[BetaLicenseAgreements]?> {
                    .init(key: "fields[betaLicenseAgreements]")
                }

                /// the fields to include for returned resources of type builds
                public static var builds: Relation<[Builds]?> {
                    .init(key: "fields[builds]")
                }

                /// the fields to include for returned resources of type ciProducts
                public static var ciProducts: Relation<[CiProducts]?> {
                    .init(key: "fields[ciProducts]")
                }

                /// the fields to include for returned resources of type endUserLicenseAgreements
                public static var endUserLicenseAgreements: Relation<[EndUserLicenseAgreements]?> {
                    .init(key: "fields[endUserLicenseAgreements]")
                }

                /// the fields to include for returned resources of type gameCenterEnabledVersions
                public static var gameCenterEnabledVersions: Relation<[GameCenterEnabledVersions]?> {
                    .init(key: "fields[gameCenterEnabledVersions]")
                }

                /// the fields to include for returned resources of type inAppPurchases
                public static var inAppPurchases: Relation<[InAppPurchases]?> {
                    .init(key: "fields[inAppPurchases]")
                }

                /// the fields to include for returned resources of type perfPowerMetrics
                public static var perfPowerMetrics: Relation<[PerfPowerMetrics]?> {
                    .init(key: "fields[perfPowerMetrics]")
                }

                /// the fields to include for returned resources of type preReleaseVersions
                public static var preReleaseVersions: Relation<[PreReleaseVersions]?> {
                    .init(key: "fields[preReleaseVersions]")
                }

                /// the fields to include for returned resources of type reviewSubmissions
                public static var reviewSubmissions: Relation<[ReviewSubmissions]?> {
                    .init(key: "fields[reviewSubmissions]")
                }

                /// the fields to include for returned resources of type territories
                public static var territories: Relation<[Territories]?> {
                    .init(key: "fields[territories]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case appClips
            case appCustomProductPages
            case appEvents
            case appInfos
            case appStoreVersions
            case availableTerritories
            case betaAppLocalizations
            case betaAppReviewDetail
            case betaGroups
            case betaLicenseAgreement
            case builds
            case ciProduct
            case endUserLicenseAgreement
            case gameCenterEnabledVersions
            case inAppPurchases
            case preOrder
            case preReleaseVersions
            case prices
            case reviewSubmissions
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appClips: return "appClips"
                case .appCustomProductPages: return "appCustomProductPages"
                case .appEvents: return "appEvents"
                case .appInfos: return "appInfos"
                case .appStoreVersions: return "appStoreVersions"
                case .availableTerritories: return "availableTerritories"
                case .betaAppLocalizations: return "betaAppLocalizations"
                case .betaAppReviewDetail: return "betaAppReviewDetail"
                case .betaGroups: return "betaGroups"
                case .betaLicenseAgreement: return "betaLicenseAgreement"
                case .builds: return "builds"
                case .ciProduct: return "ciProduct"
                case .endUserLicenseAgreement: return "endUserLicenseAgreement"
                case .gameCenterEnabledVersions: return "gameCenterEnabledVersions"
                case .inAppPurchases: return "inAppPurchases"
                case .preOrder: return "preOrder"
                case .preReleaseVersions: return "preReleaseVersions"
                case .prices: return "prices"
                case .reviewSubmissions: return "reviewSubmissions"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "appClips": self = .appClips
                case "appCustomProductPages": self = .appCustomProductPages
                case "appEvents": self = .appEvents
                case "appInfos": self = .appInfos
                case "appStoreVersions": self = .appStoreVersions
                case "availableTerritories": self = .availableTerritories
                case "betaAppLocalizations": self = .betaAppLocalizations
                case "betaAppReviewDetail": self = .betaAppReviewDetail
                case "betaGroups": self = .betaGroups
                case "betaLicenseAgreement": self = .betaLicenseAgreement
                case "builds": self = .builds
                case "ciProduct": self = .ciProduct
                case "endUserLicenseAgreement": self = .endUserLicenseAgreement
                case "gameCenterEnabledVersions": self = .gameCenterEnabledVersions
                case "inAppPurchases": self = .inAppPurchases
                case "preOrder": self = .preOrder
                case "preReleaseVersions": self = .preReleaseVersions
                case "prices": self = .prices
                case "reviewSubmissions": self = .reviewSubmissions
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related appClips returned (when they are included)
                public static var appClips: Relation<Int?> {
                    .init(key: "limit[appClips]")
                }

                /// maximum number of related appCustomProductPages returned (when they are included)
                public static var appCustomProductPages: Relation<Int?> {
                    .init(key: "limit[appCustomProductPages]")
                }

                /// maximum number of related appEvents returned (when they are included)
                public static var appEvents: Relation<Int?> {
                    .init(key: "limit[appEvents]")
                }

                /// maximum number of related appInfos returned (when they are included)
                public static var appInfos: Relation<Int?> {
                    .init(key: "limit[appInfos]")
                }

                /// maximum number of related appStoreVersions returned (when they are included)
                public static var appStoreVersions: Relation<Int?> {
                    .init(key: "limit[appStoreVersions]")
                }

                /// maximum number of related availableTerritories returned (when they are included)
                public static var availableTerritories: Relation<Int?> {
                    .init(key: "limit[availableTerritories]")
                }

                /// maximum number of related betaAppLocalizations returned (when they are included)
                public static var betaAppLocalizations: Relation<Int?> {
                    .init(key: "limit[betaAppLocalizations]")
                }

                /// maximum number of related betaGroups returned (when they are included)
                public static var betaGroups: Relation<Int?> {
                    .init(key: "limit[betaGroups]")
                }

                /// maximum number of related builds returned (when they are included)
                public static var builds: Relation<Int?> {
                    .init(key: "limit[builds]")
                }

                /// maximum number of related gameCenterEnabledVersions returned (when they are included)
                public static var gameCenterEnabledVersions: Relation<Int?> {
                    .init(key: "limit[gameCenterEnabledVersions]")
                }

                /// maximum number of related inAppPurchases returned (when they are included)
                public static var inAppPurchases: Relation<Int?> {
                    .init(key: "limit[inAppPurchases]")
                }

                /// maximum number of related preReleaseVersions returned (when they are included)
                public static var preReleaseVersions: Relation<Int?> {
                    .init(key: "limit[preReleaseVersions]")
                }

                /// maximum number of related prices returned (when they are included)
                public static var prices: Relation<Int?> {
                    .init(key: "limit[prices]")
                }

                /// maximum number of related reviewSubmissions returned (when they are included)
                public static var reviewSubmissions: Relation<Int?> {
                    .init(key: "limit[reviewSubmissions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
