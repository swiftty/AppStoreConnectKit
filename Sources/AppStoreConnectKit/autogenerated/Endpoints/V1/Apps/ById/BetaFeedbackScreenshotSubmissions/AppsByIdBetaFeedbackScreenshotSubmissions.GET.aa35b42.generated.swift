// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById.BetaFeedbackScreenshotSubmissions {
    public struct GET: Endpoint {
        public typealias Response = BetaFeedbackScreenshotSubmissionsResponse

        public var path: String {
            "/v1/apps/\(id)/betaFeedbackScreenshotSubmissions"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[betaFeedbackScreenshotSubmissions]",
                             value: parameters.fields[.betaFeedbackScreenshotSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaTesters]",
                             value: parameters.fields[.betaTesters]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[builds]",
                             value: parameters.fields[.builds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[appPlatform]",
                             value: parameters.filter[.appPlatform]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[build.preReleaseVersion]",
                             value: parameters.filter[.buildPreReleaseVersion]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[build]",
                             value: parameters.filter[.build]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[deviceModel]",
                             value: parameters.filter[.deviceModel]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[devicePlatform]",
                             value: parameters.filter[.devicePlatform]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[osVersion]",
                             value: parameters.filter[.osVersion]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[tester]",
                             value: parameters.filter[.tester]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of BetaFeedbackScreenshotSubmissions as `BetaFeedbackScreenshotSubmissionsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(BetaFeedbackScreenshotSubmissionsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.BetaFeedbackScreenshotSubmissions.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct BetaFeedbackScreenshotSubmissions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appPlatform: Self {
                    .init(rawValue: "appPlatform")
                }

                public static var appUptimeInMilliseconds: Self {
                    .init(rawValue: "appUptimeInMilliseconds")
                }

                public static var architecture: Self {
                    .init(rawValue: "architecture")
                }

                public static var batteryPercentage: Self {
                    .init(rawValue: "batteryPercentage")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var buildBundleId: Self {
                    .init(rawValue: "buildBundleId")
                }

                public static var comment: Self {
                    .init(rawValue: "comment")
                }

                public static var connectionType: Self {
                    .init(rawValue: "connectionType")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var deviceFamily: Self {
                    .init(rawValue: "deviceFamily")
                }

                public static var deviceModel: Self {
                    .init(rawValue: "deviceModel")
                }

                public static var devicePlatform: Self {
                    .init(rawValue: "devicePlatform")
                }

                public static var diskBytesAvailable: Self {
                    .init(rawValue: "diskBytesAvailable")
                }

                public static var diskBytesTotal: Self {
                    .init(rawValue: "diskBytesTotal")
                }

                public static var email: Self {
                    .init(rawValue: "email")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var osVersion: Self {
                    .init(rawValue: "osVersion")
                }

                public static var pairedAppleWatch: Self {
                    .init(rawValue: "pairedAppleWatch")
                }

                public static var screenHeightInPoints: Self {
                    .init(rawValue: "screenHeightInPoints")
                }

                public static var screenWidthInPoints: Self {
                    .init(rawValue: "screenWidthInPoints")
                }

                public static var screenshots: Self {
                    .init(rawValue: "screenshots")
                }

                public static var tester: Self {
                    .init(rawValue: "tester")
                }

                public static var timeZone: Self {
                    .init(rawValue: "timeZone")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaTesters: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var apps: Self {
                    .init(rawValue: "apps")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var email: Self {
                    .init(rawValue: "email")
                }

                public static var firstName: Self {
                    .init(rawValue: "firstName")
                }

                public static var inviteType: Self {
                    .init(rawValue: "inviteType")
                }

                public static var lastName: Self {
                    .init(rawValue: "lastName")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Builds: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appEncryptionDeclaration: Self {
                    .init(rawValue: "appEncryptionDeclaration")
                }

                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var betaAppReviewSubmission: Self {
                    .init(rawValue: "betaAppReviewSubmission")
                }

                public static var betaBuildLocalizations: Self {
                    .init(rawValue: "betaBuildLocalizations")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var buildAudienceType: Self {
                    .init(rawValue: "buildAudienceType")
                }

                public static var buildBetaDetail: Self {
                    .init(rawValue: "buildBetaDetail")
                }

                public static var buildBundles: Self {
                    .init(rawValue: "buildBundles")
                }

                public static var computedMinMacOsVersion: Self {
                    .init(rawValue: "computedMinMacOsVersion")
                }

                public static var computedMinVisionOsVersion: Self {
                    .init(rawValue: "computedMinVisionOsVersion")
                }

                public static var diagnosticSignatures: Self {
                    .init(rawValue: "diagnosticSignatures")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var expired: Self {
                    .init(rawValue: "expired")
                }

                public static var iconAssetToken: Self {
                    .init(rawValue: "iconAssetToken")
                }

                public static var icons: Self {
                    .init(rawValue: "icons")
                }

                public static var individualTesters: Self {
                    .init(rawValue: "individualTesters")
                }

                public static var lsMinimumSystemVersion: Self {
                    .init(rawValue: "lsMinimumSystemVersion")
                }

                public static var minOsVersion: Self {
                    .init(rawValue: "minOsVersion")
                }

                public static var perfPowerMetrics: Self {
                    .init(rawValue: "perfPowerMetrics")
                }

                public static var preReleaseVersion: Self {
                    .init(rawValue: "preReleaseVersion")
                }

                public static var processingState: Self {
                    .init(rawValue: "processingState")
                }

                public static var uploadedDate: Self {
                    .init(rawValue: "uploadedDate")
                }

                public static var usesNonExemptEncryption: Self {
                    .init(rawValue: "usesNonExemptEncryption")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type betaFeedbackScreenshotSubmissions
                public static var betaFeedbackScreenshotSubmissions: Relation<[BetaFeedbackScreenshotSubmissions]?> {
                    .init(key: "fields[betaFeedbackScreenshotSubmissions]")
                }

                /// the fields to include for returned resources of type betaTesters
                public static var betaTesters: Relation<[BetaTesters]?> {
                    .init(key: "fields[betaTesters]")
                }

                /// the fields to include for returned resources of type builds
                public static var builds: Relation<[Builds]?> {
                    .init(key: "fields[builds]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppPlatform: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var iOS: Self {
                    .init(rawValue: "IOS")
                }

                public static var macOS: Self {
                    .init(rawValue: "MAC_OS")
                }

                public static var tvOS: Self {
                    .init(rawValue: "TV_OS")
                }

                public static var visionOS: Self {
                    .init(rawValue: "VISION_OS")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct DevicePlatform: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var iOS: Self {
                    .init(rawValue: "IOS")
                }

                public static var macOS: Self {
                    .init(rawValue: "MAC_OS")
                }

                public static var tvOS: Self {
                    .init(rawValue: "TV_OS")
                }

                public static var visionOS: Self {
                    .init(rawValue: "VISION_OS")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'appPlatform'
                public static var appPlatform: Relation<[AppPlatform]?> {
                    .init(key: "filter[appPlatform]")
                }

                /// filter by id(s) of related 'build.preReleaseVersion'
                public static var buildPreReleaseVersion: Relation<[String]?> {
                    .init(key: "filter[build.preReleaseVersion]")
                }

                /// filter by id(s) of related 'build'
                public static var build: Relation<[String]?> {
                    .init(key: "filter[build]")
                }

                /// filter by attribute 'deviceModel'
                public static var deviceModel: Relation<[String]?> {
                    .init(key: "filter[deviceModel]")
                }

                /// filter by attribute 'devicePlatform'
                public static var devicePlatform: Relation<[DevicePlatform]?> {
                    .init(key: "filter[devicePlatform]")
                }

                /// filter by attribute 'osVersion'
                public static var osVersion: Relation<[String]?> {
                    .init(key: "filter[osVersion]")
                }

                /// filter by id(s) of related 'tester'
                public static var tester: Relation<[String]?> {
                    .init(key: "filter[tester]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var build: Self {
                .init(rawValue: "build")
            }

            public static var tester: Self {
                .init(rawValue: "tester")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Sort: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var createdDate: Self {
                .init(rawValue: "createdDate")
            }

            public static var createdDateDesc: Self {
                .init(rawValue: "-createdDate")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
