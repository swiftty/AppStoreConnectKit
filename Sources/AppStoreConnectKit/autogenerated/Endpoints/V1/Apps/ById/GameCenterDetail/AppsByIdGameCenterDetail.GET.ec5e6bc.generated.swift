// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById.GameCenterDetail {
    public struct GET: Endpoint {
        public typealias Response = GameCenterDetailResponse

        public var path: String {
            "/v1/apps/\(id)/gameCenterDetail"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[apps]",
                             value: parameters.fields[.apps]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAchievementReleases]",
                             value: parameters.fields[.gameCenterAchievementReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAchievements]",
                             value: parameters.fields[.gameCenterAchievements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAppVersions]",
                             value: parameters.fields[.gameCenterAppVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterDetails]",
                             value: parameters.fields[.gameCenterDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterGroups]",
                             value: parameters.fields[.gameCenterGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboardReleases]",
                             value: parameters.fields[.gameCenterLeaderboardReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboardSetReleases]",
                             value: parameters.fields[.gameCenterLeaderboardSetReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboardSets]",
                             value: parameters.fields[.gameCenterLeaderboardSets]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboards]",
                             value: parameters.fields[.gameCenterLeaderboards]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[achievementReleases]",
                             value: parameters.limit[.achievementReleases].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterAchievements]",
                             value: parameters.limit[.gameCenterAchievements].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterAppVersions]",
                             value: parameters.limit[.gameCenterAppVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterLeaderboardSets]",
                             value: parameters.limit[.gameCenterLeaderboardSets].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterLeaderboards]",
                             value: parameters.limit[.gameCenterLeaderboards].map { "\($0)" }),
                URLQueryItem(name: "limit[leaderboardReleases]",
                             value: parameters.limit[.leaderboardReleases].map { "\($0)" }),
                URLQueryItem(name: "limit[leaderboardSetReleases]",
                             value: parameters.limit[.leaderboardSetReleases].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single GameCenterDetail as `GameCenterDetailResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterDetailResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.GameCenterDetail.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum Apps: Hashable, Codable, RawRepresentable {
                case appAvailability
                case appClips
                case appCustomProductPages
                case appEncryptionDeclarations
                case appEvents
                case appInfos
                case appPricePoints
                case appPriceSchedule
                case appStoreVersionExperimentsV2
                case appStoreVersions
                case availableInNewTerritories
                case availableTerritories
                case betaAppLocalizations
                case betaAppReviewDetail
                case betaGroups
                case betaLicenseAgreement
                case betaTesters
                case builds
                case bundleId
                case ciProduct
                case contentRightsDeclaration
                case customerReviews
                case endUserLicenseAgreement
                case gameCenterDetail
                case gameCenterEnabledVersions
                case inAppPurchases
                case inAppPurchasesV2
                case isOrEverWasMadeForKids
                case name
                case perfPowerMetrics
                case preOrder
                case preReleaseVersions
                case pricePoints
                case prices
                case primaryLocale
                case promotedPurchases
                case reviewSubmissions
                case sku
                case subscriptionGracePeriod
                case subscriptionGroups
                case subscriptionStatusUrl
                case subscriptionStatusUrlForSandbox
                case subscriptionStatusUrlVersion
                case subscriptionStatusUrlVersionForSandbox
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appAvailability: return "appAvailability"
                    case .appClips: return "appClips"
                    case .appCustomProductPages: return "appCustomProductPages"
                    case .appEncryptionDeclarations: return "appEncryptionDeclarations"
                    case .appEvents: return "appEvents"
                    case .appInfos: return "appInfos"
                    case .appPricePoints: return "appPricePoints"
                    case .appPriceSchedule: return "appPriceSchedule"
                    case .appStoreVersionExperimentsV2: return "appStoreVersionExperimentsV2"
                    case .appStoreVersions: return "appStoreVersions"
                    case .availableInNewTerritories: return "availableInNewTerritories"
                    case .availableTerritories: return "availableTerritories"
                    case .betaAppLocalizations: return "betaAppLocalizations"
                    case .betaAppReviewDetail: return "betaAppReviewDetail"
                    case .betaGroups: return "betaGroups"
                    case .betaLicenseAgreement: return "betaLicenseAgreement"
                    case .betaTesters: return "betaTesters"
                    case .builds: return "builds"
                    case .bundleId: return "bundleId"
                    case .ciProduct: return "ciProduct"
                    case .contentRightsDeclaration: return "contentRightsDeclaration"
                    case .customerReviews: return "customerReviews"
                    case .endUserLicenseAgreement: return "endUserLicenseAgreement"
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterEnabledVersions: return "gameCenterEnabledVersions"
                    case .inAppPurchases: return "inAppPurchases"
                    case .inAppPurchasesV2: return "inAppPurchasesV2"
                    case .isOrEverWasMadeForKids: return "isOrEverWasMadeForKids"
                    case .name: return "name"
                    case .perfPowerMetrics: return "perfPowerMetrics"
                    case .preOrder: return "preOrder"
                    case .preReleaseVersions: return "preReleaseVersions"
                    case .pricePoints: return "pricePoints"
                    case .prices: return "prices"
                    case .primaryLocale: return "primaryLocale"
                    case .promotedPurchases: return "promotedPurchases"
                    case .reviewSubmissions: return "reviewSubmissions"
                    case .sku: return "sku"
                    case .subscriptionGracePeriod: return "subscriptionGracePeriod"
                    case .subscriptionGroups: return "subscriptionGroups"
                    case .subscriptionStatusUrl: return "subscriptionStatusUrl"
                    case .subscriptionStatusUrlForSandbox: return "subscriptionStatusUrlForSandbox"
                    case .subscriptionStatusUrlVersion: return "subscriptionStatusUrlVersion"
                    case .subscriptionStatusUrlVersionForSandbox: return "subscriptionStatusUrlVersionForSandbox"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appAvailability": self = .appAvailability
                    case "appClips": self = .appClips
                    case "appCustomProductPages": self = .appCustomProductPages
                    case "appEncryptionDeclarations": self = .appEncryptionDeclarations
                    case "appEvents": self = .appEvents
                    case "appInfos": self = .appInfos
                    case "appPricePoints": self = .appPricePoints
                    case "appPriceSchedule": self = .appPriceSchedule
                    case "appStoreVersionExperimentsV2": self = .appStoreVersionExperimentsV2
                    case "appStoreVersions": self = .appStoreVersions
                    case "availableInNewTerritories": self = .availableInNewTerritories
                    case "availableTerritories": self = .availableTerritories
                    case "betaAppLocalizations": self = .betaAppLocalizations
                    case "betaAppReviewDetail": self = .betaAppReviewDetail
                    case "betaGroups": self = .betaGroups
                    case "betaLicenseAgreement": self = .betaLicenseAgreement
                    case "betaTesters": self = .betaTesters
                    case "builds": self = .builds
                    case "bundleId": self = .bundleId
                    case "ciProduct": self = .ciProduct
                    case "contentRightsDeclaration": self = .contentRightsDeclaration
                    case "customerReviews": self = .customerReviews
                    case "endUserLicenseAgreement": self = .endUserLicenseAgreement
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterEnabledVersions": self = .gameCenterEnabledVersions
                    case "inAppPurchases": self = .inAppPurchases
                    case "inAppPurchasesV2": self = .inAppPurchasesV2
                    case "isOrEverWasMadeForKids": self = .isOrEverWasMadeForKids
                    case "name": self = .name
                    case "perfPowerMetrics": self = .perfPowerMetrics
                    case "preOrder": self = .preOrder
                    case "preReleaseVersions": self = .preReleaseVersions
                    case "pricePoints": self = .pricePoints
                    case "prices": self = .prices
                    case "primaryLocale": self = .primaryLocale
                    case "promotedPurchases": self = .promotedPurchases
                    case "reviewSubmissions": self = .reviewSubmissions
                    case "sku": self = .sku
                    case "subscriptionGracePeriod": self = .subscriptionGracePeriod
                    case "subscriptionGroups": self = .subscriptionGroups
                    case "subscriptionStatusUrl": self = .subscriptionStatusUrl
                    case "subscriptionStatusUrlForSandbox": self = .subscriptionStatusUrlForSandbox
                    case "subscriptionStatusUrlVersion": self = .subscriptionStatusUrlVersion
                    case "subscriptionStatusUrlVersionForSandbox": self = .subscriptionStatusUrlVersionForSandbox
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterAchievementReleases: Hashable, Codable, RawRepresentable {
                case gameCenterAchievement
                case gameCenterDetail
                case live
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .gameCenterAchievement: return "gameCenterAchievement"
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .live: return "live"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "gameCenterAchievement": self = .gameCenterAchievement
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "live": self = .live
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterAchievements: Hashable, Codable, RawRepresentable {
                case archived
                case gameCenterDetail
                case gameCenterGroup
                case groupAchievement
                case localizations
                case points
                case referenceName
                case releases
                case repeatable
                case showBeforeEarned
                case vendorIdentifier
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .archived: return "archived"
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterGroup: return "gameCenterGroup"
                    case .groupAchievement: return "groupAchievement"
                    case .localizations: return "localizations"
                    case .points: return "points"
                    case .referenceName: return "referenceName"
                    case .releases: return "releases"
                    case .repeatable: return "repeatable"
                    case .showBeforeEarned: return "showBeforeEarned"
                    case .vendorIdentifier: return "vendorIdentifier"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "archived": self = .archived
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterGroup": self = .gameCenterGroup
                    case "groupAchievement": self = .groupAchievement
                    case "localizations": self = .localizations
                    case "points": self = .points
                    case "referenceName": self = .referenceName
                    case "releases": self = .releases
                    case "repeatable": self = .repeatable
                    case "showBeforeEarned": self = .showBeforeEarned
                    case "vendorIdentifier": self = .vendorIdentifier
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterAppVersions: Hashable, Codable, RawRepresentable {
                case appStoreVersion
                case compatibilityVersions
                case enabled
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreVersion: return "appStoreVersion"
                    case .compatibilityVersions: return "compatibilityVersions"
                    case .enabled: return "enabled"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreVersion": self = .appStoreVersion
                    case "compatibilityVersions": self = .compatibilityVersions
                    case "enabled": self = .enabled
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterDetails: Hashable, Codable, RawRepresentable {
                case achievementReleases
                case app
                case arcadeEnabled
                case challengeEnabled
                case defaultGroupLeaderboard
                case defaultLeaderboard
                case gameCenterAchievements
                case gameCenterAppVersions
                case gameCenterGroup
                case gameCenterLeaderboardSets
                case gameCenterLeaderboards
                case leaderboardReleases
                case leaderboardSetReleases
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .achievementReleases: return "achievementReleases"
                    case .app: return "app"
                    case .arcadeEnabled: return "arcadeEnabled"
                    case .challengeEnabled: return "challengeEnabled"
                    case .defaultGroupLeaderboard: return "defaultGroupLeaderboard"
                    case .defaultLeaderboard: return "defaultLeaderboard"
                    case .gameCenterAchievements: return "gameCenterAchievements"
                    case .gameCenterAppVersions: return "gameCenterAppVersions"
                    case .gameCenterGroup: return "gameCenterGroup"
                    case .gameCenterLeaderboardSets: return "gameCenterLeaderboardSets"
                    case .gameCenterLeaderboards: return "gameCenterLeaderboards"
                    case .leaderboardReleases: return "leaderboardReleases"
                    case .leaderboardSetReleases: return "leaderboardSetReleases"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "achievementReleases": self = .achievementReleases
                    case "app": self = .app
                    case "arcadeEnabled": self = .arcadeEnabled
                    case "challengeEnabled": self = .challengeEnabled
                    case "defaultGroupLeaderboard": self = .defaultGroupLeaderboard
                    case "defaultLeaderboard": self = .defaultLeaderboard
                    case "gameCenterAchievements": self = .gameCenterAchievements
                    case "gameCenterAppVersions": self = .gameCenterAppVersions
                    case "gameCenterGroup": self = .gameCenterGroup
                    case "gameCenterLeaderboardSets": self = .gameCenterLeaderboardSets
                    case "gameCenterLeaderboards": self = .gameCenterLeaderboards
                    case "leaderboardReleases": self = .leaderboardReleases
                    case "leaderboardSetReleases": self = .leaderboardSetReleases
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterGroups: Hashable, Codable, RawRepresentable {
                case gameCenterAchievements
                case gameCenterDetails
                case gameCenterLeaderboardSets
                case gameCenterLeaderboards
                case referenceName
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .gameCenterAchievements: return "gameCenterAchievements"
                    case .gameCenterDetails: return "gameCenterDetails"
                    case .gameCenterLeaderboardSets: return "gameCenterLeaderboardSets"
                    case .gameCenterLeaderboards: return "gameCenterLeaderboards"
                    case .referenceName: return "referenceName"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "gameCenterAchievements": self = .gameCenterAchievements
                    case "gameCenterDetails": self = .gameCenterDetails
                    case "gameCenterLeaderboardSets": self = .gameCenterLeaderboardSets
                    case "gameCenterLeaderboards": self = .gameCenterLeaderboards
                    case "referenceName": self = .referenceName
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterLeaderboardReleases: Hashable, Codable, RawRepresentable {
                case gameCenterDetail
                case gameCenterLeaderboard
                case live
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterLeaderboard: return "gameCenterLeaderboard"
                    case .live: return "live"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterLeaderboard": self = .gameCenterLeaderboard
                    case "live": self = .live
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterLeaderboardSetReleases: Hashable, Codable, RawRepresentable {
                case gameCenterDetail
                case gameCenterLeaderboardSet
                case live
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterLeaderboardSet: return "gameCenterLeaderboardSet"
                    case .live: return "live"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterLeaderboardSet": self = .gameCenterLeaderboardSet
                    case "live": self = .live
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterLeaderboardSets: Hashable, Codable, RawRepresentable {
                case gameCenterDetail
                case gameCenterGroup
                case gameCenterLeaderboards
                case groupLeaderboardSet
                case localizations
                case referenceName
                case releases
                case vendorIdentifier
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterGroup: return "gameCenterGroup"
                    case .gameCenterLeaderboards: return "gameCenterLeaderboards"
                    case .groupLeaderboardSet: return "groupLeaderboardSet"
                    case .localizations: return "localizations"
                    case .referenceName: return "referenceName"
                    case .releases: return "releases"
                    case .vendorIdentifier: return "vendorIdentifier"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterGroup": self = .gameCenterGroup
                    case "gameCenterLeaderboards": self = .gameCenterLeaderboards
                    case "groupLeaderboardSet": self = .groupLeaderboardSet
                    case "localizations": self = .localizations
                    case "referenceName": self = .referenceName
                    case "releases": self = .releases
                    case "vendorIdentifier": self = .vendorIdentifier
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterLeaderboards: Hashable, Codable, RawRepresentable {
                case archived
                case defaultFormatter
                case gameCenterDetail
                case gameCenterGroup
                case gameCenterLeaderboardSets
                case groupLeaderboard
                case localizations
                case recurrenceDuration
                case recurrenceRule
                case recurrenceStartDate
                case referenceName
                case releases
                case scoreRangeEnd
                case scoreRangeStart
                case scoreSortType
                case submissionType
                case vendorIdentifier
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .archived: return "archived"
                    case .defaultFormatter: return "defaultFormatter"
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterGroup: return "gameCenterGroup"
                    case .gameCenterLeaderboardSets: return "gameCenterLeaderboardSets"
                    case .groupLeaderboard: return "groupLeaderboard"
                    case .localizations: return "localizations"
                    case .recurrenceDuration: return "recurrenceDuration"
                    case .recurrenceRule: return "recurrenceRule"
                    case .recurrenceStartDate: return "recurrenceStartDate"
                    case .referenceName: return "referenceName"
                    case .releases: return "releases"
                    case .scoreRangeEnd: return "scoreRangeEnd"
                    case .scoreRangeStart: return "scoreRangeStart"
                    case .scoreSortType: return "scoreSortType"
                    case .submissionType: return "submissionType"
                    case .vendorIdentifier: return "vendorIdentifier"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "archived": self = .archived
                    case "defaultFormatter": self = .defaultFormatter
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterGroup": self = .gameCenterGroup
                    case "gameCenterLeaderboardSets": self = .gameCenterLeaderboardSets
                    case "groupLeaderboard": self = .groupLeaderboard
                    case "localizations": self = .localizations
                    case "recurrenceDuration": self = .recurrenceDuration
                    case "recurrenceRule": self = .recurrenceRule
                    case "recurrenceStartDate": self = .recurrenceStartDate
                    case "referenceName": self = .referenceName
                    case "releases": self = .releases
                    case "scoreRangeEnd": self = .scoreRangeEnd
                    case "scoreRangeStart": self = .scoreRangeStart
                    case "scoreSortType": self = .scoreSortType
                    case "submissionType": self = .submissionType
                    case "vendorIdentifier": self = .vendorIdentifier
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type apps
                public static var apps: Relation<[Apps]?> {
                    .init(key: "fields[apps]")
                }

                /// the fields to include for returned resources of type gameCenterAchievementReleases
                public static var gameCenterAchievementReleases: Relation<[GameCenterAchievementReleases]?> {
                    .init(key: "fields[gameCenterAchievementReleases]")
                }

                /// the fields to include for returned resources of type gameCenterAchievements
                public static var gameCenterAchievements: Relation<[GameCenterAchievements]?> {
                    .init(key: "fields[gameCenterAchievements]")
                }

                /// the fields to include for returned resources of type gameCenterAppVersions
                public static var gameCenterAppVersions: Relation<[GameCenterAppVersions]?> {
                    .init(key: "fields[gameCenterAppVersions]")
                }

                /// the fields to include for returned resources of type gameCenterDetails
                public static var gameCenterDetails: Relation<[GameCenterDetails]?> {
                    .init(key: "fields[gameCenterDetails]")
                }

                /// the fields to include for returned resources of type gameCenterGroups
                public static var gameCenterGroups: Relation<[GameCenterGroups]?> {
                    .init(key: "fields[gameCenterGroups]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboardReleases
                public static var gameCenterLeaderboardReleases: Relation<[GameCenterLeaderboardReleases]?> {
                    .init(key: "fields[gameCenterLeaderboardReleases]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
                public static var gameCenterLeaderboardSetReleases: Relation<[GameCenterLeaderboardSetReleases]?> {
                    .init(key: "fields[gameCenterLeaderboardSetReleases]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboardSets
                public static var gameCenterLeaderboardSets: Relation<[GameCenterLeaderboardSets]?> {
                    .init(key: "fields[gameCenterLeaderboardSets]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboards
                public static var gameCenterLeaderboards: Relation<[GameCenterLeaderboards]?> {
                    .init(key: "fields[gameCenterLeaderboards]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case achievementReleases
            case app
            case defaultGroupLeaderboard
            case defaultLeaderboard
            case gameCenterAchievements
            case gameCenterAppVersions
            case gameCenterGroup
            case gameCenterLeaderboardSets
            case gameCenterLeaderboards
            case leaderboardReleases
            case leaderboardSetReleases
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .achievementReleases: return "achievementReleases"
                case .app: return "app"
                case .defaultGroupLeaderboard: return "defaultGroupLeaderboard"
                case .defaultLeaderboard: return "defaultLeaderboard"
                case .gameCenterAchievements: return "gameCenterAchievements"
                case .gameCenterAppVersions: return "gameCenterAppVersions"
                case .gameCenterGroup: return "gameCenterGroup"
                case .gameCenterLeaderboardSets: return "gameCenterLeaderboardSets"
                case .gameCenterLeaderboards: return "gameCenterLeaderboards"
                case .leaderboardReleases: return "leaderboardReleases"
                case .leaderboardSetReleases: return "leaderboardSetReleases"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "achievementReleases": self = .achievementReleases
                case "app": self = .app
                case "defaultGroupLeaderboard": self = .defaultGroupLeaderboard
                case "defaultLeaderboard": self = .defaultLeaderboard
                case "gameCenterAchievements": self = .gameCenterAchievements
                case "gameCenterAppVersions": self = .gameCenterAppVersions
                case "gameCenterGroup": self = .gameCenterGroup
                case "gameCenterLeaderboardSets": self = .gameCenterLeaderboardSets
                case "gameCenterLeaderboards": self = .gameCenterLeaderboards
                case "leaderboardReleases": self = .leaderboardReleases
                case "leaderboardSetReleases": self = .leaderboardSetReleases
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related achievementReleases returned (when they are included)
                public static var achievementReleases: Relation<Int?> {
                    .init(key: "limit[achievementReleases]")
                }

                /// maximum number of related gameCenterAchievements returned (when they are included)
                public static var gameCenterAchievements: Relation<Int?> {
                    .init(key: "limit[gameCenterAchievements]")
                }

                /// maximum number of related gameCenterAppVersions returned (when they are included)
                public static var gameCenterAppVersions: Relation<Int?> {
                    .init(key: "limit[gameCenterAppVersions]")
                }

                /// maximum number of related gameCenterLeaderboardSets returned (when they are included)
                public static var gameCenterLeaderboardSets: Relation<Int?> {
                    .init(key: "limit[gameCenterLeaderboardSets]")
                }

                /// maximum number of related gameCenterLeaderboards returned (when they are included)
                public static var gameCenterLeaderboards: Relation<Int?> {
                    .init(key: "limit[gameCenterLeaderboards]")
                }

                /// maximum number of related leaderboardReleases returned (when they are included)
                public static var leaderboardReleases: Relation<Int?> {
                    .init(key: "limit[leaderboardReleases]")
                }

                /// maximum number of related leaderboardSetReleases returned (when they are included)
                public static var leaderboardSetReleases: Relation<Int?> {
                    .init(key: "limit[leaderboardSetReleases]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
