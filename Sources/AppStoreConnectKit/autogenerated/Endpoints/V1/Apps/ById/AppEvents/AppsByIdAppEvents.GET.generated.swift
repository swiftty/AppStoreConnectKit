// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById.AppEvents {
    public struct GET: Endpoint {
        public typealias Response = AppEventsResponse

        public var path: String {
            "/v1/apps/\(id)/appEvents"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appEventLocalizations]",
                             value: parameters.fields[.appEventLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appEvents]",
                             value: parameters.fields[.appEvents]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[eventState]",
                             value: parameters.filter[.eventState]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[id]",
                             value: parameters.filter[.id]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[localizations]",
                             value: parameters.limit[.localizations].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of AppEvents as `AppEventsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppEventsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.AppEvents.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum AppEventLocalizations: Hashable, Codable, RawRepresentable {
                case appEvent
                case appEventScreenshots
                case appEventVideoClips
                case locale
                case longDescription
                case name
                case shortDescription
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appEvent: return "appEvent"
                    case .appEventScreenshots: return "appEventScreenshots"
                    case .appEventVideoClips: return "appEventVideoClips"
                    case .locale: return "locale"
                    case .longDescription: return "longDescription"
                    case .name: return "name"
                    case .shortDescription: return "shortDescription"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appEvent": self = .appEvent
                    case "appEventScreenshots": self = .appEventScreenshots
                    case "appEventVideoClips": self = .appEventVideoClips
                    case "locale": self = .locale
                    case "longDescription": self = .longDescription
                    case "name": self = .name
                    case "shortDescription": self = .shortDescription
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppEvents: Hashable, Codable, RawRepresentable {
                case app
                case archivedTerritorySchedules
                case badge
                case deepLink
                case eventState
                case localizations
                case primaryLocale
                case priority
                case purchaseRequirement
                case purpose
                case referenceName
                case territorySchedules
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .archivedTerritorySchedules: return "archivedTerritorySchedules"
                    case .badge: return "badge"
                    case .deepLink: return "deepLink"
                    case .eventState: return "eventState"
                    case .localizations: return "localizations"
                    case .primaryLocale: return "primaryLocale"
                    case .priority: return "priority"
                    case .purchaseRequirement: return "purchaseRequirement"
                    case .purpose: return "purpose"
                    case .referenceName: return "referenceName"
                    case .territorySchedules: return "territorySchedules"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "archivedTerritorySchedules": self = .archivedTerritorySchedules
                    case "badge": self = .badge
                    case "deepLink": self = .deepLink
                    case "eventState": self = .eventState
                    case "localizations": self = .localizations
                    case "primaryLocale": self = .primaryLocale
                    case "priority": self = .priority
                    case "purchaseRequirement": self = .purchaseRequirement
                    case "purpose": self = .purpose
                    case "referenceName": self = .referenceName
                    case "territorySchedules": self = .territorySchedules
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appEventLocalizations
                public static var appEventLocalizations: Relation<[AppEventLocalizations]?> {
                    .init(key: "fields[appEventLocalizations]")
                }

                /// the fields to include for returned resources of type appEvents
                public static var appEvents: Relation<[AppEvents]?> {
                    .init(key: "fields[appEvents]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum EventState: Hashable, Codable, RawRepresentable {
                case accepted
                case approved
                case archived
                case draft
                case inReview
                case past
                case published
                case readyForReview
                case rejected
                case waitingForReview
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .accepted: return "ACCEPTED"
                    case .approved: return "APPROVED"
                    case .archived: return "ARCHIVED"
                    case .draft: return "DRAFT"
                    case .inReview: return "IN_REVIEW"
                    case .past: return "PAST"
                    case .published: return "PUBLISHED"
                    case .readyForReview: return "READY_FOR_REVIEW"
                    case .rejected: return "REJECTED"
                    case .waitingForReview: return "WAITING_FOR_REVIEW"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ACCEPTED": self = .accepted
                    case "APPROVED": self = .approved
                    case "ARCHIVED": self = .archived
                    case "DRAFT": self = .draft
                    case "IN_REVIEW": self = .inReview
                    case "PAST": self = .past
                    case "PUBLISHED": self = .published
                    case "READY_FOR_REVIEW": self = .readyForReview
                    case "REJECTED": self = .rejected
                    case "WAITING_FOR_REVIEW": self = .waitingForReview
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'eventState'
                public static var eventState: Relation<[EventState]?> {
                    .init(key: "filter[eventState]")
                }

                /// filter by id(s)
                public static var id: Relation<[String]?> {
                    .init(key: "filter[id]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case localizations
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .localizations: return "localizations"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "localizations": self = .localizations
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related localizations returned (when they are included)
                public static var localizations: Relation<Int?> {
                    .init(key: "limit[localizations]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
