// autogenerated

// swiftlint:disable all
import Foundation

extension V1.Apps.ById.PerfPowerMetrics {
    public struct GET: Endpoint {
        public typealias Response = PerfPowerMetricsResponse

        public var path: String {
            "/v1/apps/\(id)/perfPowerMetrics"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "filter[deviceType]",
                             value: parameters.filter[.deviceType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[metricType]",
                             value: parameters.filter[.metricType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[platform]",
                             value: parameters.filter[.platform]?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of related resources as `PerfPowerMetricsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(PerfPowerMetricsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.PerfPowerMetrics.GET {
    public struct Parameters: Hashable {
        public var filter: Filter = Filter()

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum MetricType: String, Hashable, Codable {
                case animation = "ANIMATION"
                case battery = "BATTERY"
                case disk = "DISK"
                case hang = "HANG"
                case launch = "LAUNCH"
                case memory = "MEMORY"
                case termination = "TERMINATION"
            }

            public enum Platform: String, Hashable, Codable {
                case iOS = "IOS"
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'deviceType'
                public static var deviceType: Relation<[String]?> {
                    .init(key: "filter[deviceType]")
                }

                /// filter by attribute 'metricType'
                public static var metricType: Relation<[MetricType]?> {
                    .init(key: "filter[metricType]")
                }

                /// filter by attribute 'platform'
                public static var platform: Relation<[Platform]?> {
                    .init(key: "filter[platform]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
