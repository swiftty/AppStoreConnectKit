// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById.PerfPowerMetrics {
    public struct GET: Endpoint {
        public typealias Response = XcodeMetrics

        public var path: String {
            "/v1/apps/\(id)/perfPowerMetrics"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "filter[deviceType]",
                             value: parameters.filter[.deviceType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[metricType]",
                             value: parameters.filter[.metricType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[platform]",
                             value: parameters.filter[.platform]?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of PerfPowerMetrics as `XcodeMetrics`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(XcodeMetrics.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.PerfPowerMetrics.GET {
    public struct Parameters: Hashable {
        public var filter: Filter = Filter()

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum MetricType: Hashable, Codable, RawRepresentable {
                case animation
                case battery
                case disk
                case hang
                case launch
                case memory
                case termination
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .animation: return "ANIMATION"
                    case .battery: return "BATTERY"
                    case .disk: return "DISK"
                    case .hang: return "HANG"
                    case .launch: return "LAUNCH"
                    case .memory: return "MEMORY"
                    case .termination: return "TERMINATION"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ANIMATION": self = .animation
                    case "BATTERY": self = .battery
                    case "DISK": self = .disk
                    case "HANG": self = .hang
                    case "LAUNCH": self = .launch
                    case "MEMORY": self = .memory
                    case "TERMINATION": self = .termination
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Platform: Hashable, Codable, RawRepresentable {
                case iOS
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .iOS: return "IOS"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "IOS": self = .iOS
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }
    }
}

extension Relation<V1.Apps.ById.PerfPowerMetrics.GET.Parameters.Filter, [String]?> {
    /// filter by attribute 'deviceType'
    public static var deviceType: Relation {
        .init(key: "filter[deviceType]")
    }
}

extension Relation<V1.Apps.ById.PerfPowerMetrics.GET.Parameters.Filter, [V1.Apps.ById.PerfPowerMetrics.GET.Parameters.Filter.MetricType]?> {
    /// filter by attribute 'metricType'
    public static var metricType: Relation {
        .init(key: "filter[metricType]")
    }
}

extension Relation<V1.Apps.ById.PerfPowerMetrics.GET.Parameters.Filter, [V1.Apps.ById.PerfPowerMetrics.GET.Parameters.Filter.Platform]?> {
    /// filter by attribute 'platform'
    public static var platform: Relation {
        .init(key: "filter[platform]")
    }
}

// swiftlint:enable all
