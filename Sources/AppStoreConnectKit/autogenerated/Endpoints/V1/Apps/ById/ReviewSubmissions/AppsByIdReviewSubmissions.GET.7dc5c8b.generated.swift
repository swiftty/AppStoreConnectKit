// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById.ReviewSubmissions {
    public struct GET: Endpoint {
        public typealias Response = ReviewSubmissionsResponse

        public var path: String {
            "/v1/apps/\(id)/reviewSubmissions"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[actors]",
                             value: parameters.fields[.actors]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[apps]",
                             value: parameters.fields[.apps]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[reviewSubmissionItems]",
                             value: parameters.fields[.reviewSubmissionItems]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[reviewSubmissions]",
                             value: parameters.fields[.reviewSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[platform]",
                             value: parameters.filter[.platform]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[state]",
                             value: parameters.filter[.state]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[items]",
                             value: parameters.limit[.items].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of ReviewSubmissions as `ReviewSubmissionsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(ReviewSubmissionsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.ReviewSubmissions.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Actors: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var actorType: Self {
                    .init(rawValue: "actorType")
                }

                public static var apiKeyId: Self {
                    .init(rawValue: "apiKeyId")
                }

                public static var userEmail: Self {
                    .init(rawValue: "userEmail")
                }

                public static var userFirstName: Self {
                    .init(rawValue: "userFirstName")
                }

                public static var userLastName: Self {
                    .init(rawValue: "userLastName")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var ageRatingDeclaration: Self {
                    .init(rawValue: "ageRatingDeclaration")
                }

                public static var alternativeDistributionPackage: Self {
                    .init(rawValue: "alternativeDistributionPackage")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appClipDefaultExperience: Self {
                    .init(rawValue: "appClipDefaultExperience")
                }

                public static var appStoreReviewDetail: Self {
                    .init(rawValue: "appStoreReviewDetail")
                }

                public static var appStoreState: Self {
                    .init(rawValue: "appStoreState")
                }

                public static var appStoreVersionExperiments: Self {
                    .init(rawValue: "appStoreVersionExperiments")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersionLocalizations: Self {
                    .init(rawValue: "appStoreVersionLocalizations")
                }

                public static var appStoreVersionPhasedRelease: Self {
                    .init(rawValue: "appStoreVersionPhasedRelease")
                }

                public static var appStoreVersionSubmission: Self {
                    .init(rawValue: "appStoreVersionSubmission")
                }

                public static var appVersionState: Self {
                    .init(rawValue: "appVersionState")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var copyright: Self {
                    .init(rawValue: "copyright")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var downloadable: Self {
                    .init(rawValue: "downloadable")
                }

                public static var earliestReleaseDate: Self {
                    .init(rawValue: "earliestReleaseDate")
                }

                public static var gameCenterAppVersion: Self {
                    .init(rawValue: "gameCenterAppVersion")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var releaseType: Self {
                    .init(rawValue: "releaseType")
                }

                public static var reviewType: Self {
                    .init(rawValue: "reviewType")
                }

                public static var routingAppCoverage: Self {
                    .init(rawValue: "routingAppCoverage")
                }

                public static var usesIdfa: Self {
                    .init(rawValue: "usesIdfa")
                }

                public static var versionString: Self {
                    .init(rawValue: "versionString")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Apps: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var accessibilityDeclarations: Self {
                    .init(rawValue: "accessibilityDeclarations")
                }

                public static var accessibilityUrl: Self {
                    .init(rawValue: "accessibilityUrl")
                }

                public static var alternativeDistributionKey: Self {
                    .init(rawValue: "alternativeDistributionKey")
                }

                public static var analyticsReportRequests: Self {
                    .init(rawValue: "analyticsReportRequests")
                }

                public static var appAvailabilityV2: Self {
                    .init(rawValue: "appAvailabilityV2")
                }

                public static var appClips: Self {
                    .init(rawValue: "appClips")
                }

                public static var appCustomProductPages: Self {
                    .init(rawValue: "appCustomProductPages")
                }

                public static var appEncryptionDeclarations: Self {
                    .init(rawValue: "appEncryptionDeclarations")
                }

                public static var appEvents: Self {
                    .init(rawValue: "appEvents")
                }

                public static var appInfos: Self {
                    .init(rawValue: "appInfos")
                }

                public static var appPricePoints: Self {
                    .init(rawValue: "appPricePoints")
                }

                public static var appPriceSchedule: Self {
                    .init(rawValue: "appPriceSchedule")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersions: Self {
                    .init(rawValue: "appStoreVersions")
                }

                public static var backgroundAssets: Self {
                    .init(rawValue: "backgroundAssets")
                }

                public static var betaAppLocalizations: Self {
                    .init(rawValue: "betaAppLocalizations")
                }

                public static var betaAppReviewDetail: Self {
                    .init(rawValue: "betaAppReviewDetail")
                }

                public static var betaFeedbackCrashSubmissions: Self {
                    .init(rawValue: "betaFeedbackCrashSubmissions")
                }

                public static var betaFeedbackScreenshotSubmissions: Self {
                    .init(rawValue: "betaFeedbackScreenshotSubmissions")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var betaLicenseAgreement: Self {
                    .init(rawValue: "betaLicenseAgreement")
                }

                public static var betaTesters: Self {
                    .init(rawValue: "betaTesters")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public static var ciProduct: Self {
                    .init(rawValue: "ciProduct")
                }

                public static var contentRightsDeclaration: Self {
                    .init(rawValue: "contentRightsDeclaration")
                }

                public static var customerReviewSummarizations: Self {
                    .init(rawValue: "customerReviewSummarizations")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var endUserLicenseAgreement: Self {
                    .init(rawValue: "endUserLicenseAgreement")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterEnabledVersions: Self {
                    .init(rawValue: "gameCenterEnabledVersions")
                }

                public static var inAppPurchases: Self {
                    .init(rawValue: "inAppPurchases")
                }

                public static var inAppPurchasesV2: Self {
                    .init(rawValue: "inAppPurchasesV2")
                }

                public static var isOrEverWasMadeForKids: Self {
                    .init(rawValue: "isOrEverWasMadeForKids")
                }

                public static var marketplaceSearchDetail: Self {
                    .init(rawValue: "marketplaceSearchDetail")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var perfPowerMetrics: Self {
                    .init(rawValue: "perfPowerMetrics")
                }

                public static var preReleaseVersions: Self {
                    .init(rawValue: "preReleaseVersions")
                }

                public static var primaryLocale: Self {
                    .init(rawValue: "primaryLocale")
                }

                public static var promotedPurchases: Self {
                    .init(rawValue: "promotedPurchases")
                }

                public static var reviewSubmissions: Self {
                    .init(rawValue: "reviewSubmissions")
                }

                public static var sku: Self {
                    .init(rawValue: "sku")
                }

                public static var streamlinedPurchasingEnabled: Self {
                    .init(rawValue: "streamlinedPurchasingEnabled")
                }

                public static var subscriptionGracePeriod: Self {
                    .init(rawValue: "subscriptionGracePeriod")
                }

                public static var subscriptionGroups: Self {
                    .init(rawValue: "subscriptionGroups")
                }

                public static var subscriptionStatusUrl: Self {
                    .init(rawValue: "subscriptionStatusUrl")
                }

                public static var subscriptionStatusUrlForSandbox: Self {
                    .init(rawValue: "subscriptionStatusUrlForSandbox")
                }

                public static var subscriptionStatusUrlVersion: Self {
                    .init(rawValue: "subscriptionStatusUrlVersion")
                }

                public static var subscriptionStatusUrlVersionForSandbox: Self {
                    .init(rawValue: "subscriptionStatusUrlVersionForSandbox")
                }

                public static var webhooks: Self {
                    .init(rawValue: "webhooks")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct ReviewSubmissionItems: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appCustomProductPageVersion: Self {
                    .init(rawValue: "appCustomProductPageVersion")
                }

                public static var appEvent: Self {
                    .init(rawValue: "appEvent")
                }

                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var appStoreVersionExperiment: Self {
                    .init(rawValue: "appStoreVersionExperiment")
                }

                public static var appStoreVersionExperimentV2: Self {
                    .init(rawValue: "appStoreVersionExperimentV2")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct ReviewSubmissions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appStoreVersionForReview: Self {
                    .init(rawValue: "appStoreVersionForReview")
                }

                public static var items: Self {
                    .init(rawValue: "items")
                }

                public static var lastUpdatedByActor: Self {
                    .init(rawValue: "lastUpdatedByActor")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var submittedByActor: Self {
                    .init(rawValue: "submittedByActor")
                }

                public static var submittedDate: Self {
                    .init(rawValue: "submittedDate")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type actors
                public static var actors: Relation<[Actors]?> {
                    .init(key: "fields[actors]")
                }

                /// the fields to include for returned resources of type appStoreVersions
                public static var appStoreVersions: Relation<[AppStoreVersions]?> {
                    .init(key: "fields[appStoreVersions]")
                }

                /// the fields to include for returned resources of type apps
                public static var apps: Relation<[Apps]?> {
                    .init(key: "fields[apps]")
                }

                /// the fields to include for returned resources of type reviewSubmissionItems
                public static var reviewSubmissionItems: Relation<[ReviewSubmissionItems]?> {
                    .init(key: "fields[reviewSubmissionItems]")
                }

                /// the fields to include for returned resources of type reviewSubmissions
                public static var reviewSubmissions: Relation<[ReviewSubmissions]?> {
                    .init(key: "fields[reviewSubmissions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Platform: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var iOS: Self {
                    .init(rawValue: "IOS")
                }

                public static var macOS: Self {
                    .init(rawValue: "MAC_OS")
                }

                public static var tvOS: Self {
                    .init(rawValue: "TV_OS")
                }

                public static var visionOS: Self {
                    .init(rawValue: "VISION_OS")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var canceling: Self {
                    .init(rawValue: "CANCELING")
                }

                public static var complete: Self {
                    .init(rawValue: "COMPLETE")
                }

                public static var completing: Self {
                    .init(rawValue: "COMPLETING")
                }

                public static var inReview: Self {
                    .init(rawValue: "IN_REVIEW")
                }

                public static var readyForReview: Self {
                    .init(rawValue: "READY_FOR_REVIEW")
                }

                public static var unresolvedIssues: Self {
                    .init(rawValue: "UNRESOLVED_ISSUES")
                }

                public static var waitingForReview: Self {
                    .init(rawValue: "WAITING_FOR_REVIEW")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'platform'
                public static var platform: Relation<[Platform]?> {
                    .init(key: "filter[platform]")
                }

                /// filter by attribute 'state'
                public static var state: Relation<[State]?> {
                    .init(key: "filter[state]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var app: Self {
                .init(rawValue: "app")
            }

            public static var appStoreVersionForReview: Self {
                .init(rawValue: "appStoreVersionForReview")
            }

            public static var items: Self {
                .init(rawValue: "items")
            }

            public static var lastUpdatedByActor: Self {
                .init(rawValue: "lastUpdatedByActor")
            }

            public static var submittedByActor: Self {
                .init(rawValue: "submittedByActor")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related items returned (when they are included)
                public static var items: Relation<Int?> {
                    .init(key: "limit[items]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
