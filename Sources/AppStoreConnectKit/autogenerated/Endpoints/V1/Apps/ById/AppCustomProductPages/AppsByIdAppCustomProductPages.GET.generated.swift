// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById.AppCustomProductPages {
    public struct GET: Endpoint {
        public typealias Response = AppCustomProductPagesResponse

        public var path: String {
            "/v1/apps/\(id)/appCustomProductPages"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appCustomProductPageVersions]",
                             value: parameters.fields[.appCustomProductPageVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appCustomProductPages]",
                             value: parameters.fields[.appCustomProductPages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[visible]",
                             value: parameters.filter[.visible]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appCustomProductPageVersions]",
                             value: parameters.limit[.appCustomProductPageVersions].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of related resources as `AppCustomProductPagesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppCustomProductPagesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.AppCustomProductPages.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum AppCustomProductPageVersions: Hashable, Codable, RawRepresentable {
                case appCustomProductPage
                case appCustomProductPageLocalizations
                case state
                case version
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appCustomProductPage: return "appCustomProductPage"
                    case .appCustomProductPageLocalizations: return "appCustomProductPageLocalizations"
                    case .state: return "state"
                    case .version: return "version"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appCustomProductPage": self = .appCustomProductPage
                    case "appCustomProductPageLocalizations": self = .appCustomProductPageLocalizations
                    case "state": self = .state
                    case "version": self = .version
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppCustomProductPages: Hashable, Codable, RawRepresentable {
                case app
                case appCustomProductPageVersions
                case appStoreVersionTemplate
                case customProductPageTemplate
                case name
                case url
                case visible
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appCustomProductPageVersions: return "appCustomProductPageVersions"
                    case .appStoreVersionTemplate: return "appStoreVersionTemplate"
                    case .customProductPageTemplate: return "customProductPageTemplate"
                    case .name: return "name"
                    case .url: return "url"
                    case .visible: return "visible"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appCustomProductPageVersions": self = .appCustomProductPageVersions
                    case "appStoreVersionTemplate": self = .appStoreVersionTemplate
                    case "customProductPageTemplate": self = .customProductPageTemplate
                    case "name": self = .name
                    case "url": self = .url
                    case "visible": self = .visible
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appCustomProductPageVersions
                public static var appCustomProductPageVersions: Relation<[AppCustomProductPageVersions]?> {
                    .init(key: "fields[appCustomProductPageVersions]")
                }

                /// the fields to include for returned resources of type appCustomProductPages
                public static var appCustomProductPages: Relation<[AppCustomProductPages]?> {
                    .init(key: "fields[appCustomProductPages]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// filter by attribute 'visible'
                public static var visible: Relation<[String]?> {
                    .init(key: "filter[visible]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case appCustomProductPageVersions
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appCustomProductPageVersions: return "appCustomProductPageVersions"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "appCustomProductPageVersions": self = .appCustomProductPageVersions
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related appCustomProductPageVersions returned (when they are included)
                public static var appCustomProductPageVersions: Relation<Int?> {
                    .init(key: "limit[appCustomProductPageVersions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
