// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps.ById {
    public struct GET: Endpoint {
        public typealias Response = AppResponse

        public var path: String {
            "/v1/apps/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appClips]",
                             value: parameters.fields[.appClips]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appCustomProductPages]",
                             value: parameters.fields[.appCustomProductPages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appEncryptionDeclarations]",
                             value: parameters.fields[.appEncryptionDeclarations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appEvents]",
                             value: parameters.fields[.appEvents]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appInfos]",
                             value: parameters.fields[.appInfos]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionExperiments]",
                             value: parameters.fields[.appStoreVersionExperiments]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[apps]",
                             value: parameters.fields[.apps]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaAppLocalizations]",
                             value: parameters.fields[.betaAppLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaAppReviewDetails]",
                             value: parameters.fields[.betaAppReviewDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaGroups]",
                             value: parameters.fields[.betaGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaLicenseAgreements]",
                             value: parameters.fields[.betaLicenseAgreements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[builds]",
                             value: parameters.fields[.builds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciProducts]",
                             value: parameters.fields[.ciProducts]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[endUserLicenseAgreements]",
                             value: parameters.fields[.endUserLicenseAgreements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterDetails]",
                             value: parameters.fields[.gameCenterDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterEnabledVersions]",
                             value: parameters.fields[.gameCenterEnabledVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchases]",
                             value: parameters.fields[.inAppPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[preReleaseVersions]",
                             value: parameters.fields[.preReleaseVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[promotedPurchases]",
                             value: parameters.fields[.promotedPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[reviewSubmissions]",
                             value: parameters.fields[.reviewSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionGracePeriods]",
                             value: parameters.fields[.subscriptionGracePeriods]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionGroups]",
                             value: parameters.fields[.subscriptionGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appClips]",
                             value: parameters.limit[.appClips].map { "\($0)" }),
                URLQueryItem(name: "limit[appCustomProductPages]",
                             value: parameters.limit[.appCustomProductPages].map { "\($0)" }),
                URLQueryItem(name: "limit[appEncryptionDeclarations]",
                             value: parameters.limit[.appEncryptionDeclarations].map { "\($0)" }),
                URLQueryItem(name: "limit[appEvents]",
                             value: parameters.limit[.appEvents].map { "\($0)" }),
                URLQueryItem(name: "limit[appInfos]",
                             value: parameters.limit[.appInfos].map { "\($0)" }),
                URLQueryItem(name: "limit[appStoreVersionExperimentsV2]",
                             value: parameters.limit[.appStoreVersionExperimentsV2].map { "\($0)" }),
                URLQueryItem(name: "limit[appStoreVersions]",
                             value: parameters.limit[.appStoreVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[betaAppLocalizations]",
                             value: parameters.limit[.betaAppLocalizations].map { "\($0)" }),
                URLQueryItem(name: "limit[betaGroups]",
                             value: parameters.limit[.betaGroups].map { "\($0)" }),
                URLQueryItem(name: "limit[builds]",
                             value: parameters.limit[.builds].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterEnabledVersions]",
                             value: parameters.limit[.gameCenterEnabledVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[inAppPurchasesV2]",
                             value: parameters.limit[.inAppPurchasesV2].map { "\($0)" }),
                URLQueryItem(name: "limit[inAppPurchases]",
                             value: parameters.limit[.inAppPurchases].map { "\($0)" }),
                URLQueryItem(name: "limit[preReleaseVersions]",
                             value: parameters.limit[.preReleaseVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[promotedPurchases]",
                             value: parameters.limit[.promotedPurchases].map { "\($0)" }),
                URLQueryItem(name: "limit[reviewSubmissions]",
                             value: parameters.limit[.reviewSubmissions].map { "\($0)" }),
                URLQueryItem(name: "limit[subscriptionGroups]",
                             value: parameters.limit[.subscriptionGroups].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single App as `AppResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppClips: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appClipAdvancedExperiences: Self {
                    .init(rawValue: "appClipAdvancedExperiences")
                }

                public static var appClipDefaultExperiences: Self {
                    .init(rawValue: "appClipDefaultExperiences")
                }

                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppCustomProductPages: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appCustomProductPageVersions: Self {
                    .init(rawValue: "appCustomProductPageVersions")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var url: Self {
                    .init(rawValue: "url")
                }

                public static var visible: Self {
                    .init(rawValue: "visible")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppEncryptionDeclarations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appDescription: Self {
                    .init(rawValue: "appDescription")
                }

                public static var appEncryptionDeclarationDocument: Self {
                    .init(rawValue: "appEncryptionDeclarationDocument")
                }

                public static var appEncryptionDeclarationState: Self {
                    .init(rawValue: "appEncryptionDeclarationState")
                }

                public static var availableOnFrenchStore: Self {
                    .init(rawValue: "availableOnFrenchStore")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var codeValue: Self {
                    .init(rawValue: "codeValue")
                }

                public static var containsProprietaryCryptography: Self {
                    .init(rawValue: "containsProprietaryCryptography")
                }

                public static var containsThirdPartyCryptography: Self {
                    .init(rawValue: "containsThirdPartyCryptography")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var documentName: Self {
                    .init(rawValue: "documentName")
                }

                public static var documentType: Self {
                    .init(rawValue: "documentType")
                }

                public static var documentUrl: Self {
                    .init(rawValue: "documentUrl")
                }

                public static var exempt: Self {
                    .init(rawValue: "exempt")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var uploadedDate: Self {
                    .init(rawValue: "uploadedDate")
                }

                public static var usesEncryption: Self {
                    .init(rawValue: "usesEncryption")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppEvents: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var archivedTerritorySchedules: Self {
                    .init(rawValue: "archivedTerritorySchedules")
                }

                public static var badge: Self {
                    .init(rawValue: "badge")
                }

                public static var deepLink: Self {
                    .init(rawValue: "deepLink")
                }

                public static var eventState: Self {
                    .init(rawValue: "eventState")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var primaryLocale: Self {
                    .init(rawValue: "primaryLocale")
                }

                public static var priority: Self {
                    .init(rawValue: "priority")
                }

                public static var purchaseRequirement: Self {
                    .init(rawValue: "purchaseRequirement")
                }

                public static var purpose: Self {
                    .init(rawValue: "purpose")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var territorySchedules: Self {
                    .init(rawValue: "territorySchedules")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppInfos: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var ageRatingDeclaration: Self {
                    .init(rawValue: "ageRatingDeclaration")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appInfoLocalizations: Self {
                    .init(rawValue: "appInfoLocalizations")
                }

                public static var appStoreAgeRating: Self {
                    .init(rawValue: "appStoreAgeRating")
                }

                public static var appStoreState: Self {
                    .init(rawValue: "appStoreState")
                }

                public static var australiaAgeRating: Self {
                    .init(rawValue: "australiaAgeRating")
                }

                public static var brazilAgeRating: Self {
                    .init(rawValue: "brazilAgeRating")
                }

                public static var brazilAgeRatingV2: Self {
                    .init(rawValue: "brazilAgeRatingV2")
                }

                public static var franceAgeRating: Self {
                    .init(rawValue: "franceAgeRating")
                }

                public static var kidsAgeBand: Self {
                    .init(rawValue: "kidsAgeBand")
                }

                public static var koreaAgeRating: Self {
                    .init(rawValue: "koreaAgeRating")
                }

                public static var primaryCategory: Self {
                    .init(rawValue: "primaryCategory")
                }

                public static var primarySubcategoryOne: Self {
                    .init(rawValue: "primarySubcategoryOne")
                }

                public static var primarySubcategoryTwo: Self {
                    .init(rawValue: "primarySubcategoryTwo")
                }

                public static var secondaryCategory: Self {
                    .init(rawValue: "secondaryCategory")
                }

                public static var secondarySubcategoryOne: Self {
                    .init(rawValue: "secondarySubcategoryOne")
                }

                public static var secondarySubcategoryTwo: Self {
                    .init(rawValue: "secondarySubcategoryTwo")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersionExperiments: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appStoreVersionExperimentTreatments: Self {
                    .init(rawValue: "appStoreVersionExperimentTreatments")
                }

                public static var controlVersions: Self {
                    .init(rawValue: "controlVersions")
                }

                public static var endDate: Self {
                    .init(rawValue: "endDate")
                }

                public static var latestControlVersion: Self {
                    .init(rawValue: "latestControlVersion")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var reviewRequired: Self {
                    .init(rawValue: "reviewRequired")
                }

                public static var startDate: Self {
                    .init(rawValue: "startDate")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var trafficProportion: Self {
                    .init(rawValue: "trafficProportion")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var ageRatingDeclaration: Self {
                    .init(rawValue: "ageRatingDeclaration")
                }

                public static var alternativeDistributionPackage: Self {
                    .init(rawValue: "alternativeDistributionPackage")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appClipDefaultExperience: Self {
                    .init(rawValue: "appClipDefaultExperience")
                }

                public static var appStoreReviewDetail: Self {
                    .init(rawValue: "appStoreReviewDetail")
                }

                public static var appStoreState: Self {
                    .init(rawValue: "appStoreState")
                }

                public static var appStoreVersionExperiments: Self {
                    .init(rawValue: "appStoreVersionExperiments")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersionLocalizations: Self {
                    .init(rawValue: "appStoreVersionLocalizations")
                }

                public static var appStoreVersionPhasedRelease: Self {
                    .init(rawValue: "appStoreVersionPhasedRelease")
                }

                public static var appStoreVersionSubmission: Self {
                    .init(rawValue: "appStoreVersionSubmission")
                }

                public static var appVersionState: Self {
                    .init(rawValue: "appVersionState")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var copyright: Self {
                    .init(rawValue: "copyright")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var downloadable: Self {
                    .init(rawValue: "downloadable")
                }

                public static var earliestReleaseDate: Self {
                    .init(rawValue: "earliestReleaseDate")
                }

                public static var gameCenterAppVersion: Self {
                    .init(rawValue: "gameCenterAppVersion")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var releaseType: Self {
                    .init(rawValue: "releaseType")
                }

                public static var reviewType: Self {
                    .init(rawValue: "reviewType")
                }

                public static var routingAppCoverage: Self {
                    .init(rawValue: "routingAppCoverage")
                }

                public static var usesIdfa: Self {
                    .init(rawValue: "usesIdfa")
                }

                public static var versionString: Self {
                    .init(rawValue: "versionString")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Apps: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var accessibilityDeclarations: Self {
                    .init(rawValue: "accessibilityDeclarations")
                }

                public static var accessibilityUrl: Self {
                    .init(rawValue: "accessibilityUrl")
                }

                public static var alternativeDistributionKey: Self {
                    .init(rawValue: "alternativeDistributionKey")
                }

                public static var analyticsReportRequests: Self {
                    .init(rawValue: "analyticsReportRequests")
                }

                public static var appAvailabilityV2: Self {
                    .init(rawValue: "appAvailabilityV2")
                }

                public static var appClips: Self {
                    .init(rawValue: "appClips")
                }

                public static var appCustomProductPages: Self {
                    .init(rawValue: "appCustomProductPages")
                }

                public static var appEncryptionDeclarations: Self {
                    .init(rawValue: "appEncryptionDeclarations")
                }

                public static var appEvents: Self {
                    .init(rawValue: "appEvents")
                }

                public static var appInfos: Self {
                    .init(rawValue: "appInfos")
                }

                public static var appPricePoints: Self {
                    .init(rawValue: "appPricePoints")
                }

                public static var appPriceSchedule: Self {
                    .init(rawValue: "appPriceSchedule")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersions: Self {
                    .init(rawValue: "appStoreVersions")
                }

                public static var backgroundAssets: Self {
                    .init(rawValue: "backgroundAssets")
                }

                public static var betaAppLocalizations: Self {
                    .init(rawValue: "betaAppLocalizations")
                }

                public static var betaAppReviewDetail: Self {
                    .init(rawValue: "betaAppReviewDetail")
                }

                public static var betaFeedbackCrashSubmissions: Self {
                    .init(rawValue: "betaFeedbackCrashSubmissions")
                }

                public static var betaFeedbackScreenshotSubmissions: Self {
                    .init(rawValue: "betaFeedbackScreenshotSubmissions")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var betaLicenseAgreement: Self {
                    .init(rawValue: "betaLicenseAgreement")
                }

                public static var betaTesters: Self {
                    .init(rawValue: "betaTesters")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public static var ciProduct: Self {
                    .init(rawValue: "ciProduct")
                }

                public static var contentRightsDeclaration: Self {
                    .init(rawValue: "contentRightsDeclaration")
                }

                public static var customerReviewSummarizations: Self {
                    .init(rawValue: "customerReviewSummarizations")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var endUserLicenseAgreement: Self {
                    .init(rawValue: "endUserLicenseAgreement")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterEnabledVersions: Self {
                    .init(rawValue: "gameCenterEnabledVersions")
                }

                public static var inAppPurchases: Self {
                    .init(rawValue: "inAppPurchases")
                }

                public static var inAppPurchasesV2: Self {
                    .init(rawValue: "inAppPurchasesV2")
                }

                public static var isOrEverWasMadeForKids: Self {
                    .init(rawValue: "isOrEverWasMadeForKids")
                }

                public static var marketplaceSearchDetail: Self {
                    .init(rawValue: "marketplaceSearchDetail")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var perfPowerMetrics: Self {
                    .init(rawValue: "perfPowerMetrics")
                }

                public static var preReleaseVersions: Self {
                    .init(rawValue: "preReleaseVersions")
                }

                public static var primaryLocale: Self {
                    .init(rawValue: "primaryLocale")
                }

                public static var promotedPurchases: Self {
                    .init(rawValue: "promotedPurchases")
                }

                public static var reviewSubmissions: Self {
                    .init(rawValue: "reviewSubmissions")
                }

                public static var sku: Self {
                    .init(rawValue: "sku")
                }

                public static var streamlinedPurchasingEnabled: Self {
                    .init(rawValue: "streamlinedPurchasingEnabled")
                }

                public static var subscriptionGracePeriod: Self {
                    .init(rawValue: "subscriptionGracePeriod")
                }

                public static var subscriptionGroups: Self {
                    .init(rawValue: "subscriptionGroups")
                }

                public static var subscriptionStatusUrl: Self {
                    .init(rawValue: "subscriptionStatusUrl")
                }

                public static var subscriptionStatusUrlForSandbox: Self {
                    .init(rawValue: "subscriptionStatusUrlForSandbox")
                }

                public static var subscriptionStatusUrlVersion: Self {
                    .init(rawValue: "subscriptionStatusUrlVersion")
                }

                public static var subscriptionStatusUrlVersionForSandbox: Self {
                    .init(rawValue: "subscriptionStatusUrlVersionForSandbox")
                }

                public static var webhooks: Self {
                    .init(rawValue: "webhooks")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaAppLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var description: Self {
                    .init(rawValue: "description")
                }

                public static var feedbackEmail: Self {
                    .init(rawValue: "feedbackEmail")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var marketingUrl: Self {
                    .init(rawValue: "marketingUrl")
                }

                public static var privacyPolicyUrl: Self {
                    .init(rawValue: "privacyPolicyUrl")
                }

                public static var tvOsPrivacyPolicy: Self {
                    .init(rawValue: "tvOsPrivacyPolicy")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaAppReviewDetails: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var contactEmail: Self {
                    .init(rawValue: "contactEmail")
                }

                public static var contactFirstName: Self {
                    .init(rawValue: "contactFirstName")
                }

                public static var contactLastName: Self {
                    .init(rawValue: "contactLastName")
                }

                public static var contactPhone: Self {
                    .init(rawValue: "contactPhone")
                }

                public static var demoAccountName: Self {
                    .init(rawValue: "demoAccountName")
                }

                public static var demoAccountPassword: Self {
                    .init(rawValue: "demoAccountPassword")
                }

                public static var demoAccountRequired: Self {
                    .init(rawValue: "demoAccountRequired")
                }

                public static var notes: Self {
                    .init(rawValue: "notes")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaGroups: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var betaRecruitmentCriteria: Self {
                    .init(rawValue: "betaRecruitmentCriteria")
                }

                public static var betaRecruitmentCriterionCompatibleBuildCheck: Self {
                    .init(rawValue: "betaRecruitmentCriterionCompatibleBuildCheck")
                }

                public static var betaTesters: Self {
                    .init(rawValue: "betaTesters")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var feedbackEnabled: Self {
                    .init(rawValue: "feedbackEnabled")
                }

                public static var hasAccessToAllBuilds: Self {
                    .init(rawValue: "hasAccessToAllBuilds")
                }

                public static var iosBuildsAvailableForAppleSiliconMac: Self {
                    .init(rawValue: "iosBuildsAvailableForAppleSiliconMac")
                }

                public static var iosBuildsAvailableForAppleVision: Self {
                    .init(rawValue: "iosBuildsAvailableForAppleVision")
                }

                public static var isInternalGroup: Self {
                    .init(rawValue: "isInternalGroup")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var publicLink: Self {
                    .init(rawValue: "publicLink")
                }

                public static var publicLinkEnabled: Self {
                    .init(rawValue: "publicLinkEnabled")
                }

                public static var publicLinkId: Self {
                    .init(rawValue: "publicLinkId")
                }

                public static var publicLinkLimit: Self {
                    .init(rawValue: "publicLinkLimit")
                }

                public static var publicLinkLimitEnabled: Self {
                    .init(rawValue: "publicLinkLimitEnabled")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaLicenseAgreements: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var agreementText: Self {
                    .init(rawValue: "agreementText")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Builds: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appEncryptionDeclaration: Self {
                    .init(rawValue: "appEncryptionDeclaration")
                }

                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var betaAppReviewSubmission: Self {
                    .init(rawValue: "betaAppReviewSubmission")
                }

                public static var betaBuildLocalizations: Self {
                    .init(rawValue: "betaBuildLocalizations")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var buildAudienceType: Self {
                    .init(rawValue: "buildAudienceType")
                }

                public static var buildBetaDetail: Self {
                    .init(rawValue: "buildBetaDetail")
                }

                public static var buildBundles: Self {
                    .init(rawValue: "buildBundles")
                }

                public static var computedMinMacOsVersion: Self {
                    .init(rawValue: "computedMinMacOsVersion")
                }

                public static var computedMinVisionOsVersion: Self {
                    .init(rawValue: "computedMinVisionOsVersion")
                }

                public static var diagnosticSignatures: Self {
                    .init(rawValue: "diagnosticSignatures")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var expired: Self {
                    .init(rawValue: "expired")
                }

                public static var iconAssetToken: Self {
                    .init(rawValue: "iconAssetToken")
                }

                public static var icons: Self {
                    .init(rawValue: "icons")
                }

                public static var individualTesters: Self {
                    .init(rawValue: "individualTesters")
                }

                public static var lsMinimumSystemVersion: Self {
                    .init(rawValue: "lsMinimumSystemVersion")
                }

                public static var minOsVersion: Self {
                    .init(rawValue: "minOsVersion")
                }

                public static var perfPowerMetrics: Self {
                    .init(rawValue: "perfPowerMetrics")
                }

                public static var preReleaseVersion: Self {
                    .init(rawValue: "preReleaseVersion")
                }

                public static var processingState: Self {
                    .init(rawValue: "processingState")
                }

                public static var uploadedDate: Self {
                    .init(rawValue: "uploadedDate")
                }

                public static var usesNonExemptEncryption: Self {
                    .init(rawValue: "usesNonExemptEncryption")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct CiProducts: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var additionalRepositories: Self {
                    .init(rawValue: "additionalRepositories")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var buildRuns: Self {
                    .init(rawValue: "buildRuns")
                }

                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var primaryRepositories: Self {
                    .init(rawValue: "primaryRepositories")
                }

                public static var productType: Self {
                    .init(rawValue: "productType")
                }

                public static var workflows: Self {
                    .init(rawValue: "workflows")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct EndUserLicenseAgreements: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var agreementText: Self {
                    .init(rawValue: "agreementText")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var territories: Self {
                    .init(rawValue: "territories")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterDetails: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var achievementReleases: Self {
                    .init(rawValue: "achievementReleases")
                }

                public static var activityReleases: Self {
                    .init(rawValue: "activityReleases")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var arcadeEnabled: Self {
                    .init(rawValue: "arcadeEnabled")
                }

                public static var challengeEnabled: Self {
                    .init(rawValue: "challengeEnabled")
                }

                public static var challengeReleases: Self {
                    .init(rawValue: "challengeReleases")
                }

                public static var challengesMinimumPlatformVersions: Self {
                    .init(rawValue: "challengesMinimumPlatformVersions")
                }

                public static var defaultGroupLeaderboard: Self {
                    .init(rawValue: "defaultGroupLeaderboard")
                }

                public static var defaultLeaderboard: Self {
                    .init(rawValue: "defaultLeaderboard")
                }

                public static var gameCenterAchievements: Self {
                    .init(rawValue: "gameCenterAchievements")
                }

                public static var gameCenterActivities: Self {
                    .init(rawValue: "gameCenterActivities")
                }

                public static var gameCenterAppVersions: Self {
                    .init(rawValue: "gameCenterAppVersions")
                }

                public static var gameCenterChallenges: Self {
                    .init(rawValue: "gameCenterChallenges")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var gameCenterLeaderboardSets: Self {
                    .init(rawValue: "gameCenterLeaderboardSets")
                }

                public static var gameCenterLeaderboards: Self {
                    .init(rawValue: "gameCenterLeaderboards")
                }

                public static var leaderboardReleases: Self {
                    .init(rawValue: "leaderboardReleases")
                }

                public static var leaderboardSetReleases: Self {
                    .init(rawValue: "leaderboardSetReleases")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterEnabledVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var compatibleVersions: Self {
                    .init(rawValue: "compatibleVersions")
                }

                public static var iconAsset: Self {
                    .init(rawValue: "iconAsset")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var versionString: Self {
                    .init(rawValue: "versionString")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct InAppPurchases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appStoreReviewScreenshot: Self {
                    .init(rawValue: "appStoreReviewScreenshot")
                }

                public static var apps: Self {
                    .init(rawValue: "apps")
                }

                public static var content: Self {
                    .init(rawValue: "content")
                }

                public static var contentHosting: Self {
                    .init(rawValue: "contentHosting")
                }

                public static var familySharable: Self {
                    .init(rawValue: "familySharable")
                }

                public static var iapPriceSchedule: Self {
                    .init(rawValue: "iapPriceSchedule")
                }

                public static var images: Self {
                    .init(rawValue: "images")
                }

                public static var inAppPurchaseAvailability: Self {
                    .init(rawValue: "inAppPurchaseAvailability")
                }

                public static var inAppPurchaseLocalizations: Self {
                    .init(rawValue: "inAppPurchaseLocalizations")
                }

                public static var inAppPurchaseType: Self {
                    .init(rawValue: "inAppPurchaseType")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var pricePoints: Self {
                    .init(rawValue: "pricePoints")
                }

                public static var productId: Self {
                    .init(rawValue: "productId")
                }

                public static var promotedPurchase: Self {
                    .init(rawValue: "promotedPurchase")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var reviewNote: Self {
                    .init(rawValue: "reviewNote")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct PreReleaseVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct PromotedPurchases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var enabled: Self {
                    .init(rawValue: "enabled")
                }

                public static var inAppPurchaseV2: Self {
                    .init(rawValue: "inAppPurchaseV2")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public static var visibleForAllUsers: Self {
                    .init(rawValue: "visibleForAllUsers")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct ReviewSubmissions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appStoreVersionForReview: Self {
                    .init(rawValue: "appStoreVersionForReview")
                }

                public static var items: Self {
                    .init(rawValue: "items")
                }

                public static var lastUpdatedByActor: Self {
                    .init(rawValue: "lastUpdatedByActor")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var submittedByActor: Self {
                    .init(rawValue: "submittedByActor")
                }

                public static var submittedDate: Self {
                    .init(rawValue: "submittedDate")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionGracePeriods: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var duration: Self {
                    .init(rawValue: "duration")
                }

                public static var optIn: Self {
                    .init(rawValue: "optIn")
                }

                public static var renewalType: Self {
                    .init(rawValue: "renewalType")
                }

                public static var sandboxOptIn: Self {
                    .init(rawValue: "sandboxOptIn")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionGroups: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var subscriptionGroupLocalizations: Self {
                    .init(rawValue: "subscriptionGroupLocalizations")
                }

                public static var subscriptions: Self {
                    .init(rawValue: "subscriptions")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appClips
                public static var appClips: Relation<[AppClips]?> {
                    .init(key: "fields[appClips]")
                }

                /// the fields to include for returned resources of type appCustomProductPages
                public static var appCustomProductPages: Relation<[AppCustomProductPages]?> {
                    .init(key: "fields[appCustomProductPages]")
                }

                /// the fields to include for returned resources of type appEncryptionDeclarations
                public static var appEncryptionDeclarations: Relation<[AppEncryptionDeclarations]?> {
                    .init(key: "fields[appEncryptionDeclarations]")
                }

                /// the fields to include for returned resources of type appEvents
                public static var appEvents: Relation<[AppEvents]?> {
                    .init(key: "fields[appEvents]")
                }

                /// the fields to include for returned resources of type appInfos
                public static var appInfos: Relation<[AppInfos]?> {
                    .init(key: "fields[appInfos]")
                }

                /// the fields to include for returned resources of type appStoreVersionExperiments
                public static var appStoreVersionExperiments: Relation<[AppStoreVersionExperiments]?> {
                    .init(key: "fields[appStoreVersionExperiments]")
                }

                /// the fields to include for returned resources of type appStoreVersions
                public static var appStoreVersions: Relation<[AppStoreVersions]?> {
                    .init(key: "fields[appStoreVersions]")
                }

                /// the fields to include for returned resources of type apps
                public static var apps: Relation<[Apps]?> {
                    .init(key: "fields[apps]")
                }

                /// the fields to include for returned resources of type betaAppLocalizations
                public static var betaAppLocalizations: Relation<[BetaAppLocalizations]?> {
                    .init(key: "fields[betaAppLocalizations]")
                }

                /// the fields to include for returned resources of type betaAppReviewDetails
                public static var betaAppReviewDetails: Relation<[BetaAppReviewDetails]?> {
                    .init(key: "fields[betaAppReviewDetails]")
                }

                /// the fields to include for returned resources of type betaGroups
                public static var betaGroups: Relation<[BetaGroups]?> {
                    .init(key: "fields[betaGroups]")
                }

                /// the fields to include for returned resources of type betaLicenseAgreements
                public static var betaLicenseAgreements: Relation<[BetaLicenseAgreements]?> {
                    .init(key: "fields[betaLicenseAgreements]")
                }

                /// the fields to include for returned resources of type builds
                public static var builds: Relation<[Builds]?> {
                    .init(key: "fields[builds]")
                }

                /// the fields to include for returned resources of type ciProducts
                public static var ciProducts: Relation<[CiProducts]?> {
                    .init(key: "fields[ciProducts]")
                }

                /// the fields to include for returned resources of type endUserLicenseAgreements
                public static var endUserLicenseAgreements: Relation<[EndUserLicenseAgreements]?> {
                    .init(key: "fields[endUserLicenseAgreements]")
                }

                /// the fields to include for returned resources of type gameCenterDetails
                public static var gameCenterDetails: Relation<[GameCenterDetails]?> {
                    .init(key: "fields[gameCenterDetails]")
                }

                /// the fields to include for returned resources of type gameCenterEnabledVersions
                public static var gameCenterEnabledVersions: Relation<[GameCenterEnabledVersions]?> {
                    .init(key: "fields[gameCenterEnabledVersions]")
                }

                /// the fields to include for returned resources of type inAppPurchases
                public static var inAppPurchases: Relation<[InAppPurchases]?> {
                    .init(key: "fields[inAppPurchases]")
                }

                /// the fields to include for returned resources of type preReleaseVersions
                public static var preReleaseVersions: Relation<[PreReleaseVersions]?> {
                    .init(key: "fields[preReleaseVersions]")
                }

                /// the fields to include for returned resources of type promotedPurchases
                public static var promotedPurchases: Relation<[PromotedPurchases]?> {
                    .init(key: "fields[promotedPurchases]")
                }

                /// the fields to include for returned resources of type reviewSubmissions
                public static var reviewSubmissions: Relation<[ReviewSubmissions]?> {
                    .init(key: "fields[reviewSubmissions]")
                }

                /// the fields to include for returned resources of type subscriptionGracePeriods
                public static var subscriptionGracePeriods: Relation<[SubscriptionGracePeriods]?> {
                    .init(key: "fields[subscriptionGracePeriods]")
                }

                /// the fields to include for returned resources of type subscriptionGroups
                public static var subscriptionGroups: Relation<[SubscriptionGroups]?> {
                    .init(key: "fields[subscriptionGroups]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appClips: Self {
                .init(rawValue: "appClips")
            }

            public static var appCustomProductPages: Self {
                .init(rawValue: "appCustomProductPages")
            }

            public static var appEncryptionDeclarations: Self {
                .init(rawValue: "appEncryptionDeclarations")
            }

            public static var appEvents: Self {
                .init(rawValue: "appEvents")
            }

            public static var appInfos: Self {
                .init(rawValue: "appInfos")
            }

            public static var appStoreVersionExperimentsV2: Self {
                .init(rawValue: "appStoreVersionExperimentsV2")
            }

            public static var appStoreVersions: Self {
                .init(rawValue: "appStoreVersions")
            }

            public static var betaAppLocalizations: Self {
                .init(rawValue: "betaAppLocalizations")
            }

            public static var betaAppReviewDetail: Self {
                .init(rawValue: "betaAppReviewDetail")
            }

            public static var betaGroups: Self {
                .init(rawValue: "betaGroups")
            }

            public static var betaLicenseAgreement: Self {
                .init(rawValue: "betaLicenseAgreement")
            }

            public static var builds: Self {
                .init(rawValue: "builds")
            }

            public static var ciProduct: Self {
                .init(rawValue: "ciProduct")
            }

            public static var endUserLicenseAgreement: Self {
                .init(rawValue: "endUserLicenseAgreement")
            }

            public static var gameCenterDetail: Self {
                .init(rawValue: "gameCenterDetail")
            }

            public static var gameCenterEnabledVersions: Self {
                .init(rawValue: "gameCenterEnabledVersions")
            }

            public static var inAppPurchases: Self {
                .init(rawValue: "inAppPurchases")
            }

            public static var inAppPurchasesV2: Self {
                .init(rawValue: "inAppPurchasesV2")
            }

            public static var preReleaseVersions: Self {
                .init(rawValue: "preReleaseVersions")
            }

            public static var promotedPurchases: Self {
                .init(rawValue: "promotedPurchases")
            }

            public static var reviewSubmissions: Self {
                .init(rawValue: "reviewSubmissions")
            }

            public static var subscriptionGracePeriod: Self {
                .init(rawValue: "subscriptionGracePeriod")
            }

            public static var subscriptionGroups: Self {
                .init(rawValue: "subscriptionGroups")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related appClips returned (when they are included)
                public static var appClips: Relation<Int?> {
                    .init(key: "limit[appClips]")
                }

                /// maximum number of related appCustomProductPages returned (when they are included)
                public static var appCustomProductPages: Relation<Int?> {
                    .init(key: "limit[appCustomProductPages]")
                }

                /// maximum number of related appEncryptionDeclarations returned (when they are included)
                public static var appEncryptionDeclarations: Relation<Int?> {
                    .init(key: "limit[appEncryptionDeclarations]")
                }

                /// maximum number of related appEvents returned (when they are included)
                public static var appEvents: Relation<Int?> {
                    .init(key: "limit[appEvents]")
                }

                /// maximum number of related appInfos returned (when they are included)
                public static var appInfos: Relation<Int?> {
                    .init(key: "limit[appInfos]")
                }

                /// maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
                public static var appStoreVersionExperimentsV2: Relation<Int?> {
                    .init(key: "limit[appStoreVersionExperimentsV2]")
                }

                /// maximum number of related appStoreVersions returned (when they are included)
                public static var appStoreVersions: Relation<Int?> {
                    .init(key: "limit[appStoreVersions]")
                }

                /// maximum number of related betaAppLocalizations returned (when they are included)
                public static var betaAppLocalizations: Relation<Int?> {
                    .init(key: "limit[betaAppLocalizations]")
                }

                /// maximum number of related betaGroups returned (when they are included)
                public static var betaGroups: Relation<Int?> {
                    .init(key: "limit[betaGroups]")
                }

                /// maximum number of related builds returned (when they are included)
                public static var builds: Relation<Int?> {
                    .init(key: "limit[builds]")
                }

                /// maximum number of related gameCenterEnabledVersions returned (when they are included)
                public static var gameCenterEnabledVersions: Relation<Int?> {
                    .init(key: "limit[gameCenterEnabledVersions]")
                }

                /// maximum number of related inAppPurchasesV2 returned (when they are included)
                public static var inAppPurchasesV2: Relation<Int?> {
                    .init(key: "limit[inAppPurchasesV2]")
                }

                /// maximum number of related inAppPurchases returned (when they are included)
                public static var inAppPurchases: Relation<Int?> {
                    .init(key: "limit[inAppPurchases]")
                }

                /// maximum number of related preReleaseVersions returned (when they are included)
                public static var preReleaseVersions: Relation<Int?> {
                    .init(key: "limit[preReleaseVersions]")
                }

                /// maximum number of related promotedPurchases returned (when they are included)
                public static var promotedPurchases: Relation<Int?> {
                    .init(key: "limit[promotedPurchases]")
                }

                /// maximum number of related reviewSubmissions returned (when they are included)
                public static var reviewSubmissions: Relation<Int?> {
                    .init(key: "limit[reviewSubmissions]")
                }

                /// maximum number of related subscriptionGroups returned (when they are included)
                public static var subscriptionGroups: Relation<Int?> {
                    .init(key: "limit[subscriptionGroups]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
