// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Apps {
    public struct GET: Endpoint {
        public typealias Response = AppsResponse

        public var path: String {
            "/v1/apps"
        }

        public var parameters: Parameters = Parameters()

        public init() {

        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "exists[gameCenterEnabledVersions]",
                             value: parameters.exists[.gameCenterEnabledVersions].map { "\($0)" }),
                URLQueryItem(name: "fields[appAvailabilities]",
                             value: parameters.fields[.appAvailabilities]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appClips]",
                             value: parameters.fields[.appClips]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appCustomProductPages]",
                             value: parameters.fields[.appCustomProductPages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appEvents]",
                             value: parameters.fields[.appEvents]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appInfos]",
                             value: parameters.fields[.appInfos]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPreOrders]",
                             value: parameters.fields[.appPreOrders]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPricePoints]",
                             value: parameters.fields[.appPricePoints]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPriceSchedules]",
                             value: parameters.fields[.appPriceSchedules]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPrices]",
                             value: parameters.fields[.appPrices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionExperiments]",
                             value: parameters.fields[.appStoreVersionExperiments]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[apps]",
                             value: parameters.fields[.apps]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaAppLocalizations]",
                             value: parameters.fields[.betaAppLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaAppReviewDetails]",
                             value: parameters.fields[.betaAppReviewDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaGroups]",
                             value: parameters.fields[.betaGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaLicenseAgreements]",
                             value: parameters.fields[.betaLicenseAgreements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[builds]",
                             value: parameters.fields[.builds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciProducts]",
                             value: parameters.fields[.ciProducts]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[customerReviews]",
                             value: parameters.fields[.customerReviews]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[endUserLicenseAgreements]",
                             value: parameters.fields[.endUserLicenseAgreements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterEnabledVersions]",
                             value: parameters.fields[.gameCenterEnabledVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[inAppPurchases]",
                             value: parameters.fields[.inAppPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[perfPowerMetrics]",
                             value: parameters.fields[.perfPowerMetrics]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[preReleaseVersions]",
                             value: parameters.fields[.preReleaseVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[promotedPurchases]",
                             value: parameters.fields[.promotedPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[reviewSubmissions]",
                             value: parameters.fields[.reviewSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionGracePeriods]",
                             value: parameters.fields[.subscriptionGracePeriods]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionGroups]",
                             value: parameters.fields[.subscriptionGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[territories]",
                             value: parameters.fields[.territories]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[appStoreVersions.appStoreState]",
                             value: parameters.filter[.appStoreVersionsAppStoreState]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[appStoreVersions.platform]",
                             value: parameters.filter[.appStoreVersionsPlatform]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[appStoreVersions]",
                             value: parameters.filter[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[bundleId]",
                             value: parameters.filter[.bundleId]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[id]",
                             value: parameters.filter[.id]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[name]",
                             value: parameters.filter[.name]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[sku]",
                             value: parameters.filter[.sku]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appClips]",
                             value: parameters.limit[.appClips].map { "\($0)" }),
                URLQueryItem(name: "limit[appCustomProductPages]",
                             value: parameters.limit[.appCustomProductPages].map { "\($0)" }),
                URLQueryItem(name: "limit[appEvents]",
                             value: parameters.limit[.appEvents].map { "\($0)" }),
                URLQueryItem(name: "limit[appInfos]",
                             value: parameters.limit[.appInfos].map { "\($0)" }),
                URLQueryItem(name: "limit[appStoreVersionExperimentsV2]",
                             value: parameters.limit[.appStoreVersionExperimentsV2].map { "\($0)" }),
                URLQueryItem(name: "limit[appStoreVersions]",
                             value: parameters.limit[.appStoreVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[availableTerritories]",
                             value: parameters.limit[.availableTerritories].map { "\($0)" }),
                URLQueryItem(name: "limit[betaAppLocalizations]",
                             value: parameters.limit[.betaAppLocalizations].map { "\($0)" }),
                URLQueryItem(name: "limit[betaGroups]",
                             value: parameters.limit[.betaGroups].map { "\($0)" }),
                URLQueryItem(name: "limit[builds]",
                             value: parameters.limit[.builds].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterEnabledVersions]",
                             value: parameters.limit[.gameCenterEnabledVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[inAppPurchasesV2]",
                             value: parameters.limit[.inAppPurchasesV2].map { "\($0)" }),
                URLQueryItem(name: "limit[inAppPurchases]",
                             value: parameters.limit[.inAppPurchases].map { "\($0)" }),
                URLQueryItem(name: "limit[preReleaseVersions]",
                             value: parameters.limit[.preReleaseVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[prices]",
                             value: parameters.limit[.prices].map { "\($0)" }),
                URLQueryItem(name: "limit[promotedPurchases]",
                             value: parameters.limit[.promotedPurchases].map { "\($0)" }),
                URLQueryItem(name: "limit[reviewSubmissions]",
                             value: parameters.limit[.reviewSubmissions].map { "\($0)" }),
                URLQueryItem(name: "limit[subscriptionGroups]",
                             value: parameters.limit[.subscriptionGroups].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of Apps as `AppsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Apps.GET {
    public struct Parameters: Hashable {
        public var exists: Exists = Exists()

        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Exists: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum AppAvailabilities: Hashable, Codable, RawRepresentable {
                case app
                case availableInNewTerritories
                case availableTerritories
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .availableInNewTerritories: return "availableInNewTerritories"
                    case .availableTerritories: return "availableTerritories"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "availableInNewTerritories": self = .availableInNewTerritories
                    case "availableTerritories": self = .availableTerritories
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppClips: Hashable, Codable, RawRepresentable {
                case app
                case appClipAdvancedExperiences
                case appClipDefaultExperiences
                case bundleId
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appClipAdvancedExperiences: return "appClipAdvancedExperiences"
                    case .appClipDefaultExperiences: return "appClipDefaultExperiences"
                    case .bundleId: return "bundleId"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appClipAdvancedExperiences": self = .appClipAdvancedExperiences
                    case "appClipDefaultExperiences": self = .appClipDefaultExperiences
                    case "bundleId": self = .bundleId
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppCustomProductPages: Hashable, Codable, RawRepresentable {
                case app
                case appCustomProductPageVersions
                case appStoreVersionTemplate
                case customProductPageTemplate
                case name
                case url
                case visible
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appCustomProductPageVersions: return "appCustomProductPageVersions"
                    case .appStoreVersionTemplate: return "appStoreVersionTemplate"
                    case .customProductPageTemplate: return "customProductPageTemplate"
                    case .name: return "name"
                    case .url: return "url"
                    case .visible: return "visible"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appCustomProductPageVersions": self = .appCustomProductPageVersions
                    case "appStoreVersionTemplate": self = .appStoreVersionTemplate
                    case "customProductPageTemplate": self = .customProductPageTemplate
                    case "name": self = .name
                    case "url": self = .url
                    case "visible": self = .visible
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppEvents: Hashable, Codable, RawRepresentable {
                case app
                case archivedTerritorySchedules
                case badge
                case deepLink
                case eventState
                case localizations
                case primaryLocale
                case priority
                case purchaseRequirement
                case purpose
                case referenceName
                case territorySchedules
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .archivedTerritorySchedules: return "archivedTerritorySchedules"
                    case .badge: return "badge"
                    case .deepLink: return "deepLink"
                    case .eventState: return "eventState"
                    case .localizations: return "localizations"
                    case .primaryLocale: return "primaryLocale"
                    case .priority: return "priority"
                    case .purchaseRequirement: return "purchaseRequirement"
                    case .purpose: return "purpose"
                    case .referenceName: return "referenceName"
                    case .territorySchedules: return "territorySchedules"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "archivedTerritorySchedules": self = .archivedTerritorySchedules
                    case "badge": self = .badge
                    case "deepLink": self = .deepLink
                    case "eventState": self = .eventState
                    case "localizations": self = .localizations
                    case "primaryLocale": self = .primaryLocale
                    case "priority": self = .priority
                    case "purchaseRequirement": self = .purchaseRequirement
                    case "purpose": self = .purpose
                    case "referenceName": self = .referenceName
                    case "territorySchedules": self = .territorySchedules
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppInfos: Hashable, Codable, RawRepresentable {
                case ageRatingDeclaration
                case app
                case appInfoLocalizations
                case appStoreAgeRating
                case appStoreState
                case brazilAgeRating
                case brazilAgeRatingV2
                case kidsAgeBand
                case primaryCategory
                case primarySubcategoryOne
                case primarySubcategoryTwo
                case secondaryCategory
                case secondarySubcategoryOne
                case secondarySubcategoryTwo
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .ageRatingDeclaration: return "ageRatingDeclaration"
                    case .app: return "app"
                    case .appInfoLocalizations: return "appInfoLocalizations"
                    case .appStoreAgeRating: return "appStoreAgeRating"
                    case .appStoreState: return "appStoreState"
                    case .brazilAgeRating: return "brazilAgeRating"
                    case .brazilAgeRatingV2: return "brazilAgeRatingV2"
                    case .kidsAgeBand: return "kidsAgeBand"
                    case .primaryCategory: return "primaryCategory"
                    case .primarySubcategoryOne: return "primarySubcategoryOne"
                    case .primarySubcategoryTwo: return "primarySubcategoryTwo"
                    case .secondaryCategory: return "secondaryCategory"
                    case .secondarySubcategoryOne: return "secondarySubcategoryOne"
                    case .secondarySubcategoryTwo: return "secondarySubcategoryTwo"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ageRatingDeclaration": self = .ageRatingDeclaration
                    case "app": self = .app
                    case "appInfoLocalizations": self = .appInfoLocalizations
                    case "appStoreAgeRating": self = .appStoreAgeRating
                    case "appStoreState": self = .appStoreState
                    case "brazilAgeRating": self = .brazilAgeRating
                    case "brazilAgeRatingV2": self = .brazilAgeRatingV2
                    case "kidsAgeBand": self = .kidsAgeBand
                    case "primaryCategory": self = .primaryCategory
                    case "primarySubcategoryOne": self = .primarySubcategoryOne
                    case "primarySubcategoryTwo": self = .primarySubcategoryTwo
                    case "secondaryCategory": self = .secondaryCategory
                    case "secondarySubcategoryOne": self = .secondarySubcategoryOne
                    case "secondarySubcategoryTwo": self = .secondarySubcategoryTwo
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppPreOrders: Hashable, Codable, RawRepresentable {
                case app
                case appReleaseDate
                case preOrderAvailableDate
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appReleaseDate: return "appReleaseDate"
                    case .preOrderAvailableDate: return "preOrderAvailableDate"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appReleaseDate": self = .appReleaseDate
                    case "preOrderAvailableDate": self = .preOrderAvailableDate
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppPricePoints: Hashable, Codable, RawRepresentable {
                case app
                case customerPrice
                case priceTier
                case proceeds
                case territory
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .customerPrice: return "customerPrice"
                    case .priceTier: return "priceTier"
                    case .proceeds: return "proceeds"
                    case .territory: return "territory"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "customerPrice": self = .customerPrice
                    case "priceTier": self = .priceTier
                    case "proceeds": self = .proceeds
                    case "territory": self = .territory
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppPriceSchedules: Hashable, Codable, RawRepresentable {
                case app
                case automaticPrices
                case baseTerritory
                case manualPrices
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .automaticPrices: return "automaticPrices"
                    case .baseTerritory: return "baseTerritory"
                    case .manualPrices: return "manualPrices"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "automaticPrices": self = .automaticPrices
                    case "baseTerritory": self = .baseTerritory
                    case "manualPrices": self = .manualPrices
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppPrices: Hashable, Codable, RawRepresentable {
                case app
                case priceTier
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .priceTier: return "priceTier"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "priceTier": self = .priceTier
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersionExperiments: Hashable, Codable, RawRepresentable {
                case app
                case appStoreVersionExperimentTreatments
                case controlVersions
                case endDate
                case latestControlVersion
                case name
                case platform
                case reviewRequired
                case startDate
                case started
                case state
                case trafficProportion
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appStoreVersionExperimentTreatments: return "appStoreVersionExperimentTreatments"
                    case .controlVersions: return "controlVersions"
                    case .endDate: return "endDate"
                    case .latestControlVersion: return "latestControlVersion"
                    case .name: return "name"
                    case .platform: return "platform"
                    case .reviewRequired: return "reviewRequired"
                    case .startDate: return "startDate"
                    case .started: return "started"
                    case .state: return "state"
                    case .trafficProportion: return "trafficProportion"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appStoreVersionExperimentTreatments": self = .appStoreVersionExperimentTreatments
                    case "controlVersions": self = .controlVersions
                    case "endDate": self = .endDate
                    case "latestControlVersion": self = .latestControlVersion
                    case "name": self = .name
                    case "platform": self = .platform
                    case "reviewRequired": self = .reviewRequired
                    case "startDate": self = .startDate
                    case "started": self = .started
                    case "state": self = .state
                    case "trafficProportion": self = .trafficProportion
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersions: Hashable, Codable, RawRepresentable {
                case ageRatingDeclaration
                case app
                case appClipDefaultExperience
                case appStoreReviewDetail
                case appStoreState
                case appStoreVersionExperiments
                case appStoreVersionExperimentsV2
                case appStoreVersionLocalizations
                case appStoreVersionPhasedRelease
                case appStoreVersionSubmission
                case build
                case copyright
                case createdDate
                case customerReviews
                case downloadable
                case earliestReleaseDate
                case platform
                case releaseType
                case routingAppCoverage
                case versionString
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .ageRatingDeclaration: return "ageRatingDeclaration"
                    case .app: return "app"
                    case .appClipDefaultExperience: return "appClipDefaultExperience"
                    case .appStoreReviewDetail: return "appStoreReviewDetail"
                    case .appStoreState: return "appStoreState"
                    case .appStoreVersionExperiments: return "appStoreVersionExperiments"
                    case .appStoreVersionExperimentsV2: return "appStoreVersionExperimentsV2"
                    case .appStoreVersionLocalizations: return "appStoreVersionLocalizations"
                    case .appStoreVersionPhasedRelease: return "appStoreVersionPhasedRelease"
                    case .appStoreVersionSubmission: return "appStoreVersionSubmission"
                    case .build: return "build"
                    case .copyright: return "copyright"
                    case .createdDate: return "createdDate"
                    case .customerReviews: return "customerReviews"
                    case .downloadable: return "downloadable"
                    case .earliestReleaseDate: return "earliestReleaseDate"
                    case .platform: return "platform"
                    case .releaseType: return "releaseType"
                    case .routingAppCoverage: return "routingAppCoverage"
                    case .versionString: return "versionString"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ageRatingDeclaration": self = .ageRatingDeclaration
                    case "app": self = .app
                    case "appClipDefaultExperience": self = .appClipDefaultExperience
                    case "appStoreReviewDetail": self = .appStoreReviewDetail
                    case "appStoreState": self = .appStoreState
                    case "appStoreVersionExperiments": self = .appStoreVersionExperiments
                    case "appStoreVersionExperimentsV2": self = .appStoreVersionExperimentsV2
                    case "appStoreVersionLocalizations": self = .appStoreVersionLocalizations
                    case "appStoreVersionPhasedRelease": self = .appStoreVersionPhasedRelease
                    case "appStoreVersionSubmission": self = .appStoreVersionSubmission
                    case "build": self = .build
                    case "copyright": self = .copyright
                    case "createdDate": self = .createdDate
                    case "customerReviews": self = .customerReviews
                    case "downloadable": self = .downloadable
                    case "earliestReleaseDate": self = .earliestReleaseDate
                    case "platform": self = .platform
                    case "releaseType": self = .releaseType
                    case "routingAppCoverage": self = .routingAppCoverage
                    case "versionString": self = .versionString
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Apps: Hashable, Codable, RawRepresentable {
                case appAvailability
                case appClips
                case appCustomProductPages
                case appEvents
                case appInfos
                case appPricePoints
                case appPriceSchedule
                case appStoreVersionExperimentsV2
                case appStoreVersions
                case availableInNewTerritories
                case availableTerritories
                case betaAppLocalizations
                case betaAppReviewDetail
                case betaGroups
                case betaLicenseAgreement
                case betaTesters
                case builds
                case bundleId
                case ciProduct
                case contentRightsDeclaration
                case customerReviews
                case endUserLicenseAgreement
                case gameCenterEnabledVersions
                case inAppPurchases
                case inAppPurchasesV2
                case isOrEverWasMadeForKids
                case name
                case perfPowerMetrics
                case preOrder
                case preReleaseVersions
                case pricePoints
                case prices
                case primaryLocale
                case promotedPurchases
                case reviewSubmissions
                case sku
                case subscriptionGracePeriod
                case subscriptionGroups
                case subscriptionStatusUrl
                case subscriptionStatusUrlForSandbox
                case subscriptionStatusUrlVersion
                case subscriptionStatusUrlVersionForSandbox
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appAvailability: return "appAvailability"
                    case .appClips: return "appClips"
                    case .appCustomProductPages: return "appCustomProductPages"
                    case .appEvents: return "appEvents"
                    case .appInfos: return "appInfos"
                    case .appPricePoints: return "appPricePoints"
                    case .appPriceSchedule: return "appPriceSchedule"
                    case .appStoreVersionExperimentsV2: return "appStoreVersionExperimentsV2"
                    case .appStoreVersions: return "appStoreVersions"
                    case .availableInNewTerritories: return "availableInNewTerritories"
                    case .availableTerritories: return "availableTerritories"
                    case .betaAppLocalizations: return "betaAppLocalizations"
                    case .betaAppReviewDetail: return "betaAppReviewDetail"
                    case .betaGroups: return "betaGroups"
                    case .betaLicenseAgreement: return "betaLicenseAgreement"
                    case .betaTesters: return "betaTesters"
                    case .builds: return "builds"
                    case .bundleId: return "bundleId"
                    case .ciProduct: return "ciProduct"
                    case .contentRightsDeclaration: return "contentRightsDeclaration"
                    case .customerReviews: return "customerReviews"
                    case .endUserLicenseAgreement: return "endUserLicenseAgreement"
                    case .gameCenterEnabledVersions: return "gameCenterEnabledVersions"
                    case .inAppPurchases: return "inAppPurchases"
                    case .inAppPurchasesV2: return "inAppPurchasesV2"
                    case .isOrEverWasMadeForKids: return "isOrEverWasMadeForKids"
                    case .name: return "name"
                    case .perfPowerMetrics: return "perfPowerMetrics"
                    case .preOrder: return "preOrder"
                    case .preReleaseVersions: return "preReleaseVersions"
                    case .pricePoints: return "pricePoints"
                    case .prices: return "prices"
                    case .primaryLocale: return "primaryLocale"
                    case .promotedPurchases: return "promotedPurchases"
                    case .reviewSubmissions: return "reviewSubmissions"
                    case .sku: return "sku"
                    case .subscriptionGracePeriod: return "subscriptionGracePeriod"
                    case .subscriptionGroups: return "subscriptionGroups"
                    case .subscriptionStatusUrl: return "subscriptionStatusUrl"
                    case .subscriptionStatusUrlForSandbox: return "subscriptionStatusUrlForSandbox"
                    case .subscriptionStatusUrlVersion: return "subscriptionStatusUrlVersion"
                    case .subscriptionStatusUrlVersionForSandbox: return "subscriptionStatusUrlVersionForSandbox"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appAvailability": self = .appAvailability
                    case "appClips": self = .appClips
                    case "appCustomProductPages": self = .appCustomProductPages
                    case "appEvents": self = .appEvents
                    case "appInfos": self = .appInfos
                    case "appPricePoints": self = .appPricePoints
                    case "appPriceSchedule": self = .appPriceSchedule
                    case "appStoreVersionExperimentsV2": self = .appStoreVersionExperimentsV2
                    case "appStoreVersions": self = .appStoreVersions
                    case "availableInNewTerritories": self = .availableInNewTerritories
                    case "availableTerritories": self = .availableTerritories
                    case "betaAppLocalizations": self = .betaAppLocalizations
                    case "betaAppReviewDetail": self = .betaAppReviewDetail
                    case "betaGroups": self = .betaGroups
                    case "betaLicenseAgreement": self = .betaLicenseAgreement
                    case "betaTesters": self = .betaTesters
                    case "builds": self = .builds
                    case "bundleId": self = .bundleId
                    case "ciProduct": self = .ciProduct
                    case "contentRightsDeclaration": self = .contentRightsDeclaration
                    case "customerReviews": self = .customerReviews
                    case "endUserLicenseAgreement": self = .endUserLicenseAgreement
                    case "gameCenterEnabledVersions": self = .gameCenterEnabledVersions
                    case "inAppPurchases": self = .inAppPurchases
                    case "inAppPurchasesV2": self = .inAppPurchasesV2
                    case "isOrEverWasMadeForKids": self = .isOrEverWasMadeForKids
                    case "name": self = .name
                    case "perfPowerMetrics": self = .perfPowerMetrics
                    case "preOrder": self = .preOrder
                    case "preReleaseVersions": self = .preReleaseVersions
                    case "pricePoints": self = .pricePoints
                    case "prices": self = .prices
                    case "primaryLocale": self = .primaryLocale
                    case "promotedPurchases": self = .promotedPurchases
                    case "reviewSubmissions": self = .reviewSubmissions
                    case "sku": self = .sku
                    case "subscriptionGracePeriod": self = .subscriptionGracePeriod
                    case "subscriptionGroups": self = .subscriptionGroups
                    case "subscriptionStatusUrl": self = .subscriptionStatusUrl
                    case "subscriptionStatusUrlForSandbox": self = .subscriptionStatusUrlForSandbox
                    case "subscriptionStatusUrlVersion": self = .subscriptionStatusUrlVersion
                    case "subscriptionStatusUrlVersionForSandbox": self = .subscriptionStatusUrlVersionForSandbox
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaAppLocalizations: Hashable, Codable, RawRepresentable {
                case app
                case description
                case feedbackEmail
                case locale
                case marketingUrl
                case privacyPolicyUrl
                case tvOsPrivacyPolicy
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .description: return "description"
                    case .feedbackEmail: return "feedbackEmail"
                    case .locale: return "locale"
                    case .marketingUrl: return "marketingUrl"
                    case .privacyPolicyUrl: return "privacyPolicyUrl"
                    case .tvOsPrivacyPolicy: return "tvOsPrivacyPolicy"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "description": self = .description
                    case "feedbackEmail": self = .feedbackEmail
                    case "locale": self = .locale
                    case "marketingUrl": self = .marketingUrl
                    case "privacyPolicyUrl": self = .privacyPolicyUrl
                    case "tvOsPrivacyPolicy": self = .tvOsPrivacyPolicy
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaAppReviewDetails: Hashable, Codable, RawRepresentable {
                case app
                case contactEmail
                case contactFirstName
                case contactLastName
                case contactPhone
                case demoAccountName
                case demoAccountPassword
                case demoAccountRequired
                case notes
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .contactEmail: return "contactEmail"
                    case .contactFirstName: return "contactFirstName"
                    case .contactLastName: return "contactLastName"
                    case .contactPhone: return "contactPhone"
                    case .demoAccountName: return "demoAccountName"
                    case .demoAccountPassword: return "demoAccountPassword"
                    case .demoAccountRequired: return "demoAccountRequired"
                    case .notes: return "notes"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "contactEmail": self = .contactEmail
                    case "contactFirstName": self = .contactFirstName
                    case "contactLastName": self = .contactLastName
                    case "contactPhone": self = .contactPhone
                    case "demoAccountName": self = .demoAccountName
                    case "demoAccountPassword": self = .demoAccountPassword
                    case "demoAccountRequired": self = .demoAccountRequired
                    case "notes": self = .notes
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaGroups: Hashable, Codable, RawRepresentable {
                case app
                case betaTesters
                case builds
                case createdDate
                case feedbackEnabled
                case hasAccessToAllBuilds
                case iosBuildsAvailableForAppleSiliconMac
                case isInternalGroup
                case name
                case publicLink
                case publicLinkEnabled
                case publicLinkId
                case publicLinkLimit
                case publicLinkLimitEnabled
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .betaTesters: return "betaTesters"
                    case .builds: return "builds"
                    case .createdDate: return "createdDate"
                    case .feedbackEnabled: return "feedbackEnabled"
                    case .hasAccessToAllBuilds: return "hasAccessToAllBuilds"
                    case .iosBuildsAvailableForAppleSiliconMac: return "iosBuildsAvailableForAppleSiliconMac"
                    case .isInternalGroup: return "isInternalGroup"
                    case .name: return "name"
                    case .publicLink: return "publicLink"
                    case .publicLinkEnabled: return "publicLinkEnabled"
                    case .publicLinkId: return "publicLinkId"
                    case .publicLinkLimit: return "publicLinkLimit"
                    case .publicLinkLimitEnabled: return "publicLinkLimitEnabled"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "betaTesters": self = .betaTesters
                    case "builds": self = .builds
                    case "createdDate": self = .createdDate
                    case "feedbackEnabled": self = .feedbackEnabled
                    case "hasAccessToAllBuilds": self = .hasAccessToAllBuilds
                    case "iosBuildsAvailableForAppleSiliconMac": self = .iosBuildsAvailableForAppleSiliconMac
                    case "isInternalGroup": self = .isInternalGroup
                    case "name": self = .name
                    case "publicLink": self = .publicLink
                    case "publicLinkEnabled": self = .publicLinkEnabled
                    case "publicLinkId": self = .publicLinkId
                    case "publicLinkLimit": self = .publicLinkLimit
                    case "publicLinkLimitEnabled": self = .publicLinkLimitEnabled
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum BetaLicenseAgreements: Hashable, Codable, RawRepresentable {
                case agreementText
                case app
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .agreementText: return "agreementText"
                    case .app: return "app"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "agreementText": self = .agreementText
                    case "app": self = .app
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Builds: Hashable, Codable, RawRepresentable {
                case app
                case appEncryptionDeclaration
                case appStoreVersion
                case betaAppReviewSubmission
                case betaBuildLocalizations
                case betaGroups
                case buildAudienceType
                case buildBetaDetail
                case buildBundles
                case computedMinMacOsVersion
                case diagnosticSignatures
                case expirationDate
                case expired
                case iconAssetToken
                case icons
                case individualTesters
                case lsMinimumSystemVersion
                case minOsVersion
                case perfPowerMetrics
                case preReleaseVersion
                case processingState
                case uploadedDate
                case usesNonExemptEncryption
                case version
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appEncryptionDeclaration: return "appEncryptionDeclaration"
                    case .appStoreVersion: return "appStoreVersion"
                    case .betaAppReviewSubmission: return "betaAppReviewSubmission"
                    case .betaBuildLocalizations: return "betaBuildLocalizations"
                    case .betaGroups: return "betaGroups"
                    case .buildAudienceType: return "buildAudienceType"
                    case .buildBetaDetail: return "buildBetaDetail"
                    case .buildBundles: return "buildBundles"
                    case .computedMinMacOsVersion: return "computedMinMacOsVersion"
                    case .diagnosticSignatures: return "diagnosticSignatures"
                    case .expirationDate: return "expirationDate"
                    case .expired: return "expired"
                    case .iconAssetToken: return "iconAssetToken"
                    case .icons: return "icons"
                    case .individualTesters: return "individualTesters"
                    case .lsMinimumSystemVersion: return "lsMinimumSystemVersion"
                    case .minOsVersion: return "minOsVersion"
                    case .perfPowerMetrics: return "perfPowerMetrics"
                    case .preReleaseVersion: return "preReleaseVersion"
                    case .processingState: return "processingState"
                    case .uploadedDate: return "uploadedDate"
                    case .usesNonExemptEncryption: return "usesNonExemptEncryption"
                    case .version: return "version"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appEncryptionDeclaration": self = .appEncryptionDeclaration
                    case "appStoreVersion": self = .appStoreVersion
                    case "betaAppReviewSubmission": self = .betaAppReviewSubmission
                    case "betaBuildLocalizations": self = .betaBuildLocalizations
                    case "betaGroups": self = .betaGroups
                    case "buildAudienceType": self = .buildAudienceType
                    case "buildBetaDetail": self = .buildBetaDetail
                    case "buildBundles": self = .buildBundles
                    case "computedMinMacOsVersion": self = .computedMinMacOsVersion
                    case "diagnosticSignatures": self = .diagnosticSignatures
                    case "expirationDate": self = .expirationDate
                    case "expired": self = .expired
                    case "iconAssetToken": self = .iconAssetToken
                    case "icons": self = .icons
                    case "individualTesters": self = .individualTesters
                    case "lsMinimumSystemVersion": self = .lsMinimumSystemVersion
                    case "minOsVersion": self = .minOsVersion
                    case "perfPowerMetrics": self = .perfPowerMetrics
                    case "preReleaseVersion": self = .preReleaseVersion
                    case "processingState": self = .processingState
                    case "uploadedDate": self = .uploadedDate
                    case "usesNonExemptEncryption": self = .usesNonExemptEncryption
                    case "version": self = .version
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CiProducts: Hashable, Codable, RawRepresentable {
                case additionalRepositories
                case app
                case buildRuns
                case bundleId
                case createdDate
                case name
                case primaryRepositories
                case productType
                case workflows
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .additionalRepositories: return "additionalRepositories"
                    case .app: return "app"
                    case .buildRuns: return "buildRuns"
                    case .bundleId: return "bundleId"
                    case .createdDate: return "createdDate"
                    case .name: return "name"
                    case .primaryRepositories: return "primaryRepositories"
                    case .productType: return "productType"
                    case .workflows: return "workflows"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "additionalRepositories": self = .additionalRepositories
                    case "app": self = .app
                    case "buildRuns": self = .buildRuns
                    case "bundleId": self = .bundleId
                    case "createdDate": self = .createdDate
                    case "name": self = .name
                    case "primaryRepositories": self = .primaryRepositories
                    case "productType": self = .productType
                    case "workflows": self = .workflows
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CustomerReviews: Hashable, Codable, RawRepresentable {
                case body
                case createdDate
                case rating
                case response
                case reviewerNickname
                case territory
                case title
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .body: return "body"
                    case .createdDate: return "createdDate"
                    case .rating: return "rating"
                    case .response: return "response"
                    case .reviewerNickname: return "reviewerNickname"
                    case .territory: return "territory"
                    case .title: return "title"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "body": self = .body
                    case "createdDate": self = .createdDate
                    case "rating": self = .rating
                    case "response": self = .response
                    case "reviewerNickname": self = .reviewerNickname
                    case "territory": self = .territory
                    case "title": self = .title
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum EndUserLicenseAgreements: Hashable, Codable, RawRepresentable {
                case agreementText
                case app
                case territories
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .agreementText: return "agreementText"
                    case .app: return "app"
                    case .territories: return "territories"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "agreementText": self = .agreementText
                    case "app": self = .app
                    case "territories": self = .territories
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterEnabledVersions: Hashable, Codable, RawRepresentable {
                case app
                case compatibleVersions
                case iconAsset
                case platform
                case versionString
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .compatibleVersions: return "compatibleVersions"
                    case .iconAsset: return "iconAsset"
                    case .platform: return "platform"
                    case .versionString: return "versionString"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "compatibleVersions": self = .compatibleVersions
                    case "iconAsset": self = .iconAsset
                    case "platform": self = .platform
                    case "versionString": self = .versionString
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum InAppPurchases: Hashable, Codable, RawRepresentable {
                case apps
                case inAppPurchaseType
                case productId
                case referenceName
                case state
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .apps: return "apps"
                    case .inAppPurchaseType: return "inAppPurchaseType"
                    case .productId: return "productId"
                    case .referenceName: return "referenceName"
                    case .state: return "state"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "apps": self = .apps
                    case "inAppPurchaseType": self = .inAppPurchaseType
                    case "productId": self = .productId
                    case "referenceName": self = .referenceName
                    case "state": self = .state
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PerfPowerMetrics: Hashable, Codable, RawRepresentable {
                case deviceType
                case metricType
                case platform
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .deviceType: return "deviceType"
                    case .metricType: return "metricType"
                    case .platform: return "platform"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "deviceType": self = .deviceType
                    case "metricType": self = .metricType
                    case "platform": self = .platform
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PreReleaseVersions: Hashable, Codable, RawRepresentable {
                case app
                case builds
                case platform
                case version
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .builds: return "builds"
                    case .platform: return "platform"
                    case .version: return "version"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "builds": self = .builds
                    case "platform": self = .platform
                    case "version": self = .version
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PromotedPurchases: Hashable, Codable, RawRepresentable {
                case app
                case enabled
                case inAppPurchaseV2
                case promotionImages
                case state
                case subscription
                case visibleForAllUsers
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .enabled: return "enabled"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .promotionImages: return "promotionImages"
                    case .state: return "state"
                    case .subscription: return "subscription"
                    case .visibleForAllUsers: return "visibleForAllUsers"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "enabled": self = .enabled
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "promotionImages": self = .promotionImages
                    case "state": self = .state
                    case "subscription": self = .subscription
                    case "visibleForAllUsers": self = .visibleForAllUsers
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum ReviewSubmissions: Hashable, Codable, RawRepresentable {
                case app
                case appStoreVersionForReview
                case canceled
                case items
                case lastUpdatedByActor
                case platform
                case state
                case submitted
                case submittedByActor
                case submittedDate
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appStoreVersionForReview: return "appStoreVersionForReview"
                    case .canceled: return "canceled"
                    case .items: return "items"
                    case .lastUpdatedByActor: return "lastUpdatedByActor"
                    case .platform: return "platform"
                    case .state: return "state"
                    case .submitted: return "submitted"
                    case .submittedByActor: return "submittedByActor"
                    case .submittedDate: return "submittedDate"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appStoreVersionForReview": self = .appStoreVersionForReview
                    case "canceled": self = .canceled
                    case "items": self = .items
                    case "lastUpdatedByActor": self = .lastUpdatedByActor
                    case "platform": self = .platform
                    case "state": self = .state
                    case "submitted": self = .submitted
                    case "submittedByActor": self = .submittedByActor
                    case "submittedDate": self = .submittedDate
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum SubscriptionGracePeriods: Hashable, Codable, RawRepresentable {
                case duration
                case optIn
                case renewalType
                case sandboxOptIn
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .duration: return "duration"
                    case .optIn: return "optIn"
                    case .renewalType: return "renewalType"
                    case .sandboxOptIn: return "sandboxOptIn"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "duration": self = .duration
                    case "optIn": self = .optIn
                    case "renewalType": self = .renewalType
                    case "sandboxOptIn": self = .sandboxOptIn
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum SubscriptionGroups: Hashable, Codable, RawRepresentable {
                case app
                case referenceName
                case subscriptionGroupLocalizations
                case subscriptions
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .referenceName: return "referenceName"
                    case .subscriptionGroupLocalizations: return "subscriptionGroupLocalizations"
                    case .subscriptions: return "subscriptions"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "referenceName": self = .referenceName
                    case "subscriptionGroupLocalizations": self = .subscriptionGroupLocalizations
                    case "subscriptions": self = .subscriptions
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Territories: Hashable, Codable, RawRepresentable {
                case currency
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .currency: return "currency"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "currency": self = .currency
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum AppStoreVersionsAppStoreState: Hashable, Codable, RawRepresentable {
                case accepted
                case developerRejected
                case developerRemovedFromSale
                case inReview
                case invalidBinary
                case metadataRejected
                case pendingAppleRelease
                case pendingContract
                case pendingDeveloperRelease
                case preorderReadyForSale
                case prepareForSubmission
                case processingForAppStore
                case readyForReview
                case readyForSale
                case rejected
                case removedFromSale
                case replacedWithNewVersion
                case waitingForExportCompliance
                case waitingForReview
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .accepted: return "ACCEPTED"
                    case .developerRejected: return "DEVELOPER_REJECTED"
                    case .developerRemovedFromSale: return "DEVELOPER_REMOVED_FROM_SALE"
                    case .inReview: return "IN_REVIEW"
                    case .invalidBinary: return "INVALID_BINARY"
                    case .metadataRejected: return "METADATA_REJECTED"
                    case .pendingAppleRelease: return "PENDING_APPLE_RELEASE"
                    case .pendingContract: return "PENDING_CONTRACT"
                    case .pendingDeveloperRelease: return "PENDING_DEVELOPER_RELEASE"
                    case .preorderReadyForSale: return "PREORDER_READY_FOR_SALE"
                    case .prepareForSubmission: return "PREPARE_FOR_SUBMISSION"
                    case .processingForAppStore: return "PROCESSING_FOR_APP_STORE"
                    case .readyForReview: return "READY_FOR_REVIEW"
                    case .readyForSale: return "READY_FOR_SALE"
                    case .rejected: return "REJECTED"
                    case .removedFromSale: return "REMOVED_FROM_SALE"
                    case .replacedWithNewVersion: return "REPLACED_WITH_NEW_VERSION"
                    case .waitingForExportCompliance: return "WAITING_FOR_EXPORT_COMPLIANCE"
                    case .waitingForReview: return "WAITING_FOR_REVIEW"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ACCEPTED": self = .accepted
                    case "DEVELOPER_REJECTED": self = .developerRejected
                    case "DEVELOPER_REMOVED_FROM_SALE": self = .developerRemovedFromSale
                    case "IN_REVIEW": self = .inReview
                    case "INVALID_BINARY": self = .invalidBinary
                    case "METADATA_REJECTED": self = .metadataRejected
                    case "PENDING_APPLE_RELEASE": self = .pendingAppleRelease
                    case "PENDING_CONTRACT": self = .pendingContract
                    case "PENDING_DEVELOPER_RELEASE": self = .pendingDeveloperRelease
                    case "PREORDER_READY_FOR_SALE": self = .preorderReadyForSale
                    case "PREPARE_FOR_SUBMISSION": self = .prepareForSubmission
                    case "PROCESSING_FOR_APP_STORE": self = .processingForAppStore
                    case "READY_FOR_REVIEW": self = .readyForReview
                    case "READY_FOR_SALE": self = .readyForSale
                    case "REJECTED": self = .rejected
                    case "REMOVED_FROM_SALE": self = .removedFromSale
                    case "REPLACED_WITH_NEW_VERSION": self = .replacedWithNewVersion
                    case "WAITING_FOR_EXPORT_COMPLIANCE": self = .waitingForExportCompliance
                    case "WAITING_FOR_REVIEW": self = .waitingForReview
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersionsPlatform: Hashable, Codable, RawRepresentable {
                case iOS
                case macOS
                case tvOS
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .iOS: return "IOS"
                    case .macOS: return "MAC_OS"
                    case .tvOS: return "TV_OS"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "IOS": self = .iOS
                    case "MAC_OS": self = .macOS
                    case "TV_OS": self = .tvOS
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case appClips
            case appCustomProductPages
            case appEvents
            case appInfos
            case appStoreVersionExperimentsV2
            case appStoreVersions
            case availableTerritories
            case betaAppLocalizations
            case betaAppReviewDetail
            case betaGroups
            case betaLicenseAgreement
            case builds
            case ciProduct
            case endUserLicenseAgreement
            case gameCenterEnabledVersions
            case inAppPurchases
            case inAppPurchasesV2
            case preOrder
            case preReleaseVersions
            case prices
            case promotedPurchases
            case reviewSubmissions
            case subscriptionGracePeriod
            case subscriptionGroups
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appClips: return "appClips"
                case .appCustomProductPages: return "appCustomProductPages"
                case .appEvents: return "appEvents"
                case .appInfos: return "appInfos"
                case .appStoreVersionExperimentsV2: return "appStoreVersionExperimentsV2"
                case .appStoreVersions: return "appStoreVersions"
                case .availableTerritories: return "availableTerritories"
                case .betaAppLocalizations: return "betaAppLocalizations"
                case .betaAppReviewDetail: return "betaAppReviewDetail"
                case .betaGroups: return "betaGroups"
                case .betaLicenseAgreement: return "betaLicenseAgreement"
                case .builds: return "builds"
                case .ciProduct: return "ciProduct"
                case .endUserLicenseAgreement: return "endUserLicenseAgreement"
                case .gameCenterEnabledVersions: return "gameCenterEnabledVersions"
                case .inAppPurchases: return "inAppPurchases"
                case .inAppPurchasesV2: return "inAppPurchasesV2"
                case .preOrder: return "preOrder"
                case .preReleaseVersions: return "preReleaseVersions"
                case .prices: return "prices"
                case .promotedPurchases: return "promotedPurchases"
                case .reviewSubmissions: return "reviewSubmissions"
                case .subscriptionGracePeriod: return "subscriptionGracePeriod"
                case .subscriptionGroups: return "subscriptionGroups"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "appClips": self = .appClips
                case "appCustomProductPages": self = .appCustomProductPages
                case "appEvents": self = .appEvents
                case "appInfos": self = .appInfos
                case "appStoreVersionExperimentsV2": self = .appStoreVersionExperimentsV2
                case "appStoreVersions": self = .appStoreVersions
                case "availableTerritories": self = .availableTerritories
                case "betaAppLocalizations": self = .betaAppLocalizations
                case "betaAppReviewDetail": self = .betaAppReviewDetail
                case "betaGroups": self = .betaGroups
                case "betaLicenseAgreement": self = .betaLicenseAgreement
                case "builds": self = .builds
                case "ciProduct": self = .ciProduct
                case "endUserLicenseAgreement": self = .endUserLicenseAgreement
                case "gameCenterEnabledVersions": self = .gameCenterEnabledVersions
                case "inAppPurchases": self = .inAppPurchases
                case "inAppPurchasesV2": self = .inAppPurchasesV2
                case "preOrder": self = .preOrder
                case "preReleaseVersions": self = .preReleaseVersions
                case "prices": self = .prices
                case "promotedPurchases": self = .promotedPurchases
                case "reviewSubmissions": self = .reviewSubmissions
                case "subscriptionGracePeriod": self = .subscriptionGracePeriod
                case "subscriptionGroups": self = .subscriptionGroups
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Self, Int?>(key: "limit")] }
                set { self[Relation<Self, Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }

        public enum Sort: Hashable, Codable, RawRepresentable {
            case bundleId
            case bundleIdDesc
            case name
            case nameDesc
            case sku
            case skuDesc
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .bundleId: return "bundleId"
                case .bundleIdDesc: return "-bundleId"
                case .name: return "name"
                case .nameDesc: return "-name"
                case .sku: return "sku"
                case .skuDesc: return "-sku"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "bundleId": self = .bundleId
                case "-bundleId": self = .bundleIdDesc
                case "name": self = .name
                case "-name": self = .nameDesc
                case "sku": self = .sku
                case "-sku": self = .skuDesc
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

extension Relation<V1.Apps.GET.Parameters.Exists, Bool?> {
    /// filter by existence or non-existence of related 'gameCenterEnabledVersions'
    public static var gameCenterEnabledVersions: Relation {
        .init(key: "exists[gameCenterEnabledVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppAvailabilities]?> {
    /// the fields to include for returned resources of type appAvailabilities
    public static var appAvailabilities: Relation {
        .init(key: "fields[appAvailabilities]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppClips]?> {
    /// the fields to include for returned resources of type appClips
    public static var appClips: Relation {
        .init(key: "fields[appClips]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppCustomProductPages]?> {
    /// the fields to include for returned resources of type appCustomProductPages
    public static var appCustomProductPages: Relation {
        .init(key: "fields[appCustomProductPages]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppEvents]?> {
    /// the fields to include for returned resources of type appEvents
    public static var appEvents: Relation {
        .init(key: "fields[appEvents]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppInfos]?> {
    /// the fields to include for returned resources of type appInfos
    public static var appInfos: Relation {
        .init(key: "fields[appInfos]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppPreOrders]?> {
    /// the fields to include for returned resources of type appPreOrders
    public static var appPreOrders: Relation {
        .init(key: "fields[appPreOrders]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppPricePoints]?> {
    /// the fields to include for returned resources of type appPricePoints
    public static var appPricePoints: Relation {
        .init(key: "fields[appPricePoints]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppPriceSchedules]?> {
    /// the fields to include for returned resources of type appPriceSchedules
    public static var appPriceSchedules: Relation {
        .init(key: "fields[appPriceSchedules]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppPrices]?> {
    /// the fields to include for returned resources of type appPrices
    public static var appPrices: Relation {
        .init(key: "fields[appPrices]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppStoreVersionExperiments]?> {
    /// the fields to include for returned resources of type appStoreVersionExperiments
    public static var appStoreVersionExperiments: Relation {
        .init(key: "fields[appStoreVersionExperiments]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.AppStoreVersions]?> {
    /// the fields to include for returned resources of type appStoreVersions
    public static var appStoreVersions: Relation {
        .init(key: "fields[appStoreVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.Apps]?> {
    /// the fields to include for returned resources of type apps
    public static var apps: Relation {
        .init(key: "fields[apps]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.BetaAppLocalizations]?> {
    /// the fields to include for returned resources of type betaAppLocalizations
    public static var betaAppLocalizations: Relation {
        .init(key: "fields[betaAppLocalizations]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.BetaAppReviewDetails]?> {
    /// the fields to include for returned resources of type betaAppReviewDetails
    public static var betaAppReviewDetails: Relation {
        .init(key: "fields[betaAppReviewDetails]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.BetaGroups]?> {
    /// the fields to include for returned resources of type betaGroups
    public static var betaGroups: Relation {
        .init(key: "fields[betaGroups]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.BetaLicenseAgreements]?> {
    /// the fields to include for returned resources of type betaLicenseAgreements
    public static var betaLicenseAgreements: Relation {
        .init(key: "fields[betaLicenseAgreements]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.Builds]?> {
    /// the fields to include for returned resources of type builds
    public static var builds: Relation {
        .init(key: "fields[builds]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.CiProducts]?> {
    /// the fields to include for returned resources of type ciProducts
    public static var ciProducts: Relation {
        .init(key: "fields[ciProducts]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.CustomerReviews]?> {
    /// the fields to include for returned resources of type customerReviews
    public static var customerReviews: Relation {
        .init(key: "fields[customerReviews]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.EndUserLicenseAgreements]?> {
    /// the fields to include for returned resources of type endUserLicenseAgreements
    public static var endUserLicenseAgreements: Relation {
        .init(key: "fields[endUserLicenseAgreements]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.GameCenterEnabledVersions]?> {
    /// the fields to include for returned resources of type gameCenterEnabledVersions
    public static var gameCenterEnabledVersions: Relation {
        .init(key: "fields[gameCenterEnabledVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.InAppPurchases]?> {
    /// the fields to include for returned resources of type inAppPurchases
    public static var inAppPurchases: Relation {
        .init(key: "fields[inAppPurchases]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.PerfPowerMetrics]?> {
    /// the fields to include for returned resources of type perfPowerMetrics
    public static var perfPowerMetrics: Relation {
        .init(key: "fields[perfPowerMetrics]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.PreReleaseVersions]?> {
    /// the fields to include for returned resources of type preReleaseVersions
    public static var preReleaseVersions: Relation {
        .init(key: "fields[preReleaseVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.PromotedPurchases]?> {
    /// the fields to include for returned resources of type promotedPurchases
    public static var promotedPurchases: Relation {
        .init(key: "fields[promotedPurchases]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.ReviewSubmissions]?> {
    /// the fields to include for returned resources of type reviewSubmissions
    public static var reviewSubmissions: Relation {
        .init(key: "fields[reviewSubmissions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.SubscriptionGracePeriods]?> {
    /// the fields to include for returned resources of type subscriptionGracePeriods
    public static var subscriptionGracePeriods: Relation {
        .init(key: "fields[subscriptionGracePeriods]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.SubscriptionGroups]?> {
    /// the fields to include for returned resources of type subscriptionGroups
    public static var subscriptionGroups: Relation {
        .init(key: "fields[subscriptionGroups]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Fields, [V1.Apps.GET.Parameters.Fields.Territories]?> {
    /// the fields to include for returned resources of type territories
    public static var territories: Relation {
        .init(key: "fields[territories]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Filter, [V1.Apps.GET.Parameters.Filter.AppStoreVersionsAppStoreState]?> {
    /// filter by attribute 'appStoreVersions.appStoreState'
    public static var appStoreVersionsAppStoreState: Relation {
        .init(key: "filter[appStoreVersions.appStoreState]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Filter, [V1.Apps.GET.Parameters.Filter.AppStoreVersionsPlatform]?> {
    /// filter by attribute 'appStoreVersions.platform'
    public static var appStoreVersionsPlatform: Relation {
        .init(key: "filter[appStoreVersions.platform]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Filter, [String]?> {
    /// filter by id(s) of related 'appStoreVersions'
    public static var appStoreVersions: Relation {
        .init(key: "filter[appStoreVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Filter, [String]?> {
    /// filter by attribute 'bundleId'
    public static var bundleId: Relation {
        .init(key: "filter[bundleId]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Filter, [String]?> {
    /// filter by id(s)
    public static var id: Relation {
        .init(key: "filter[id]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Filter, [String]?> {
    /// filter by attribute 'name'
    public static var name: Relation {
        .init(key: "filter[name]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Filter, [String]?> {
    /// filter by attribute 'sku'
    public static var sku: Relation {
        .init(key: "filter[sku]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related appClips returned (when they are included)
    public static var appClips: Relation {
        .init(key: "limit[appClips]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related appCustomProductPages returned (when they are included)
    public static var appCustomProductPages: Relation {
        .init(key: "limit[appCustomProductPages]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related appEvents returned (when they are included)
    public static var appEvents: Relation {
        .init(key: "limit[appEvents]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related appInfos returned (when they are included)
    public static var appInfos: Relation {
        .init(key: "limit[appInfos]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
    public static var appStoreVersionExperimentsV2: Relation {
        .init(key: "limit[appStoreVersionExperimentsV2]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related appStoreVersions returned (when they are included)
    public static var appStoreVersions: Relation {
        .init(key: "limit[appStoreVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related availableTerritories returned (when they are included)
    public static var availableTerritories: Relation {
        .init(key: "limit[availableTerritories]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related betaAppLocalizations returned (when they are included)
    public static var betaAppLocalizations: Relation {
        .init(key: "limit[betaAppLocalizations]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related betaGroups returned (when they are included)
    public static var betaGroups: Relation {
        .init(key: "limit[betaGroups]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related builds returned (when they are included)
    public static var builds: Relation {
        .init(key: "limit[builds]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related gameCenterEnabledVersions returned (when they are included)
    public static var gameCenterEnabledVersions: Relation {
        .init(key: "limit[gameCenterEnabledVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related inAppPurchasesV2 returned (when they are included)
    public static var inAppPurchasesV2: Relation {
        .init(key: "limit[inAppPurchasesV2]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related inAppPurchases returned (when they are included)
    public static var inAppPurchases: Relation {
        .init(key: "limit[inAppPurchases]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related preReleaseVersions returned (when they are included)
    public static var preReleaseVersions: Relation {
        .init(key: "limit[preReleaseVersions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related prices returned (when they are included)
    public static var prices: Relation {
        .init(key: "limit[prices]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related promotedPurchases returned (when they are included)
    public static var promotedPurchases: Relation {
        .init(key: "limit[promotedPurchases]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related reviewSubmissions returned (when they are included)
    public static var reviewSubmissions: Relation {
        .init(key: "limit[reviewSubmissions]")
    }
}

extension Relation<V1.Apps.GET.Parameters.Limit, Int?> {
    /// maximum number of related subscriptionGroups returned (when they are included)
    public static var subscriptionGroups: Relation {
        .init(key: "limit[subscriptionGroups]")
    }
}

// swiftlint:enable all
