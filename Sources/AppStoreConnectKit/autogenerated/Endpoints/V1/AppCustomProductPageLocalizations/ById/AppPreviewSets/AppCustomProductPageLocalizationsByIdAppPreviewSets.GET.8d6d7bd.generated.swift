// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.AppCustomProductPageLocalizations.ById.AppPreviewSets {
    public struct GET: Endpoint {
        public typealias Response = AppPreviewSetsResponse

        public var path: String {
            "/v1/appCustomProductPageLocalizations/\(id)/appPreviewSets"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appCustomProductPageLocalizations]",
                             value: parameters.fields[.appCustomProductPageLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPreviewSets]",
                             value: parameters.fields[.appPreviewSets]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appPreviews]",
                             value: parameters.fields[.appPreviews]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionExperimentTreatmentLocalizations]",
                             value: parameters.fields[.appStoreVersionExperimentTreatmentLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionLocalizations]",
                             value: parameters.fields[.appStoreVersionLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[appStoreVersionExperimentTreatmentLocalization]",
                             value: parameters.filter[.appStoreVersionExperimentTreatmentLocalization]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[appStoreVersionLocalization]",
                             value: parameters.filter[.appStoreVersionLocalization]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[previewType]",
                             value: parameters.filter[.previewType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appPreviews]",
                             value: parameters.limit[.appPreviews].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of AppPreviewSets as `AppPreviewSetsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppPreviewSetsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.AppCustomProductPageLocalizations.ById.AppPreviewSets.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppCustomProductPageLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appCustomProductPageVersion: Self {
                    .init(rawValue: "appCustomProductPageVersion")
                }

                public static var appPreviewSets: Self {
                    .init(rawValue: "appPreviewSets")
                }

                public static var appScreenshotSets: Self {
                    .init(rawValue: "appScreenshotSets")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var promotionalText: Self {
                    .init(rawValue: "promotionalText")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppPreviewSets: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appCustomProductPageLocalization: Self {
                    .init(rawValue: "appCustomProductPageLocalization")
                }

                public static var appPreviews: Self {
                    .init(rawValue: "appPreviews")
                }

                public static var appStoreVersionExperimentTreatmentLocalization: Self {
                    .init(rawValue: "appStoreVersionExperimentTreatmentLocalization")
                }

                public static var appStoreVersionLocalization: Self {
                    .init(rawValue: "appStoreVersionLocalization")
                }

                public static var previewType: Self {
                    .init(rawValue: "previewType")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppPreviews: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appPreviewSet: Self {
                    .init(rawValue: "appPreviewSet")
                }

                public static var assetDeliveryState: Self {
                    .init(rawValue: "assetDeliveryState")
                }

                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var mimeType: Self {
                    .init(rawValue: "mimeType")
                }

                public static var previewFrameImage: Self {
                    .init(rawValue: "previewFrameImage")
                }

                public static var previewFrameTimeCode: Self {
                    .init(rawValue: "previewFrameTimeCode")
                }

                public static var previewImage: Self {
                    .init(rawValue: "previewImage")
                }

                public static var sourceFileChecksum: Self {
                    .init(rawValue: "sourceFileChecksum")
                }

                public static var uploadOperations: Self {
                    .init(rawValue: "uploadOperations")
                }

                public static var videoDeliveryState: Self {
                    .init(rawValue: "videoDeliveryState")
                }

                public static var videoUrl: Self {
                    .init(rawValue: "videoUrl")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersionExperimentTreatmentLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appPreviewSets: Self {
                    .init(rawValue: "appPreviewSets")
                }

                public static var appScreenshotSets: Self {
                    .init(rawValue: "appScreenshotSets")
                }

                public static var appStoreVersionExperimentTreatment: Self {
                    .init(rawValue: "appStoreVersionExperimentTreatment")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersionLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appPreviewSets: Self {
                    .init(rawValue: "appPreviewSets")
                }

                public static var appScreenshotSets: Self {
                    .init(rawValue: "appScreenshotSets")
                }

                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var description: Self {
                    .init(rawValue: "description")
                }

                public static var keywords: Self {
                    .init(rawValue: "keywords")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var marketingUrl: Self {
                    .init(rawValue: "marketingUrl")
                }

                public static var promotionalText: Self {
                    .init(rawValue: "promotionalText")
                }

                public static var supportUrl: Self {
                    .init(rawValue: "supportUrl")
                }

                public static var whatsNew: Self {
                    .init(rawValue: "whatsNew")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appCustomProductPageLocalizations
                public static var appCustomProductPageLocalizations: Relation<[AppCustomProductPageLocalizations]?> {
                    .init(key: "fields[appCustomProductPageLocalizations]")
                }

                /// the fields to include for returned resources of type appPreviewSets
                public static var appPreviewSets: Relation<[AppPreviewSets]?> {
                    .init(key: "fields[appPreviewSets]")
                }

                /// the fields to include for returned resources of type appPreviews
                public static var appPreviews: Relation<[AppPreviews]?> {
                    .init(key: "fields[appPreviews]")
                }

                /// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
                public static var appStoreVersionExperimentTreatmentLocalizations: Relation<[AppStoreVersionExperimentTreatmentLocalizations]?> {
                    .init(key: "fields[appStoreVersionExperimentTreatmentLocalizations]")
                }

                /// the fields to include for returned resources of type appStoreVersionLocalizations
                public static var appStoreVersionLocalizations: Relation<[AppStoreVersionLocalizations]?> {
                    .init(key: "fields[appStoreVersionLocalizations]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct PreviewType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appleTv: Self {
                    .init(rawValue: "APPLE_TV")
                }

                public static var appleVisionPro: Self {
                    .init(rawValue: "APPLE_VISION_PRO")
                }

                public static var desktop: Self {
                    .init(rawValue: "DESKTOP")
                }

                public static var ipad105: Self {
                    .init(rawValue: "IPAD_105")
                }

                public static var ipad97: Self {
                    .init(rawValue: "IPAD_97")
                }

                public static var ipadPro129: Self {
                    .init(rawValue: "IPAD_PRO_129")
                }

                public static var ipadPro3Gen11: Self {
                    .init(rawValue: "IPAD_PRO_3GEN_11")
                }

                public static var ipadPro3Gen129: Self {
                    .init(rawValue: "IPAD_PRO_3GEN_129")
                }

                public static var iphone35: Self {
                    .init(rawValue: "IPHONE_35")
                }

                public static var iphone40: Self {
                    .init(rawValue: "IPHONE_40")
                }

                public static var iphone47: Self {
                    .init(rawValue: "IPHONE_47")
                }

                public static var iphone55: Self {
                    .init(rawValue: "IPHONE_55")
                }

                public static var iphone58: Self {
                    .init(rawValue: "IPHONE_58")
                }

                public static var iphone61: Self {
                    .init(rawValue: "IPHONE_61")
                }

                public static var iphone65: Self {
                    .init(rawValue: "IPHONE_65")
                }

                public static var iphone67: Self {
                    .init(rawValue: "IPHONE_67")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
                public static var appStoreVersionExperimentTreatmentLocalization: Relation<[String]?> {
                    .init(key: "filter[appStoreVersionExperimentTreatmentLocalization]")
                }

                /// filter by id(s) of related 'appStoreVersionLocalization'
                public static var appStoreVersionLocalization: Relation<[String]?> {
                    .init(key: "filter[appStoreVersionLocalization]")
                }

                /// filter by attribute 'previewType'
                public static var previewType: Relation<[PreviewType]?> {
                    .init(key: "filter[previewType]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appCustomProductPageLocalization: Self {
                .init(rawValue: "appCustomProductPageLocalization")
            }

            public static var appPreviews: Self {
                .init(rawValue: "appPreviews")
            }

            public static var appStoreVersionExperimentTreatmentLocalization: Self {
                .init(rawValue: "appStoreVersionExperimentTreatmentLocalization")
            }

            public static var appStoreVersionLocalization: Self {
                .init(rawValue: "appStoreVersionLocalization")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related appPreviews returned (when they are included)
                public static var appPreviews: Relation<Int?> {
                    .init(key: "limit[appPreviews]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
