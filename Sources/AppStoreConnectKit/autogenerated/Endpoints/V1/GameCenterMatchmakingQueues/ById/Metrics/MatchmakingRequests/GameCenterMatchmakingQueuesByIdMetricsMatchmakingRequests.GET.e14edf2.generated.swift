// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterMatchmakingQueues.ById.Metrics.MatchmakingRequests {
    public struct GET: Endpoint {
        public typealias Response = GameCenterMatchmakingQueueRequestsV1MetricResponse

        public var path: String {
            "/v1/gameCenterMatchmakingQueues/\(id)/metrics/matchmakingRequests"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "filter[gameCenterDetail]",
                             value: parameters.filter[.gameCenterDetail].map { "\($0)" }),
                URLQueryItem(name: "filter[result]",
                             value: parameters.filter[.result].map { "\($0)" }),
                URLQueryItem(name: "granularity",
                             value: parameters.granularity.map { "\($0)" }),
                URLQueryItem(name: "groupBy",
                             value: parameters.groupBy?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Metrics data response as `GameCenterMatchmakingQueueRequestsV1MetricResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterMatchmakingQueueRequestsV1MetricResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterMatchmakingQueues.ById.Metrics.MatchmakingRequests.GET {
    public struct Parameters: Hashable {
        public var filter: Filter = Filter()

        /// the granularity of the per-group dataset
        public var granularity: Granularity?

        /// the dimension by which to group the results
        public var groupBy: [GroupBy]?

        /// maximum number of groups to return per page
        public var limit: Int?

        /// comma-separated list of sort expressions; metrics will be sorted as specified
        public var sort: [Sort]?

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Result: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var canceled: Self {
                    .init(rawValue: "CANCELED")
                }

                public static var expired: Self {
                    .init(rawValue: "EXPIRED")
                }

                public static var matched: Self {
                    .init(rawValue: "MATCHED")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by 'gameCenterDetail' relationship dimension
                public static var gameCenterDetail: Relation<String?> {
                    .init(key: "filter[gameCenterDetail]")
                }

                /// filter by 'result' attribute dimension
                public static var result: Relation<Result?> {
                    .init(key: "filter[result]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Granularity: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var p1D: Self {
                .init(rawValue: "P1D")
            }

            public static var pT15M: Self {
                .init(rawValue: "PT15M")
            }

            public static var pT1H: Self {
                .init(rawValue: "PT1H")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct GroupBy: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var gameCenterDetail: Self {
                .init(rawValue: "gameCenterDetail")
            }

            public static var result: Self {
                .init(rawValue: "result")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Sort: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var averageSecondsInQueue: Self {
                .init(rawValue: "averageSecondsInQueue")
            }

            public static var averageSecondsInQueueDesc: Self {
                .init(rawValue: "-averageSecondsInQueue")
            }

            public static var count: Self {
                .init(rawValue: "count")
            }

            public static var countDesc: Self {
                .init(rawValue: "-count")
            }

            public static var p50SecondsInQueue: Self {
                .init(rawValue: "p50SecondsInQueue")
            }

            public static var p50SecondsInQueueDesc: Self {
                .init(rawValue: "-p50SecondsInQueue")
            }

            public static var p95SecondsInQueue: Self {
                .init(rawValue: "p95SecondsInQueue")
            }

            public static var p95SecondsInQueueDesc: Self {
                .init(rawValue: "-p95SecondsInQueue")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
