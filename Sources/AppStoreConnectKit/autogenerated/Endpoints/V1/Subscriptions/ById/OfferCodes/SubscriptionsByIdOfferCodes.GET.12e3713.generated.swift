// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Subscriptions.ById.OfferCodes {
    public struct GET: Endpoint {
        public typealias Response = SubscriptionOfferCodesResponse

        public var path: String {
            "/v1/subscriptions/\(id)/offerCodes"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[subscriptionOfferCodeCustomCodes]",
                             value: parameters.fields[.subscriptionOfferCodeCustomCodes]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionOfferCodeOneTimeUseCodes]",
                             value: parameters.fields[.subscriptionOfferCodeOneTimeUseCodes]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionOfferCodePrices]",
                             value: parameters.fields[.subscriptionOfferCodePrices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionOfferCodes]",
                             value: parameters.fields[.subscriptionOfferCodes]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptions]",
                             value: parameters.fields[.subscriptions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[territory]",
                             value: parameters.filter[.territory]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[customCodes]",
                             value: parameters.limit[.customCodes].map { "\($0)" }),
                URLQueryItem(name: "limit[oneTimeUseCodes]",
                             value: parameters.limit[.oneTimeUseCodes].map { "\($0)" }),
                URLQueryItem(name: "limit[prices]",
                             value: parameters.limit[.prices].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of SubscriptionOfferCodes as `SubscriptionOfferCodesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(SubscriptionOfferCodesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Subscriptions.ById.OfferCodes.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct SubscriptionOfferCodeCustomCodes: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var active: Self {
                    .init(rawValue: "active")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var customCode: Self {
                    .init(rawValue: "customCode")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var numberOfCodes: Self {
                    .init(rawValue: "numberOfCodes")
                }

                public static var offerCode: Self {
                    .init(rawValue: "offerCode")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionOfferCodeOneTimeUseCodes: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var active: Self {
                    .init(rawValue: "active")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var numberOfCodes: Self {
                    .init(rawValue: "numberOfCodes")
                }

                public static var offerCode: Self {
                    .init(rawValue: "offerCode")
                }

                public static var values: Self {
                    .init(rawValue: "values")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionOfferCodePrices: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var subscriptionPricePoint: Self {
                    .init(rawValue: "subscriptionPricePoint")
                }

                public static var territory: Self {
                    .init(rawValue: "territory")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct SubscriptionOfferCodes: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var active: Self {
                    .init(rawValue: "active")
                }

                public static var customCodes: Self {
                    .init(rawValue: "customCodes")
                }

                public static var customerEligibilities: Self {
                    .init(rawValue: "customerEligibilities")
                }

                public static var duration: Self {
                    .init(rawValue: "duration")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var numberOfPeriods: Self {
                    .init(rawValue: "numberOfPeriods")
                }

                public static var offerEligibility: Self {
                    .init(rawValue: "offerEligibility")
                }

                public static var offerMode: Self {
                    .init(rawValue: "offerMode")
                }

                public static var oneTimeUseCodes: Self {
                    .init(rawValue: "oneTimeUseCodes")
                }

                public static var prices: Self {
                    .init(rawValue: "prices")
                }

                public static var subscription: Self {
                    .init(rawValue: "subscription")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Subscriptions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appStoreReviewScreenshot: Self {
                    .init(rawValue: "appStoreReviewScreenshot")
                }

                public static var familySharable: Self {
                    .init(rawValue: "familySharable")
                }

                public static var group: Self {
                    .init(rawValue: "group")
                }

                public static var groupLevel: Self {
                    .init(rawValue: "groupLevel")
                }

                public static var images: Self {
                    .init(rawValue: "images")
                }

                public static var introductoryOffers: Self {
                    .init(rawValue: "introductoryOffers")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var offerCodes: Self {
                    .init(rawValue: "offerCodes")
                }

                public static var pricePoints: Self {
                    .init(rawValue: "pricePoints")
                }

                public static var prices: Self {
                    .init(rawValue: "prices")
                }

                public static var productId: Self {
                    .init(rawValue: "productId")
                }

                public static var promotedPurchase: Self {
                    .init(rawValue: "promotedPurchase")
                }

                public static var promotionalOffers: Self {
                    .init(rawValue: "promotionalOffers")
                }

                public static var reviewNote: Self {
                    .init(rawValue: "reviewNote")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var subscriptionAvailability: Self {
                    .init(rawValue: "subscriptionAvailability")
                }

                public static var subscriptionLocalizations: Self {
                    .init(rawValue: "subscriptionLocalizations")
                }

                public static var subscriptionPeriod: Self {
                    .init(rawValue: "subscriptionPeriod")
                }

                public static var winBackOffers: Self {
                    .init(rawValue: "winBackOffers")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
                public static var subscriptionOfferCodeCustomCodes: Relation<[SubscriptionOfferCodeCustomCodes]?> {
                    .init(key: "fields[subscriptionOfferCodeCustomCodes]")
                }

                /// the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
                public static var subscriptionOfferCodeOneTimeUseCodes: Relation<[SubscriptionOfferCodeOneTimeUseCodes]?> {
                    .init(key: "fields[subscriptionOfferCodeOneTimeUseCodes]")
                }

                /// the fields to include for returned resources of type subscriptionOfferCodePrices
                public static var subscriptionOfferCodePrices: Relation<[SubscriptionOfferCodePrices]?> {
                    .init(key: "fields[subscriptionOfferCodePrices]")
                }

                /// the fields to include for returned resources of type subscriptionOfferCodes
                public static var subscriptionOfferCodes: Relation<[SubscriptionOfferCodes]?> {
                    .init(key: "fields[subscriptionOfferCodes]")
                }

                /// the fields to include for returned resources of type subscriptions
                public static var subscriptions: Relation<[Subscriptions]?> {
                    .init(key: "fields[subscriptions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// filter by territory
                public static var territory: Relation<[String]?> {
                    .init(key: "filter[territory]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var customCodes: Self {
                .init(rawValue: "customCodes")
            }

            public static var oneTimeUseCodes: Self {
                .init(rawValue: "oneTimeUseCodes")
            }

            public static var prices: Self {
                .init(rawValue: "prices")
            }

            public static var subscription: Self {
                .init(rawValue: "subscription")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related customCodes returned (when they are included)
                public static var customCodes: Relation<Int?> {
                    .init(key: "limit[customCodes]")
                }

                /// maximum number of related oneTimeUseCodes returned (when they are included)
                public static var oneTimeUseCodes: Relation<Int?> {
                    .init(key: "limit[oneTimeUseCodes]")
                }

                /// maximum number of related prices returned (when they are included)
                public static var prices: Relation<Int?> {
                    .init(key: "limit[prices]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
