// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Subscriptions.ById.PromotionalOffers {
    public struct GET: Endpoint {
        public typealias Response = SubscriptionPromotionalOffersResponse

        public var path: String {
            "/v1/subscriptions/\(id)/promotionalOffers"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[subscriptionPromotionalOfferPrices]",
                             value: parameters.fields[.subscriptionPromotionalOfferPrices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionPromotionalOffers]",
                             value: parameters.fields[.subscriptionPromotionalOffers]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptions]",
                             value: parameters.fields[.subscriptions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[territory]",
                             value: parameters.filter[.territory]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[prices]",
                             value: parameters.limit[.prices].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of SubscriptionPromotionalOffers as `SubscriptionPromotionalOffersResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(SubscriptionPromotionalOffersResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Subscriptions.ById.PromotionalOffers.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum SubscriptionPromotionalOfferPrices: Hashable, Codable, RawRepresentable {
                case subscriptionPricePoint
                case territory
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .subscriptionPricePoint: return "subscriptionPricePoint"
                    case .territory: return "territory"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "subscriptionPricePoint": self = .subscriptionPricePoint
                    case "territory": self = .territory
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum SubscriptionPromotionalOffers: Hashable, Codable, RawRepresentable {
                case duration
                case name
                case numberOfPeriods
                case offerCode
                case offerMode
                case prices
                case subscription
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .duration: return "duration"
                    case .name: return "name"
                    case .numberOfPeriods: return "numberOfPeriods"
                    case .offerCode: return "offerCode"
                    case .offerMode: return "offerMode"
                    case .prices: return "prices"
                    case .subscription: return "subscription"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "duration": self = .duration
                    case "name": self = .name
                    case "numberOfPeriods": self = .numberOfPeriods
                    case "offerCode": self = .offerCode
                    case "offerMode": self = .offerMode
                    case "prices": self = .prices
                    case "subscription": self = .subscription
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Subscriptions: Hashable, Codable, RawRepresentable {
                case appStoreReviewScreenshot
                case availableInAllTerritories
                case familySharable
                case group
                case groupLevel
                case introductoryOffers
                case name
                case offerCodes
                case pricePoints
                case prices
                case productId
                case promotedPurchase
                case promotionalOffers
                case reviewNote
                case state
                case subscriptionAvailability
                case subscriptionLocalizations
                case subscriptionPeriod
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreReviewScreenshot: return "appStoreReviewScreenshot"
                    case .availableInAllTerritories: return "availableInAllTerritories"
                    case .familySharable: return "familySharable"
                    case .group: return "group"
                    case .groupLevel: return "groupLevel"
                    case .introductoryOffers: return "introductoryOffers"
                    case .name: return "name"
                    case .offerCodes: return "offerCodes"
                    case .pricePoints: return "pricePoints"
                    case .prices: return "prices"
                    case .productId: return "productId"
                    case .promotedPurchase: return "promotedPurchase"
                    case .promotionalOffers: return "promotionalOffers"
                    case .reviewNote: return "reviewNote"
                    case .state: return "state"
                    case .subscriptionAvailability: return "subscriptionAvailability"
                    case .subscriptionLocalizations: return "subscriptionLocalizations"
                    case .subscriptionPeriod: return "subscriptionPeriod"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreReviewScreenshot": self = .appStoreReviewScreenshot
                    case "availableInAllTerritories": self = .availableInAllTerritories
                    case "familySharable": self = .familySharable
                    case "group": self = .group
                    case "groupLevel": self = .groupLevel
                    case "introductoryOffers": self = .introductoryOffers
                    case "name": self = .name
                    case "offerCodes": self = .offerCodes
                    case "pricePoints": self = .pricePoints
                    case "prices": self = .prices
                    case "productId": self = .productId
                    case "promotedPurchase": self = .promotedPurchase
                    case "promotionalOffers": self = .promotionalOffers
                    case "reviewNote": self = .reviewNote
                    case "state": self = .state
                    case "subscriptionAvailability": self = .subscriptionAvailability
                    case "subscriptionLocalizations": self = .subscriptionLocalizations
                    case "subscriptionPeriod": self = .subscriptionPeriod
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case prices
            case subscription
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .prices: return "prices"
                case .subscription: return "subscription"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "prices": self = .prices
                case "subscription": self = .subscription
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Self, Int?>(key: "limit")] }
                set { self[Relation<Self, Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }
    }
}

extension Relation<V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Fields, [V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Fields.SubscriptionPromotionalOfferPrices]?> {
    /// the fields to include for returned resources of type subscriptionPromotionalOfferPrices
    public static var subscriptionPromotionalOfferPrices: Relation {
        .init(key: "fields[subscriptionPromotionalOfferPrices]")
    }
}

extension Relation<V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Fields, [V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Fields.SubscriptionPromotionalOffers]?> {
    /// the fields to include for returned resources of type subscriptionPromotionalOffers
    public static var subscriptionPromotionalOffers: Relation {
        .init(key: "fields[subscriptionPromotionalOffers]")
    }
}

extension Relation<V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Fields, [V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Fields.Subscriptions]?> {
    /// the fields to include for returned resources of type subscriptions
    public static var subscriptions: Relation {
        .init(key: "fields[subscriptions]")
    }
}

extension Relation<V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Filter, [String]?> {
    /// filter by territory
    public static var territory: Relation {
        .init(key: "filter[territory]")
    }
}

extension Relation<V1.Subscriptions.ById.PromotionalOffers.GET.Parameters.Limit, Int?> {
    /// maximum number of related prices returned (when they are included)
    public static var prices: Relation {
        .init(key: "limit[prices]")
    }
}

// swiftlint:enable all
