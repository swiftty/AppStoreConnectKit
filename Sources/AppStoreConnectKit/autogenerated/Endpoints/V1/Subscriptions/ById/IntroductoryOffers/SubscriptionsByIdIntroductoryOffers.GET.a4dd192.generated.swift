// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Subscriptions.ById.IntroductoryOffers {
    public struct GET: Endpoint {
        public typealias Response = SubscriptionIntroductoryOffersResponse

        public var path: String {
            "/v1/subscriptions/\(id)/introductoryOffers"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[subscriptionIntroductoryOffers]",
                             value: parameters.fields[.subscriptionIntroductoryOffers]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptionPricePoints]",
                             value: parameters.fields[.subscriptionPricePoints]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[subscriptions]",
                             value: parameters.fields[.subscriptions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[territories]",
                             value: parameters.fields[.territories]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[territory]",
                             value: parameters.filter[.territory]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of SubscriptionIntroductoryOffers as `SubscriptionIntroductoryOffersResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(SubscriptionIntroductoryOffersResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Subscriptions.ById.IntroductoryOffers.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum SubscriptionIntroductoryOffers: Hashable, Codable, RawRepresentable {
                case duration
                case endDate
                case numberOfPeriods
                case offerMode
                case startDate
                case subscription
                case subscriptionPricePoint
                case territory
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .duration: return "duration"
                    case .endDate: return "endDate"
                    case .numberOfPeriods: return "numberOfPeriods"
                    case .offerMode: return "offerMode"
                    case .startDate: return "startDate"
                    case .subscription: return "subscription"
                    case .subscriptionPricePoint: return "subscriptionPricePoint"
                    case .territory: return "territory"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "duration": self = .duration
                    case "endDate": self = .endDate
                    case "numberOfPeriods": self = .numberOfPeriods
                    case "offerMode": self = .offerMode
                    case "startDate": self = .startDate
                    case "subscription": self = .subscription
                    case "subscriptionPricePoint": self = .subscriptionPricePoint
                    case "territory": self = .territory
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum SubscriptionPricePoints: Hashable, Codable, RawRepresentable {
                case customerPrice
                case equalizations
                case proceeds
                case proceedsYear2
                case subscription
                case territory
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .customerPrice: return "customerPrice"
                    case .equalizations: return "equalizations"
                    case .proceeds: return "proceeds"
                    case .proceedsYear2: return "proceedsYear2"
                    case .subscription: return "subscription"
                    case .territory: return "territory"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "customerPrice": self = .customerPrice
                    case "equalizations": self = .equalizations
                    case "proceeds": self = .proceeds
                    case "proceedsYear2": self = .proceedsYear2
                    case "subscription": self = .subscription
                    case "territory": self = .territory
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Subscriptions: Hashable, Codable, RawRepresentable {
                case appStoreReviewScreenshot
                case availableInAllTerritories
                case familySharable
                case group
                case groupLevel
                case introductoryOffers
                case name
                case offerCodes
                case pricePoints
                case prices
                case productId
                case promotedPurchase
                case promotionalOffers
                case reviewNote
                case state
                case subscriptionLocalizations
                case subscriptionPeriod
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreReviewScreenshot: return "appStoreReviewScreenshot"
                    case .availableInAllTerritories: return "availableInAllTerritories"
                    case .familySharable: return "familySharable"
                    case .group: return "group"
                    case .groupLevel: return "groupLevel"
                    case .introductoryOffers: return "introductoryOffers"
                    case .name: return "name"
                    case .offerCodes: return "offerCodes"
                    case .pricePoints: return "pricePoints"
                    case .prices: return "prices"
                    case .productId: return "productId"
                    case .promotedPurchase: return "promotedPurchase"
                    case .promotionalOffers: return "promotionalOffers"
                    case .reviewNote: return "reviewNote"
                    case .state: return "state"
                    case .subscriptionLocalizations: return "subscriptionLocalizations"
                    case .subscriptionPeriod: return "subscriptionPeriod"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreReviewScreenshot": self = .appStoreReviewScreenshot
                    case "availableInAllTerritories": self = .availableInAllTerritories
                    case "familySharable": self = .familySharable
                    case "group": self = .group
                    case "groupLevel": self = .groupLevel
                    case "introductoryOffers": self = .introductoryOffers
                    case "name": self = .name
                    case "offerCodes": self = .offerCodes
                    case "pricePoints": self = .pricePoints
                    case "prices": self = .prices
                    case "productId": self = .productId
                    case "promotedPurchase": self = .promotedPurchase
                    case "promotionalOffers": self = .promotionalOffers
                    case "reviewNote": self = .reviewNote
                    case "state": self = .state
                    case "subscriptionLocalizations": self = .subscriptionLocalizations
                    case "subscriptionPeriod": self = .subscriptionPeriod
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Territories: Hashable, Codable, RawRepresentable {
                case currency
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .currency: return "currency"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "currency": self = .currency
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type subscriptionIntroductoryOffers
                public static var subscriptionIntroductoryOffers: Relation<[SubscriptionIntroductoryOffers]?> {
                    .init(key: "fields[subscriptionIntroductoryOffers]")
                }

                /// the fields to include for returned resources of type subscriptionPricePoints
                public static var subscriptionPricePoints: Relation<[SubscriptionPricePoints]?> {
                    .init(key: "fields[subscriptionPricePoints]")
                }

                /// the fields to include for returned resources of type subscriptions
                public static var subscriptions: Relation<[Subscriptions]?> {
                    .init(key: "fields[subscriptions]")
                }

                /// the fields to include for returned resources of type territories
                public static var territories: Relation<[Territories]?> {
                    .init(key: "fields[territories]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// filter by id(s) of related 'territory'
                public static var territory: Relation<[String]?> {
                    .init(key: "filter[territory]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case subscription
            case subscriptionPricePoint
            case territory
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .subscription: return "subscription"
                case .subscriptionPricePoint: return "subscriptionPricePoint"
                case .territory: return "territory"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "subscription": self = .subscription
                case "subscriptionPricePoint": self = .subscriptionPricePoint
                case "territory": self = .territory
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

// swiftlint:enable all
