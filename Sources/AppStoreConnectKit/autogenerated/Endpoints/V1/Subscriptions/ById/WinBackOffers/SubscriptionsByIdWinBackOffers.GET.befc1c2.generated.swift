// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Subscriptions.ById.WinBackOffers {
    public struct GET: Endpoint {
        public typealias Response = WinBackOffersResponse

        public var path: String {
            "/v1/subscriptions/\(id)/winBackOffers"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[winBackOfferPrices]",
                             value: parameters.fields[.winBackOfferPrices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[winBackOffers]",
                             value: parameters.fields[.winBackOffers]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[prices]",
                             value: parameters.limit[.prices].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of WinBackOffers as `WinBackOffersResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(WinBackOffersResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Subscriptions.ById.WinBackOffers.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct WinBackOfferPrices: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var subscriptionPricePoint: Self {
                    .init(rawValue: "subscriptionPricePoint")
                }

                public static var territory: Self {
                    .init(rawValue: "territory")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct WinBackOffers: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var customerEligibilityPaidSubscriptionDurationInMonths: Self {
                    .init(rawValue: "customerEligibilityPaidSubscriptionDurationInMonths")
                }

                public static var customerEligibilityTimeSinceLastSubscribedInMonths: Self {
                    .init(rawValue: "customerEligibilityTimeSinceLastSubscribedInMonths")
                }

                public static var customerEligibilityWaitBetweenOffersInMonths: Self {
                    .init(rawValue: "customerEligibilityWaitBetweenOffersInMonths")
                }

                public static var duration: Self {
                    .init(rawValue: "duration")
                }

                public static var endDate: Self {
                    .init(rawValue: "endDate")
                }

                public static var offerId: Self {
                    .init(rawValue: "offerId")
                }

                public static var offerMode: Self {
                    .init(rawValue: "offerMode")
                }

                public static var periodCount: Self {
                    .init(rawValue: "periodCount")
                }

                public static var prices: Self {
                    .init(rawValue: "prices")
                }

                public static var priority: Self {
                    .init(rawValue: "priority")
                }

                public static var promotionIntent: Self {
                    .init(rawValue: "promotionIntent")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var startDate: Self {
                    .init(rawValue: "startDate")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type winBackOfferPrices
                public static var winBackOfferPrices: Relation<[WinBackOfferPrices]?> {
                    .init(key: "fields[winBackOfferPrices]")
                }

                /// the fields to include for returned resources of type winBackOffers
                public static var winBackOffers: Relation<[WinBackOffers]?> {
                    .init(key: "fields[winBackOffers]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var prices: Self {
                .init(rawValue: "prices")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related prices returned (when they are included)
                public static var prices: Relation<Int?> {
                    .init(key: "limit[prices]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
