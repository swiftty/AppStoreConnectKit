// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.ScmPullRequests.ById {
    public struct GET: Endpoint {
        public typealias Response = ScmPullRequestResponse

        public var path: String {
            "/v1/scmPullRequests/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[scmPullRequests]",
                             value: parameters.fields[.scmPullRequests]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single ScmPullRequest as `ScmPullRequestResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(ScmPullRequestResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.ScmPullRequests.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct ScmPullRequests: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var destinationBranchName: Self {
                    .init(rawValue: "destinationBranchName")
                }

                public static var destinationRepositoryName: Self {
                    .init(rawValue: "destinationRepositoryName")
                }

                public static var destinationRepositoryOwner: Self {
                    .init(rawValue: "destinationRepositoryOwner")
                }

                public static var isClosed: Self {
                    .init(rawValue: "isClosed")
                }

                public static var isCrossRepository: Self {
                    .init(rawValue: "isCrossRepository")
                }

                public static var number: Self {
                    .init(rawValue: "number")
                }

                public static var repository: Self {
                    .init(rawValue: "repository")
                }

                public static var sourceBranchName: Self {
                    .init(rawValue: "sourceBranchName")
                }

                public static var sourceRepositoryName: Self {
                    .init(rawValue: "sourceRepositoryName")
                }

                public static var sourceRepositoryOwner: Self {
                    .init(rawValue: "sourceRepositoryOwner")
                }

                public static var title: Self {
                    .init(rawValue: "title")
                }

                public static var webUrl: Self {
                    .init(rawValue: "webUrl")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type scmPullRequests
                public static var scmPullRequests: Relation<[ScmPullRequests]?> {
                    .init(key: "fields[scmPullRequests]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var repository: Self {
                .init(rawValue: "repository")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
