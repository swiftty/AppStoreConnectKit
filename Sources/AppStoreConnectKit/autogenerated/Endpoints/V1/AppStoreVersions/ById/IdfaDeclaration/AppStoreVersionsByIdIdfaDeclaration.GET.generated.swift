// autogenerated

// swiftlint:disable all
import Foundation

extension V1.AppStoreVersions.ById.IdfaDeclaration {
    @available(*, deprecated)
    public struct GET: Endpoint {
        public typealias Response = IdfaDeclarationResponse

        public var path: String {
            "/v1/appStoreVersions/\(id)/idfaDeclaration"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[idfaDeclarations]",
                             value: parameters.fields[.idfaDeclarations]?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Related resource as `IdfaDeclarationResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(IdfaDeclarationResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.AppStoreVersions.ById.IdfaDeclaration.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum IdfaDeclarations: Hashable, Codable, RawRepresentable {
                case appStoreVersion
                case attributesActionWithPreviousAd
                case attributesAppInstallationToPreviousAd
                case honorsLimitedAdTracking
                case servesAds
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreVersion: return "appStoreVersion"
                    case .attributesActionWithPreviousAd: return "attributesActionWithPreviousAd"
                    case .attributesAppInstallationToPreviousAd: return "attributesAppInstallationToPreviousAd"
                    case .honorsLimitedAdTracking: return "honorsLimitedAdTracking"
                    case .servesAds: return "servesAds"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreVersion": self = .appStoreVersion
                    case "attributesActionWithPreviousAd": self = .attributesActionWithPreviousAd
                    case "attributesAppInstallationToPreviousAd": self = .attributesAppInstallationToPreviousAd
                    case "honorsLimitedAdTracking": self = .honorsLimitedAdTracking
                    case "servesAds": self = .servesAds
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type idfaDeclarations
                public static var idfaDeclarations: Relation<[IdfaDeclarations]?> {
                    .init(key: "fields[idfaDeclarations]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
