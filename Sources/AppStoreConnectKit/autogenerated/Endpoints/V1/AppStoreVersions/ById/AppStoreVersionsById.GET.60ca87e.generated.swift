// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.AppStoreVersions.ById {
    public struct GET: Endpoint {
        public typealias Response = AppStoreVersionResponse

        public var path: String {
            "/v1/appStoreVersions/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[ageRatingDeclarations]",
                             value: parameters.fields[.ageRatingDeclarations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appClipDefaultExperiences]",
                             value: parameters.fields[.appClipDefaultExperiences]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreReviewDetails]",
                             value: parameters.fields[.appStoreReviewDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionExperiments]",
                             value: parameters.fields[.appStoreVersionExperiments]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionLocalizations]",
                             value: parameters.fields[.appStoreVersionLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionPhasedReleases]",
                             value: parameters.fields[.appStoreVersionPhasedReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersionSubmissions]",
                             value: parameters.fields[.appStoreVersionSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[builds]",
                             value: parameters.fields[.builds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[customerReviews]",
                             value: parameters.fields[.customerReviews]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[routingAppCoverages]",
                             value: parameters.fields[.routingAppCoverages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appStoreVersionExperimentsV2]",
                             value: parameters.limit[.appStoreVersionExperimentsV2].map { "\($0)" }),
                URLQueryItem(name: "limit[appStoreVersionExperiments]",
                             value: parameters.limit[.appStoreVersionExperiments].map { "\($0)" }),
                URLQueryItem(name: "limit[appStoreVersionLocalizations]",
                             value: parameters.limit[.appStoreVersionLocalizations].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single AppStoreVersion as `AppStoreVersionResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppStoreVersionResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.AppStoreVersions.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum AgeRatingDeclarations: Hashable, Codable, RawRepresentable {
                case alcoholTobaccoOrDrugUseOrReferences
                case contests
                case gambling
                case gamblingAndContests
                case gamblingSimulated
                case horrorOrFearThemes
                case kidsAgeBand
                case matureOrSuggestiveThemes
                case medicalOrTreatmentInformation
                case profanityOrCrudeHumor
                case seventeenPlus
                case sexualContentGraphicAndNudity
                case sexualContentOrNudity
                case unrestrictedWebAccess
                case violenceCartoonOrFantasy
                case violenceRealistic
                case violenceRealisticProlongedGraphicOrSadistic
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .alcoholTobaccoOrDrugUseOrReferences: return "alcoholTobaccoOrDrugUseOrReferences"
                    case .contests: return "contests"
                    case .gambling: return "gambling"
                    case .gamblingAndContests: return "gamblingAndContests"
                    case .gamblingSimulated: return "gamblingSimulated"
                    case .horrorOrFearThemes: return "horrorOrFearThemes"
                    case .kidsAgeBand: return "kidsAgeBand"
                    case .matureOrSuggestiveThemes: return "matureOrSuggestiveThemes"
                    case .medicalOrTreatmentInformation: return "medicalOrTreatmentInformation"
                    case .profanityOrCrudeHumor: return "profanityOrCrudeHumor"
                    case .seventeenPlus: return "seventeenPlus"
                    case .sexualContentGraphicAndNudity: return "sexualContentGraphicAndNudity"
                    case .sexualContentOrNudity: return "sexualContentOrNudity"
                    case .unrestrictedWebAccess: return "unrestrictedWebAccess"
                    case .violenceCartoonOrFantasy: return "violenceCartoonOrFantasy"
                    case .violenceRealistic: return "violenceRealistic"
                    case .violenceRealisticProlongedGraphicOrSadistic: return "violenceRealisticProlongedGraphicOrSadistic"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "alcoholTobaccoOrDrugUseOrReferences": self = .alcoholTobaccoOrDrugUseOrReferences
                    case "contests": self = .contests
                    case "gambling": self = .gambling
                    case "gamblingAndContests": self = .gamblingAndContests
                    case "gamblingSimulated": self = .gamblingSimulated
                    case "horrorOrFearThemes": self = .horrorOrFearThemes
                    case "kidsAgeBand": self = .kidsAgeBand
                    case "matureOrSuggestiveThemes": self = .matureOrSuggestiveThemes
                    case "medicalOrTreatmentInformation": self = .medicalOrTreatmentInformation
                    case "profanityOrCrudeHumor": self = .profanityOrCrudeHumor
                    case "seventeenPlus": self = .seventeenPlus
                    case "sexualContentGraphicAndNudity": self = .sexualContentGraphicAndNudity
                    case "sexualContentOrNudity": self = .sexualContentOrNudity
                    case "unrestrictedWebAccess": self = .unrestrictedWebAccess
                    case "violenceCartoonOrFantasy": self = .violenceCartoonOrFantasy
                    case "violenceRealistic": self = .violenceRealistic
                    case "violenceRealisticProlongedGraphicOrSadistic": self = .violenceRealisticProlongedGraphicOrSadistic
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppClipDefaultExperiences: Hashable, Codable, RawRepresentable {
                case action
                case appClip
                case appClipAppStoreReviewDetail
                case appClipDefaultExperienceLocalizations
                case appClipDefaultExperienceTemplate
                case releaseWithAppStoreVersion
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .action: return "action"
                    case .appClip: return "appClip"
                    case .appClipAppStoreReviewDetail: return "appClipAppStoreReviewDetail"
                    case .appClipDefaultExperienceLocalizations: return "appClipDefaultExperienceLocalizations"
                    case .appClipDefaultExperienceTemplate: return "appClipDefaultExperienceTemplate"
                    case .releaseWithAppStoreVersion: return "releaseWithAppStoreVersion"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "action": self = .action
                    case "appClip": self = .appClip
                    case "appClipAppStoreReviewDetail": self = .appClipAppStoreReviewDetail
                    case "appClipDefaultExperienceLocalizations": self = .appClipDefaultExperienceLocalizations
                    case "appClipDefaultExperienceTemplate": self = .appClipDefaultExperienceTemplate
                    case "releaseWithAppStoreVersion": self = .releaseWithAppStoreVersion
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreReviewDetails: Hashable, Codable, RawRepresentable {
                case appStoreReviewAttachments
                case appStoreVersion
                case contactEmail
                case contactFirstName
                case contactLastName
                case contactPhone
                case demoAccountName
                case demoAccountPassword
                case demoAccountRequired
                case notes
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreReviewAttachments: return "appStoreReviewAttachments"
                    case .appStoreVersion: return "appStoreVersion"
                    case .contactEmail: return "contactEmail"
                    case .contactFirstName: return "contactFirstName"
                    case .contactLastName: return "contactLastName"
                    case .contactPhone: return "contactPhone"
                    case .demoAccountName: return "demoAccountName"
                    case .demoAccountPassword: return "demoAccountPassword"
                    case .demoAccountRequired: return "demoAccountRequired"
                    case .notes: return "notes"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreReviewAttachments": self = .appStoreReviewAttachments
                    case "appStoreVersion": self = .appStoreVersion
                    case "contactEmail": self = .contactEmail
                    case "contactFirstName": self = .contactFirstName
                    case "contactLastName": self = .contactLastName
                    case "contactPhone": self = .contactPhone
                    case "demoAccountName": self = .demoAccountName
                    case "demoAccountPassword": self = .demoAccountPassword
                    case "demoAccountRequired": self = .demoAccountRequired
                    case "notes": self = .notes
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersionExperiments: Hashable, Codable, RawRepresentable {
                case app
                case appStoreVersionExperimentTreatments
                case controlVersions
                case endDate
                case latestControlVersion
                case name
                case platform
                case reviewRequired
                case startDate
                case started
                case state
                case trafficProportion
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appStoreVersionExperimentTreatments: return "appStoreVersionExperimentTreatments"
                    case .controlVersions: return "controlVersions"
                    case .endDate: return "endDate"
                    case .latestControlVersion: return "latestControlVersion"
                    case .name: return "name"
                    case .platform: return "platform"
                    case .reviewRequired: return "reviewRequired"
                    case .startDate: return "startDate"
                    case .started: return "started"
                    case .state: return "state"
                    case .trafficProportion: return "trafficProportion"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appStoreVersionExperimentTreatments": self = .appStoreVersionExperimentTreatments
                    case "controlVersions": self = .controlVersions
                    case "endDate": self = .endDate
                    case "latestControlVersion": self = .latestControlVersion
                    case "name": self = .name
                    case "platform": self = .platform
                    case "reviewRequired": self = .reviewRequired
                    case "startDate": self = .startDate
                    case "started": self = .started
                    case "state": self = .state
                    case "trafficProportion": self = .trafficProportion
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersionLocalizations: Hashable, Codable, RawRepresentable {
                case appPreviewSets
                case appScreenshotSets
                case appStoreVersion
                case description
                case keywords
                case locale
                case marketingUrl
                case promotionalText
                case supportUrl
                case whatsNew
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appPreviewSets: return "appPreviewSets"
                    case .appScreenshotSets: return "appScreenshotSets"
                    case .appStoreVersion: return "appStoreVersion"
                    case .description: return "description"
                    case .keywords: return "keywords"
                    case .locale: return "locale"
                    case .marketingUrl: return "marketingUrl"
                    case .promotionalText: return "promotionalText"
                    case .supportUrl: return "supportUrl"
                    case .whatsNew: return "whatsNew"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appPreviewSets": self = .appPreviewSets
                    case "appScreenshotSets": self = .appScreenshotSets
                    case "appStoreVersion": self = .appStoreVersion
                    case "description": self = .description
                    case "keywords": self = .keywords
                    case "locale": self = .locale
                    case "marketingUrl": self = .marketingUrl
                    case "promotionalText": self = .promotionalText
                    case "supportUrl": self = .supportUrl
                    case "whatsNew": self = .whatsNew
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersionPhasedReleases: Hashable, Codable, RawRepresentable {
                case appStoreVersion
                case currentDayNumber
                case phasedReleaseState
                case startDate
                case totalPauseDuration
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreVersion: return "appStoreVersion"
                    case .currentDayNumber: return "currentDayNumber"
                    case .phasedReleaseState: return "phasedReleaseState"
                    case .startDate: return "startDate"
                    case .totalPauseDuration: return "totalPauseDuration"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreVersion": self = .appStoreVersion
                    case "currentDayNumber": self = .currentDayNumber
                    case "phasedReleaseState": self = .phasedReleaseState
                    case "startDate": self = .startDate
                    case "totalPauseDuration": self = .totalPauseDuration
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersionSubmissions: Hashable, Codable, RawRepresentable {
                case appStoreVersion
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreVersion: return "appStoreVersion"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreVersion": self = .appStoreVersion
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppStoreVersions: Hashable, Codable, RawRepresentable {
                case ageRatingDeclaration
                case app
                case appClipDefaultExperience
                case appStoreReviewDetail
                case appStoreState
                case appStoreVersionExperiments
                case appStoreVersionExperimentsV2
                case appStoreVersionLocalizations
                case appStoreVersionPhasedRelease
                case appStoreVersionSubmission
                case build
                case copyright
                case createdDate
                case customerReviews
                case downloadable
                case earliestReleaseDate
                case platform
                case releaseType
                case routingAppCoverage
                case versionString
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .ageRatingDeclaration: return "ageRatingDeclaration"
                    case .app: return "app"
                    case .appClipDefaultExperience: return "appClipDefaultExperience"
                    case .appStoreReviewDetail: return "appStoreReviewDetail"
                    case .appStoreState: return "appStoreState"
                    case .appStoreVersionExperiments: return "appStoreVersionExperiments"
                    case .appStoreVersionExperimentsV2: return "appStoreVersionExperimentsV2"
                    case .appStoreVersionLocalizations: return "appStoreVersionLocalizations"
                    case .appStoreVersionPhasedRelease: return "appStoreVersionPhasedRelease"
                    case .appStoreVersionSubmission: return "appStoreVersionSubmission"
                    case .build: return "build"
                    case .copyright: return "copyright"
                    case .createdDate: return "createdDate"
                    case .customerReviews: return "customerReviews"
                    case .downloadable: return "downloadable"
                    case .earliestReleaseDate: return "earliestReleaseDate"
                    case .platform: return "platform"
                    case .releaseType: return "releaseType"
                    case .routingAppCoverage: return "routingAppCoverage"
                    case .versionString: return "versionString"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "ageRatingDeclaration": self = .ageRatingDeclaration
                    case "app": self = .app
                    case "appClipDefaultExperience": self = .appClipDefaultExperience
                    case "appStoreReviewDetail": self = .appStoreReviewDetail
                    case "appStoreState": self = .appStoreState
                    case "appStoreVersionExperiments": self = .appStoreVersionExperiments
                    case "appStoreVersionExperimentsV2": self = .appStoreVersionExperimentsV2
                    case "appStoreVersionLocalizations": self = .appStoreVersionLocalizations
                    case "appStoreVersionPhasedRelease": self = .appStoreVersionPhasedRelease
                    case "appStoreVersionSubmission": self = .appStoreVersionSubmission
                    case "build": self = .build
                    case "copyright": self = .copyright
                    case "createdDate": self = .createdDate
                    case "customerReviews": self = .customerReviews
                    case "downloadable": self = .downloadable
                    case "earliestReleaseDate": self = .earliestReleaseDate
                    case "platform": self = .platform
                    case "releaseType": self = .releaseType
                    case "routingAppCoverage": self = .routingAppCoverage
                    case "versionString": self = .versionString
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Builds: Hashable, Codable, RawRepresentable {
                case app
                case appEncryptionDeclaration
                case appStoreVersion
                case betaAppReviewSubmission
                case betaBuildLocalizations
                case betaGroups
                case buildAudienceType
                case buildBetaDetail
                case buildBundles
                case computedMinMacOsVersion
                case diagnosticSignatures
                case expirationDate
                case expired
                case iconAssetToken
                case icons
                case individualTesters
                case lsMinimumSystemVersion
                case minOsVersion
                case perfPowerMetrics
                case preReleaseVersion
                case processingState
                case uploadedDate
                case usesNonExemptEncryption
                case version
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .appEncryptionDeclaration: return "appEncryptionDeclaration"
                    case .appStoreVersion: return "appStoreVersion"
                    case .betaAppReviewSubmission: return "betaAppReviewSubmission"
                    case .betaBuildLocalizations: return "betaBuildLocalizations"
                    case .betaGroups: return "betaGroups"
                    case .buildAudienceType: return "buildAudienceType"
                    case .buildBetaDetail: return "buildBetaDetail"
                    case .buildBundles: return "buildBundles"
                    case .computedMinMacOsVersion: return "computedMinMacOsVersion"
                    case .diagnosticSignatures: return "diagnosticSignatures"
                    case .expirationDate: return "expirationDate"
                    case .expired: return "expired"
                    case .iconAssetToken: return "iconAssetToken"
                    case .icons: return "icons"
                    case .individualTesters: return "individualTesters"
                    case .lsMinimumSystemVersion: return "lsMinimumSystemVersion"
                    case .minOsVersion: return "minOsVersion"
                    case .perfPowerMetrics: return "perfPowerMetrics"
                    case .preReleaseVersion: return "preReleaseVersion"
                    case .processingState: return "processingState"
                    case .uploadedDate: return "uploadedDate"
                    case .usesNonExemptEncryption: return "usesNonExemptEncryption"
                    case .version: return "version"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "appEncryptionDeclaration": self = .appEncryptionDeclaration
                    case "appStoreVersion": self = .appStoreVersion
                    case "betaAppReviewSubmission": self = .betaAppReviewSubmission
                    case "betaBuildLocalizations": self = .betaBuildLocalizations
                    case "betaGroups": self = .betaGroups
                    case "buildAudienceType": self = .buildAudienceType
                    case "buildBetaDetail": self = .buildBetaDetail
                    case "buildBundles": self = .buildBundles
                    case "computedMinMacOsVersion": self = .computedMinMacOsVersion
                    case "diagnosticSignatures": self = .diagnosticSignatures
                    case "expirationDate": self = .expirationDate
                    case "expired": self = .expired
                    case "iconAssetToken": self = .iconAssetToken
                    case "icons": self = .icons
                    case "individualTesters": self = .individualTesters
                    case "lsMinimumSystemVersion": self = .lsMinimumSystemVersion
                    case "minOsVersion": self = .minOsVersion
                    case "perfPowerMetrics": self = .perfPowerMetrics
                    case "preReleaseVersion": self = .preReleaseVersion
                    case "processingState": self = .processingState
                    case "uploadedDate": self = .uploadedDate
                    case "usesNonExemptEncryption": self = .usesNonExemptEncryption
                    case "version": self = .version
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CustomerReviews: Hashable, Codable, RawRepresentable {
                case body
                case createdDate
                case rating
                case response
                case reviewerNickname
                case territory
                case title
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .body: return "body"
                    case .createdDate: return "createdDate"
                    case .rating: return "rating"
                    case .response: return "response"
                    case .reviewerNickname: return "reviewerNickname"
                    case .territory: return "territory"
                    case .title: return "title"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "body": self = .body
                    case "createdDate": self = .createdDate
                    case "rating": self = .rating
                    case "response": self = .response
                    case "reviewerNickname": self = .reviewerNickname
                    case "territory": self = .territory
                    case "title": self = .title
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum RoutingAppCoverages: Hashable, Codable, RawRepresentable {
                case appStoreVersion
                case assetDeliveryState
                case fileName
                case fileSize
                case sourceFileChecksum
                case uploadOperations
                case uploaded
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appStoreVersion: return "appStoreVersion"
                    case .assetDeliveryState: return "assetDeliveryState"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .sourceFileChecksum: return "sourceFileChecksum"
                    case .uploadOperations: return "uploadOperations"
                    case .uploaded: return "uploaded"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appStoreVersion": self = .appStoreVersion
                    case "assetDeliveryState": self = .assetDeliveryState
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "sourceFileChecksum": self = .sourceFileChecksum
                    case "uploadOperations": self = .uploadOperations
                    case "uploaded": self = .uploaded
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case ageRatingDeclaration
            case app
            case appClipDefaultExperience
            case appStoreReviewDetail
            case appStoreVersionExperiments
            case appStoreVersionExperimentsV2
            case appStoreVersionLocalizations
            case appStoreVersionPhasedRelease
            case appStoreVersionSubmission
            case build
            case routingAppCoverage
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .ageRatingDeclaration: return "ageRatingDeclaration"
                case .app: return "app"
                case .appClipDefaultExperience: return "appClipDefaultExperience"
                case .appStoreReviewDetail: return "appStoreReviewDetail"
                case .appStoreVersionExperiments: return "appStoreVersionExperiments"
                case .appStoreVersionExperimentsV2: return "appStoreVersionExperimentsV2"
                case .appStoreVersionLocalizations: return "appStoreVersionLocalizations"
                case .appStoreVersionPhasedRelease: return "appStoreVersionPhasedRelease"
                case .appStoreVersionSubmission: return "appStoreVersionSubmission"
                case .build: return "build"
                case .routingAppCoverage: return "routingAppCoverage"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "ageRatingDeclaration": self = .ageRatingDeclaration
                case "app": self = .app
                case "appClipDefaultExperience": self = .appClipDefaultExperience
                case "appStoreReviewDetail": self = .appStoreReviewDetail
                case "appStoreVersionExperiments": self = .appStoreVersionExperiments
                case "appStoreVersionExperimentsV2": self = .appStoreVersionExperimentsV2
                case "appStoreVersionLocalizations": self = .appStoreVersionLocalizations
                case "appStoreVersionPhasedRelease": self = .appStoreVersionPhasedRelease
                case "appStoreVersionSubmission": self = .appStoreVersionSubmission
                case "build": self = .build
                case "routingAppCoverage": self = .routingAppCoverage
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AgeRatingDeclarations]?> {
    /// the fields to include for returned resources of type ageRatingDeclarations
    public static var ageRatingDeclarations: Relation {
        .init(key: "fields[ageRatingDeclarations]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AppClipDefaultExperiences]?> {
    /// the fields to include for returned resources of type appClipDefaultExperiences
    public static var appClipDefaultExperiences: Relation {
        .init(key: "fields[appClipDefaultExperiences]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AppStoreReviewDetails]?> {
    /// the fields to include for returned resources of type appStoreReviewDetails
    public static var appStoreReviewDetails: Relation {
        .init(key: "fields[appStoreReviewDetails]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AppStoreVersionExperiments]?> {
    /// the fields to include for returned resources of type appStoreVersionExperiments
    public static var appStoreVersionExperiments: Relation {
        .init(key: "fields[appStoreVersionExperiments]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AppStoreVersionLocalizations]?> {
    /// the fields to include for returned resources of type appStoreVersionLocalizations
    public static var appStoreVersionLocalizations: Relation {
        .init(key: "fields[appStoreVersionLocalizations]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AppStoreVersionPhasedReleases]?> {
    /// the fields to include for returned resources of type appStoreVersionPhasedReleases
    public static var appStoreVersionPhasedReleases: Relation {
        .init(key: "fields[appStoreVersionPhasedReleases]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AppStoreVersionSubmissions]?> {
    /// the fields to include for returned resources of type appStoreVersionSubmissions
    public static var appStoreVersionSubmissions: Relation {
        .init(key: "fields[appStoreVersionSubmissions]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.AppStoreVersions]?> {
    /// the fields to include for returned resources of type appStoreVersions
    public static var appStoreVersions: Relation {
        .init(key: "fields[appStoreVersions]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.Builds]?> {
    /// the fields to include for returned resources of type builds
    public static var builds: Relation {
        .init(key: "fields[builds]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.CustomerReviews]?> {
    /// the fields to include for returned resources of type customerReviews
    public static var customerReviews: Relation {
        .init(key: "fields[customerReviews]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Fields, [V1.AppStoreVersions.ById.GET.Parameters.Fields.RoutingAppCoverages]?> {
    /// the fields to include for returned resources of type routingAppCoverages
    public static var routingAppCoverages: Relation {
        .init(key: "fields[routingAppCoverages]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
    public static var appStoreVersionExperimentsV2: Relation {
        .init(key: "limit[appStoreVersionExperimentsV2]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related appStoreVersionExperiments returned (when they are included)
    public static var appStoreVersionExperiments: Relation {
        .init(key: "limit[appStoreVersionExperiments]")
    }
}

extension Relation<V1.AppStoreVersions.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related appStoreVersionLocalizations returned (when they are included)
    public static var appStoreVersionLocalizations: Relation {
        .init(key: "limit[appStoreVersionLocalizations]")
    }
}

// swiftlint:enable all
