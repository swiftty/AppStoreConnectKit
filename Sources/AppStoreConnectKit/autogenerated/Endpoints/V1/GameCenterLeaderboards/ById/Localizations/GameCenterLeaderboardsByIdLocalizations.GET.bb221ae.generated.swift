// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterLeaderboards.ById.Localizations {
    public struct GET: Endpoint {
        public typealias Response = GameCenterLeaderboardLocalizationsResponse

        public var path: String {
            "/v1/gameCenterLeaderboards/\(id)/localizations"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[gameCenterLeaderboardImages]",
                             value: parameters.fields[.gameCenterLeaderboardImages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboardLocalizations]",
                             value: parameters.fields[.gameCenterLeaderboardLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboards]",
                             value: parameters.fields[.gameCenterLeaderboards]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of GameCenterLeaderboardLocalizations as `GameCenterLeaderboardLocalizationsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterLeaderboardLocalizationsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterLeaderboards.ById.Localizations.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum GameCenterLeaderboardImages: Hashable, Codable, RawRepresentable {
                case assetDeliveryState
                case fileName
                case fileSize
                case gameCenterLeaderboardLocalization
                case imageAsset
                case uploadOperations
                case uploaded
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .assetDeliveryState: return "assetDeliveryState"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .gameCenterLeaderboardLocalization: return "gameCenterLeaderboardLocalization"
                    case .imageAsset: return "imageAsset"
                    case .uploadOperations: return "uploadOperations"
                    case .uploaded: return "uploaded"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "assetDeliveryState": self = .assetDeliveryState
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "gameCenterLeaderboardLocalization": self = .gameCenterLeaderboardLocalization
                    case "imageAsset": self = .imageAsset
                    case "uploadOperations": self = .uploadOperations
                    case "uploaded": self = .uploaded
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterLeaderboardLocalizations: Hashable, Codable, RawRepresentable {
                case formatterOverride
                case formatterSuffix
                case formatterSuffixSingular
                case gameCenterLeaderboard
                case gameCenterLeaderboardImage
                case locale
                case name
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .formatterOverride: return "formatterOverride"
                    case .formatterSuffix: return "formatterSuffix"
                    case .formatterSuffixSingular: return "formatterSuffixSingular"
                    case .gameCenterLeaderboard: return "gameCenterLeaderboard"
                    case .gameCenterLeaderboardImage: return "gameCenterLeaderboardImage"
                    case .locale: return "locale"
                    case .name: return "name"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "formatterOverride": self = .formatterOverride
                    case "formatterSuffix": self = .formatterSuffix
                    case "formatterSuffixSingular": self = .formatterSuffixSingular
                    case "gameCenterLeaderboard": self = .gameCenterLeaderboard
                    case "gameCenterLeaderboardImage": self = .gameCenterLeaderboardImage
                    case "locale": self = .locale
                    case "name": self = .name
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterLeaderboards: Hashable, Codable, RawRepresentable {
                case archived
                case defaultFormatter
                case gameCenterDetail
                case gameCenterGroup
                case gameCenterLeaderboardSets
                case groupLeaderboard
                case localizations
                case recurrenceDuration
                case recurrenceRule
                case recurrenceStartDate
                case referenceName
                case releases
                case scoreRangeEnd
                case scoreRangeStart
                case scoreSortType
                case submissionType
                case vendorIdentifier
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .archived: return "archived"
                    case .defaultFormatter: return "defaultFormatter"
                    case .gameCenterDetail: return "gameCenterDetail"
                    case .gameCenterGroup: return "gameCenterGroup"
                    case .gameCenterLeaderboardSets: return "gameCenterLeaderboardSets"
                    case .groupLeaderboard: return "groupLeaderboard"
                    case .localizations: return "localizations"
                    case .recurrenceDuration: return "recurrenceDuration"
                    case .recurrenceRule: return "recurrenceRule"
                    case .recurrenceStartDate: return "recurrenceStartDate"
                    case .referenceName: return "referenceName"
                    case .releases: return "releases"
                    case .scoreRangeEnd: return "scoreRangeEnd"
                    case .scoreRangeStart: return "scoreRangeStart"
                    case .scoreSortType: return "scoreSortType"
                    case .submissionType: return "submissionType"
                    case .vendorIdentifier: return "vendorIdentifier"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "archived": self = .archived
                    case "defaultFormatter": self = .defaultFormatter
                    case "gameCenterDetail": self = .gameCenterDetail
                    case "gameCenterGroup": self = .gameCenterGroup
                    case "gameCenterLeaderboardSets": self = .gameCenterLeaderboardSets
                    case "groupLeaderboard": self = .groupLeaderboard
                    case "localizations": self = .localizations
                    case "recurrenceDuration": self = .recurrenceDuration
                    case "recurrenceRule": self = .recurrenceRule
                    case "recurrenceStartDate": self = .recurrenceStartDate
                    case "referenceName": self = .referenceName
                    case "releases": self = .releases
                    case "scoreRangeEnd": self = .scoreRangeEnd
                    case "scoreRangeStart": self = .scoreRangeStart
                    case "scoreSortType": self = .scoreSortType
                    case "submissionType": self = .submissionType
                    case "vendorIdentifier": self = .vendorIdentifier
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type gameCenterLeaderboardImages
                public static var gameCenterLeaderboardImages: Relation<[GameCenterLeaderboardImages]?> {
                    .init(key: "fields[gameCenterLeaderboardImages]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboardLocalizations
                public static var gameCenterLeaderboardLocalizations: Relation<[GameCenterLeaderboardLocalizations]?> {
                    .init(key: "fields[gameCenterLeaderboardLocalizations]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboards
                public static var gameCenterLeaderboards: Relation<[GameCenterLeaderboards]?> {
                    .init(key: "fields[gameCenterLeaderboards]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case gameCenterLeaderboard
            case gameCenterLeaderboardImage
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .gameCenterLeaderboard: return "gameCenterLeaderboard"
                case .gameCenterLeaderboardImage: return "gameCenterLeaderboardImage"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "gameCenterLeaderboard": self = .gameCenterLeaderboard
                case "gameCenterLeaderboardImage": self = .gameCenterLeaderboardImage
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

// swiftlint:enable all
