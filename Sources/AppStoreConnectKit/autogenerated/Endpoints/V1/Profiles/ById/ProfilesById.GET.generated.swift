// autogenerated

// swiftlint:disable all
import Foundation

extension V1.Profiles.ById {
    public struct GET: Endpoint {
        public typealias Response = ProfileResponse

        public var path: String {
            "/v1/profiles/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[bundleIds]",
                             value: parameters.fields[.bundleIds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[certificates]",
                             value: parameters.fields[.certificates]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[devices]",
                             value: parameters.fields[.devices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[profiles]",
                             value: parameters.fields[.profiles]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[certificates]",
                             value: parameters.limit[.certificates].map { "\($0)" }),
                URLQueryItem(name: "limit[devices]",
                             value: parameters.limit[.devices].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single Profile as `ProfileResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(ProfileResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Profiles.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum BundleIds: String, Hashable, Codable {
                case app
                case bundleIdCapabilities
                case identifier
                case name
                case platform
                case profiles
                case seedId
            }

            public enum Certificates: String, Hashable, Codable {
                case certificateContent
                case certificateType
                case csrContent
                case displayName
                case expirationDate
                case name
                case platform
                case serialNumber
            }

            public enum Devices: String, Hashable, Codable {
                case addedDate
                case deviceClass
                case model
                case name
                case platform
                case status
                case udid
            }

            public enum Profiles: String, Hashable, Codable {
                case bundleId
                case certificates
                case createdDate
                case devices
                case expirationDate
                case name
                case platform
                case profileContent
                case profileState
                case profileType
                case uuid
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type bundleIds
                public static var bundleIds: Relation<[BundleIds]?> {
                    .init(key: "fields[bundleIds]")
                }

                /// the fields to include for returned resources of type certificates
                public static var certificates: Relation<[Certificates]?> {
                    .init(key: "fields[certificates]")
                }

                /// the fields to include for returned resources of type devices
                public static var devices: Relation<[Devices]?> {
                    .init(key: "fields[devices]")
                }

                /// the fields to include for returned resources of type profiles
                public static var profiles: Relation<[Profiles]?> {
                    .init(key: "fields[profiles]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: String, Hashable, Codable {
            case bundleId
            case certificates
            case devices
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related certificates returned (when they are included)
                public static var certificates: Relation<Int?> {
                    .init(key: "limit[certificates]")
                }

                /// maximum number of related devices returned (when they are included)
                public static var devices: Relation<Int?> {
                    .init(key: "limit[devices]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
