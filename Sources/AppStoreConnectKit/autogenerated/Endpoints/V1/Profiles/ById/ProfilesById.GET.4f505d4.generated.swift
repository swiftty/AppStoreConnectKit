// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Profiles.ById {
    public struct GET: Endpoint {
        public typealias Response = ProfileResponse

        public var path: String {
            "/v1/profiles/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[bundleIds]",
                             value: parameters.fields[.bundleIds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[certificates]",
                             value: parameters.fields[.certificates]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[devices]",
                             value: parameters.fields[.devices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[profiles]",
                             value: parameters.fields[.profiles]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[certificates]",
                             value: parameters.limit[.certificates].map { "\($0)" }),
                URLQueryItem(name: "limit[devices]",
                             value: parameters.limit[.devices].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single Profile as `ProfileResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(ProfileResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Profiles.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct BundleIds: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var bundleIdCapabilities: Self {
                    .init(rawValue: "bundleIdCapabilities")
                }

                public static var identifier: Self {
                    .init(rawValue: "identifier")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var profiles: Self {
                    .init(rawValue: "profiles")
                }

                public static var seedId: Self {
                    .init(rawValue: "seedId")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Certificates: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var activated: Self {
                    .init(rawValue: "activated")
                }

                public static var certificateContent: Self {
                    .init(rawValue: "certificateContent")
                }

                public static var certificateType: Self {
                    .init(rawValue: "certificateType")
                }

                public static var displayName: Self {
                    .init(rawValue: "displayName")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var passTypeId: Self {
                    .init(rawValue: "passTypeId")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var serialNumber: Self {
                    .init(rawValue: "serialNumber")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Devices: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var addedDate: Self {
                    .init(rawValue: "addedDate")
                }

                public static var deviceClass: Self {
                    .init(rawValue: "deviceClass")
                }

                public static var model: Self {
                    .init(rawValue: "model")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var status: Self {
                    .init(rawValue: "status")
                }

                public static var udid: Self {
                    .init(rawValue: "udid")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Profiles: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public static var certificates: Self {
                    .init(rawValue: "certificates")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var devices: Self {
                    .init(rawValue: "devices")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var profileContent: Self {
                    .init(rawValue: "profileContent")
                }

                public static var profileState: Self {
                    .init(rawValue: "profileState")
                }

                public static var profileType: Self {
                    .init(rawValue: "profileType")
                }

                public static var uuid: Self {
                    .init(rawValue: "uuid")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type bundleIds
                public static var bundleIds: Relation<[BundleIds]?> {
                    .init(key: "fields[bundleIds]")
                }

                /// the fields to include for returned resources of type certificates
                public static var certificates: Relation<[Certificates]?> {
                    .init(key: "fields[certificates]")
                }

                /// the fields to include for returned resources of type devices
                public static var devices: Relation<[Devices]?> {
                    .init(key: "fields[devices]")
                }

                /// the fields to include for returned resources of type profiles
                public static var profiles: Relation<[Profiles]?> {
                    .init(key: "fields[profiles]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var bundleId: Self {
                .init(rawValue: "bundleId")
            }

            public static var certificates: Self {
                .init(rawValue: "certificates")
            }

            public static var devices: Self {
                .init(rawValue: "devices")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related certificates returned (when they are included)
                public static var certificates: Relation<Int?> {
                    .init(key: "limit[certificates]")
                }

                /// maximum number of related devices returned (when they are included)
                public static var devices: Relation<Int?> {
                    .init(key: "limit[devices]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
