// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Profiles.ById {
    public struct GET: Endpoint {
        public typealias Response = ProfileResponse

        public var path: String {
            "/v1/profiles/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[bundleIds]",
                             value: parameters.fields[.bundleIds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[certificates]",
                             value: parameters.fields[.certificates]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[devices]",
                             value: parameters.fields[.devices]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[profiles]",
                             value: parameters.fields[.profiles]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[certificates]",
                             value: parameters.limit[.certificates].map { "\($0)" }),
                URLQueryItem(name: "limit[devices]",
                             value: parameters.limit[.devices].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single Profile as `ProfileResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(ProfileResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Profiles.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum BundleIds: Hashable, Codable, RawRepresentable {
                case app
                case bundleIdCapabilities
                case identifier
                case name
                case platform
                case profiles
                case seedId
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .bundleIdCapabilities: return "bundleIdCapabilities"
                    case .identifier: return "identifier"
                    case .name: return "name"
                    case .platform: return "platform"
                    case .profiles: return "profiles"
                    case .seedId: return "seedId"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "bundleIdCapabilities": self = .bundleIdCapabilities
                    case "identifier": self = .identifier
                    case "name": self = .name
                    case "platform": self = .platform
                    case "profiles": self = .profiles
                    case "seedId": self = .seedId
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Certificates: Hashable, Codable, RawRepresentable {
                case certificateContent
                case certificateType
                case csrContent
                case displayName
                case expirationDate
                case name
                case platform
                case serialNumber
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .certificateContent: return "certificateContent"
                    case .certificateType: return "certificateType"
                    case .csrContent: return "csrContent"
                    case .displayName: return "displayName"
                    case .expirationDate: return "expirationDate"
                    case .name: return "name"
                    case .platform: return "platform"
                    case .serialNumber: return "serialNumber"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "certificateContent": self = .certificateContent
                    case "certificateType": self = .certificateType
                    case "csrContent": self = .csrContent
                    case "displayName": self = .displayName
                    case "expirationDate": self = .expirationDate
                    case "name": self = .name
                    case "platform": self = .platform
                    case "serialNumber": self = .serialNumber
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Devices: Hashable, Codable, RawRepresentable {
                case addedDate
                case deviceClass
                case model
                case name
                case platform
                case status
                case udid
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .addedDate: return "addedDate"
                    case .deviceClass: return "deviceClass"
                    case .model: return "model"
                    case .name: return "name"
                    case .platform: return "platform"
                    case .status: return "status"
                    case .udid: return "udid"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "addedDate": self = .addedDate
                    case "deviceClass": self = .deviceClass
                    case "model": self = .model
                    case "name": self = .name
                    case "platform": self = .platform
                    case "status": self = .status
                    case "udid": self = .udid
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum Profiles: Hashable, Codable, RawRepresentable {
                case bundleId
                case certificates
                case createdDate
                case devices
                case expirationDate
                case name
                case platform
                case profileContent
                case profileState
                case profileType
                case uuid
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .bundleId: return "bundleId"
                    case .certificates: return "certificates"
                    case .createdDate: return "createdDate"
                    case .devices: return "devices"
                    case .expirationDate: return "expirationDate"
                    case .name: return "name"
                    case .platform: return "platform"
                    case .profileContent: return "profileContent"
                    case .profileState: return "profileState"
                    case .profileType: return "profileType"
                    case .uuid: return "uuid"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "bundleId": self = .bundleId
                    case "certificates": self = .certificates
                    case "createdDate": self = .createdDate
                    case "devices": self = .devices
                    case "expirationDate": self = .expirationDate
                    case "name": self = .name
                    case "platform": self = .platform
                    case "profileContent": self = .profileContent
                    case "profileState": self = .profileState
                    case "profileType": self = .profileType
                    case "uuid": self = .uuid
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case bundleId
            case certificates
            case devices
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .bundleId: return "bundleId"
                case .certificates: return "certificates"
                case .devices: return "devices"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "bundleId": self = .bundleId
                case "certificates": self = .certificates
                case "devices": self = .devices
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }
    }
}

extension Relation<V1.Profiles.ById.GET.Parameters.Fields, [V1.Profiles.ById.GET.Parameters.Fields.BundleIds]?> {
    /// the fields to include for returned resources of type bundleIds
    public static var bundleIds: Relation {
        .init(key: "fields[bundleIds]")
    }
}

extension Relation<V1.Profiles.ById.GET.Parameters.Fields, [V1.Profiles.ById.GET.Parameters.Fields.Certificates]?> {
    /// the fields to include for returned resources of type certificates
    public static var certificates: Relation {
        .init(key: "fields[certificates]")
    }
}

extension Relation<V1.Profiles.ById.GET.Parameters.Fields, [V1.Profiles.ById.GET.Parameters.Fields.Devices]?> {
    /// the fields to include for returned resources of type devices
    public static var devices: Relation {
        .init(key: "fields[devices]")
    }
}

extension Relation<V1.Profiles.ById.GET.Parameters.Fields, [V1.Profiles.ById.GET.Parameters.Fields.Profiles]?> {
    /// the fields to include for returned resources of type profiles
    public static var profiles: Relation {
        .init(key: "fields[profiles]")
    }
}

extension Relation<V1.Profiles.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related certificates returned (when they are included)
    public static var certificates: Relation {
        .init(key: "limit[certificates]")
    }
}

extension Relation<V1.Profiles.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related devices returned (when they are included)
    public static var devices: Relation {
        .init(key: "limit[devices]")
    }
}

// swiftlint:enable all
