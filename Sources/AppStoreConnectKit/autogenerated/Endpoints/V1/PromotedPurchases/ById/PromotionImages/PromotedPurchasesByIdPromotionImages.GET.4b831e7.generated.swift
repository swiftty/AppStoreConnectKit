// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.PromotedPurchases.ById.PromotionImages {
    public struct GET: Endpoint {
        public typealias Response = PromotedPurchaseImagesResponse

        public var path: String {
            "/v1/promotedPurchases/\(id)/promotionImages"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[promotedPurchaseImages]",
                             value: parameters.fields[.promotedPurchaseImages]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[promotedPurchases]",
                             value: parameters.fields[.promotedPurchases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of PromotedPurchaseImages as `PromotedPurchaseImagesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(PromotedPurchaseImagesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.PromotedPurchases.ById.PromotionImages.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum PromotedPurchaseImages: Hashable, Codable, RawRepresentable {
                case assetToken
                case assetType
                case fileName
                case fileSize
                case imageAsset
                case promotedPurchase
                case sourceFileChecksum
                case state
                case uploadOperations
                case uploaded
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .assetToken: return "assetToken"
                    case .assetType: return "assetType"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .imageAsset: return "imageAsset"
                    case .promotedPurchase: return "promotedPurchase"
                    case .sourceFileChecksum: return "sourceFileChecksum"
                    case .state: return "state"
                    case .uploadOperations: return "uploadOperations"
                    case .uploaded: return "uploaded"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "assetToken": self = .assetToken
                    case "assetType": self = .assetType
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "imageAsset": self = .imageAsset
                    case "promotedPurchase": self = .promotedPurchase
                    case "sourceFileChecksum": self = .sourceFileChecksum
                    case "state": self = .state
                    case "uploadOperations": self = .uploadOperations
                    case "uploaded": self = .uploaded
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum PromotedPurchases: Hashable, Codable, RawRepresentable {
                case app
                case enabled
                case inAppPurchaseV2
                case promotionImages
                case state
                case subscription
                case visibleForAllUsers
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .app: return "app"
                    case .enabled: return "enabled"
                    case .inAppPurchaseV2: return "inAppPurchaseV2"
                    case .promotionImages: return "promotionImages"
                    case .state: return "state"
                    case .subscription: return "subscription"
                    case .visibleForAllUsers: return "visibleForAllUsers"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "app": self = .app
                    case "enabled": self = .enabled
                    case "inAppPurchaseV2": self = .inAppPurchaseV2
                    case "promotionImages": self = .promotionImages
                    case "state": self = .state
                    case "subscription": self = .subscription
                    case "visibleForAllUsers": self = .visibleForAllUsers
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type promotedPurchaseImages
                public static var promotedPurchaseImages: Relation<[PromotedPurchaseImages]?> {
                    .init(key: "fields[promotedPurchaseImages]")
                }

                /// the fields to include for returned resources of type promotedPurchases
                public static var promotedPurchases: Relation<[PromotedPurchases]?> {
                    .init(key: "fields[promotedPurchases]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case promotedPurchase
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .promotedPurchase: return "promotedPurchase"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "promotedPurchase": self = .promotedPurchase
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

// swiftlint:enable all
