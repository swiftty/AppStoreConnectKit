// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.PassTypeIds.ById.Certificates {
    public struct GET: Endpoint {
        public typealias Response = CertificatesResponse

        public var path: String {
            "/v1/passTypeIds/\(id)/certificates"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[certificates]",
                             value: parameters.fields[.certificates]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[passTypeIds]",
                             value: parameters.fields[.passTypeIds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[certificateType]",
                             value: parameters.filter[.certificateType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[displayName]",
                             value: parameters.filter[.displayName]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[id]",
                             value: parameters.filter[.id]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[serialNumber]",
                             value: parameters.filter[.serialNumber]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of Certificates as `CertificatesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(CertificatesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.PassTypeIds.ById.Certificates.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Certificates: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var activated: Self {
                    .init(rawValue: "activated")
                }

                public static var certificateContent: Self {
                    .init(rawValue: "certificateContent")
                }

                public static var certificateType: Self {
                    .init(rawValue: "certificateType")
                }

                public static var displayName: Self {
                    .init(rawValue: "displayName")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var passTypeId: Self {
                    .init(rawValue: "passTypeId")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var serialNumber: Self {
                    .init(rawValue: "serialNumber")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct PassTypeIds: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var certificates: Self {
                    .init(rawValue: "certificates")
                }

                public static var identifier: Self {
                    .init(rawValue: "identifier")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type certificates
                public static var certificates: Relation<[Certificates]?> {
                    .init(key: "fields[certificates]")
                }

                /// the fields to include for returned resources of type passTypeIds
                public static var passTypeIds: Relation<[PassTypeIds]?> {
                    .init(key: "fields[passTypeIds]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct CertificateType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var applePay: Self {
                    .init(rawValue: "APPLE_PAY")
                }

                public static var applePayMerchantIdentity: Self {
                    .init(rawValue: "APPLE_PAY_MERCHANT_IDENTITY")
                }

                public static var applePayPspIdentity: Self {
                    .init(rawValue: "APPLE_PAY_PSP_IDENTITY")
                }

                public static var applePayRsa: Self {
                    .init(rawValue: "APPLE_PAY_RSA")
                }

                public static var developerIdApplication: Self {
                    .init(rawValue: "DEVELOPER_ID_APPLICATION")
                }

                public static var developerIdApplicationG2: Self {
                    .init(rawValue: "DEVELOPER_ID_APPLICATION_G2")
                }

                public static var developerIdKext: Self {
                    .init(rawValue: "DEVELOPER_ID_KEXT")
                }

                public static var developerIdKextG2: Self {
                    .init(rawValue: "DEVELOPER_ID_KEXT_G2")
                }

                public static var development: Self {
                    .init(rawValue: "DEVELOPMENT")
                }

                public static var distribution: Self {
                    .init(rawValue: "DISTRIBUTION")
                }

                public static var iOSDevelopment: Self {
                    .init(rawValue: "IOS_DEVELOPMENT")
                }

                public static var iOSDistribution: Self {
                    .init(rawValue: "IOS_DISTRIBUTION")
                }

                public static var identityAccess: Self {
                    .init(rawValue: "IDENTITY_ACCESS")
                }

                public static var macAppDevelopment: Self {
                    .init(rawValue: "MAC_APP_DEVELOPMENT")
                }

                public static var macAppDistribution: Self {
                    .init(rawValue: "MAC_APP_DISTRIBUTION")
                }

                public static var macInstallerDistribution: Self {
                    .init(rawValue: "MAC_INSTALLER_DISTRIBUTION")
                }

                public static var passTypeId: Self {
                    .init(rawValue: "PASS_TYPE_ID")
                }

                public static var passTypeIdWithNfc: Self {
                    .init(rawValue: "PASS_TYPE_ID_WITH_NFC")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'certificateType'
                public static var certificateType: Relation<[CertificateType]?> {
                    .init(key: "filter[certificateType]")
                }

                /// filter by attribute 'displayName'
                public static var displayName: Relation<[String]?> {
                    .init(key: "filter[displayName]")
                }

                /// filter by id(s)
                public static var id: Relation<[String]?> {
                    .init(key: "filter[id]")
                }

                /// filter by attribute 'serialNumber'
                public static var serialNumber: Relation<[String]?> {
                    .init(key: "filter[serialNumber]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var passTypeId: Self {
                .init(rawValue: "passTypeId")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Sort: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var certificateType: Self {
                .init(rawValue: "certificateType")
            }

            public static var certificateTypeDesc: Self {
                .init(rawValue: "-certificateType")
            }

            public static var displayName: Self {
                .init(rawValue: "displayName")
            }

            public static var displayNameDesc: Self {
                .init(rawValue: "-displayName")
            }

            public static var id: Self {
                .init(rawValue: "id")
            }

            public static var idDesc: Self {
                .init(rawValue: "-id")
            }

            public static var serialNumber: Self {
                .init(rawValue: "serialNumber")
            }

            public static var serialNumberDesc: Self {
                .init(rawValue: "-serialNumber")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
