// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterDetails.ById {
    public struct GET: Endpoint {
        public typealias Response = GameCenterDetailResponse

        public var path: String {
            "/v1/gameCenterDetails/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[gameCenterAchievementReleases]",
                             value: parameters.fields[.gameCenterAchievementReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAchievements]",
                             value: parameters.fields[.gameCenterAchievements]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterActivities]",
                             value: parameters.fields[.gameCenterActivities]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterActivityVersionReleases]",
                             value: parameters.fields[.gameCenterActivityVersionReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAppVersions]",
                             value: parameters.fields[.gameCenterAppVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterChallengeVersionReleases]",
                             value: parameters.fields[.gameCenterChallengeVersionReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterChallenges]",
                             value: parameters.fields[.gameCenterChallenges]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterDetails]",
                             value: parameters.fields[.gameCenterDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterGroups]",
                             value: parameters.fields[.gameCenterGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboardReleases]",
                             value: parameters.fields[.gameCenterLeaderboardReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboardSetReleases]",
                             value: parameters.fields[.gameCenterLeaderboardSetReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboardSets]",
                             value: parameters.fields[.gameCenterLeaderboardSets]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterLeaderboards]",
                             value: parameters.fields[.gameCenterLeaderboards]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[achievementReleases]",
                             value: parameters.limit[.achievementReleases].map { "\($0)" }),
                URLQueryItem(name: "limit[activityReleases]",
                             value: parameters.limit[.activityReleases].map { "\($0)" }),
                URLQueryItem(name: "limit[challengeReleases]",
                             value: parameters.limit[.challengeReleases].map { "\($0)" }),
                URLQueryItem(name: "limit[challengesMinimumPlatformVersions]",
                             value: parameters.limit[.challengesMinimumPlatformVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterAchievements]",
                             value: parameters.limit[.gameCenterAchievements].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterActivities]",
                             value: parameters.limit[.gameCenterActivities].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterAppVersions]",
                             value: parameters.limit[.gameCenterAppVersions].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterChallenges]",
                             value: parameters.limit[.gameCenterChallenges].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterLeaderboardSets]",
                             value: parameters.limit[.gameCenterLeaderboardSets].map { "\($0)" }),
                URLQueryItem(name: "limit[gameCenterLeaderboards]",
                             value: parameters.limit[.gameCenterLeaderboards].map { "\($0)" }),
                URLQueryItem(name: "limit[leaderboardReleases]",
                             value: parameters.limit[.leaderboardReleases].map { "\($0)" }),
                URLQueryItem(name: "limit[leaderboardSetReleases]",
                             value: parameters.limit[.leaderboardSetReleases].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single GameCenterDetail as `GameCenterDetailResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterDetailResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterDetails.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct GameCenterAchievementReleases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var gameCenterAchievement: Self {
                    .init(rawValue: "gameCenterAchievement")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var live: Self {
                    .init(rawValue: "live")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterAchievements: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var activity: Self {
                    .init(rawValue: "activity")
                }

                public static var activityProperties: Self {
                    .init(rawValue: "activityProperties")
                }

                public static var archived: Self {
                    .init(rawValue: "archived")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var groupAchievement: Self {
                    .init(rawValue: "groupAchievement")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var points: Self {
                    .init(rawValue: "points")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var releases: Self {
                    .init(rawValue: "releases")
                }

                public static var repeatable: Self {
                    .init(rawValue: "repeatable")
                }

                public static var showBeforeEarned: Self {
                    .init(rawValue: "showBeforeEarned")
                }

                public static var vendorIdentifier: Self {
                    .init(rawValue: "vendorIdentifier")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterActivities: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var achievements: Self {
                    .init(rawValue: "achievements")
                }

                public static var archived: Self {
                    .init(rawValue: "archived")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var leaderboards: Self {
                    .init(rawValue: "leaderboards")
                }

                public static var maximumPlayersCount: Self {
                    .init(rawValue: "maximumPlayersCount")
                }

                public static var minimumPlayersCount: Self {
                    .init(rawValue: "minimumPlayersCount")
                }

                public static var playStyle: Self {
                    .init(rawValue: "playStyle")
                }

                public static var properties: Self {
                    .init(rawValue: "properties")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var supportsPartyCode: Self {
                    .init(rawValue: "supportsPartyCode")
                }

                public static var vendorIdentifier: Self {
                    .init(rawValue: "vendorIdentifier")
                }

                public static var versions: Self {
                    .init(rawValue: "versions")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterActivityVersionReleases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterAppVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var compatibilityVersions: Self {
                    .init(rawValue: "compatibilityVersions")
                }

                public static var enabled: Self {
                    .init(rawValue: "enabled")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterChallengeVersionReleases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterChallenges: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var allowedDurations: Self {
                    .init(rawValue: "allowedDurations")
                }

                public static var archived: Self {
                    .init(rawValue: "archived")
                }

                public static var challengeType: Self {
                    .init(rawValue: "challengeType")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var leaderboard: Self {
                    .init(rawValue: "leaderboard")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var repeatable: Self {
                    .init(rawValue: "repeatable")
                }

                public static var vendorIdentifier: Self {
                    .init(rawValue: "vendorIdentifier")
                }

                public static var versions: Self {
                    .init(rawValue: "versions")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterDetails: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var achievementReleases: Self {
                    .init(rawValue: "achievementReleases")
                }

                public static var activityReleases: Self {
                    .init(rawValue: "activityReleases")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var arcadeEnabled: Self {
                    .init(rawValue: "arcadeEnabled")
                }

                public static var challengeEnabled: Self {
                    .init(rawValue: "challengeEnabled")
                }

                public static var challengeReleases: Self {
                    .init(rawValue: "challengeReleases")
                }

                public static var challengesMinimumPlatformVersions: Self {
                    .init(rawValue: "challengesMinimumPlatformVersions")
                }

                public static var defaultGroupLeaderboard: Self {
                    .init(rawValue: "defaultGroupLeaderboard")
                }

                public static var defaultLeaderboard: Self {
                    .init(rawValue: "defaultLeaderboard")
                }

                public static var gameCenterAchievements: Self {
                    .init(rawValue: "gameCenterAchievements")
                }

                public static var gameCenterActivities: Self {
                    .init(rawValue: "gameCenterActivities")
                }

                public static var gameCenterAppVersions: Self {
                    .init(rawValue: "gameCenterAppVersions")
                }

                public static var gameCenterChallenges: Self {
                    .init(rawValue: "gameCenterChallenges")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var gameCenterLeaderboardSets: Self {
                    .init(rawValue: "gameCenterLeaderboardSets")
                }

                public static var gameCenterLeaderboards: Self {
                    .init(rawValue: "gameCenterLeaderboards")
                }

                public static var leaderboardReleases: Self {
                    .init(rawValue: "leaderboardReleases")
                }

                public static var leaderboardSetReleases: Self {
                    .init(rawValue: "leaderboardSetReleases")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterGroups: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var gameCenterAchievements: Self {
                    .init(rawValue: "gameCenterAchievements")
                }

                public static var gameCenterActivities: Self {
                    .init(rawValue: "gameCenterActivities")
                }

                public static var gameCenterChallenges: Self {
                    .init(rawValue: "gameCenterChallenges")
                }

                public static var gameCenterDetails: Self {
                    .init(rawValue: "gameCenterDetails")
                }

                public static var gameCenterLeaderboardSets: Self {
                    .init(rawValue: "gameCenterLeaderboardSets")
                }

                public static var gameCenterLeaderboards: Self {
                    .init(rawValue: "gameCenterLeaderboards")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterLeaderboardReleases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterLeaderboard: Self {
                    .init(rawValue: "gameCenterLeaderboard")
                }

                public static var live: Self {
                    .init(rawValue: "live")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterLeaderboardSetReleases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterLeaderboardSet: Self {
                    .init(rawValue: "gameCenterLeaderboardSet")
                }

                public static var live: Self {
                    .init(rawValue: "live")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterLeaderboardSets: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var gameCenterLeaderboards: Self {
                    .init(rawValue: "gameCenterLeaderboards")
                }

                public static var groupLeaderboardSet: Self {
                    .init(rawValue: "groupLeaderboardSet")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var releases: Self {
                    .init(rawValue: "releases")
                }

                public static var vendorIdentifier: Self {
                    .init(rawValue: "vendorIdentifier")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterLeaderboards: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var activity: Self {
                    .init(rawValue: "activity")
                }

                public static var activityProperties: Self {
                    .init(rawValue: "activityProperties")
                }

                public static var archived: Self {
                    .init(rawValue: "archived")
                }

                public static var challenge: Self {
                    .init(rawValue: "challenge")
                }

                public static var defaultFormatter: Self {
                    .init(rawValue: "defaultFormatter")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterGroup: Self {
                    .init(rawValue: "gameCenterGroup")
                }

                public static var gameCenterLeaderboardSets: Self {
                    .init(rawValue: "gameCenterLeaderboardSets")
                }

                public static var groupLeaderboard: Self {
                    .init(rawValue: "groupLeaderboard")
                }

                public static var localizations: Self {
                    .init(rawValue: "localizations")
                }

                public static var recurrenceDuration: Self {
                    .init(rawValue: "recurrenceDuration")
                }

                public static var recurrenceRule: Self {
                    .init(rawValue: "recurrenceRule")
                }

                public static var recurrenceStartDate: Self {
                    .init(rawValue: "recurrenceStartDate")
                }

                public static var referenceName: Self {
                    .init(rawValue: "referenceName")
                }

                public static var releases: Self {
                    .init(rawValue: "releases")
                }

                public static var scoreRangeEnd: Self {
                    .init(rawValue: "scoreRangeEnd")
                }

                public static var scoreRangeStart: Self {
                    .init(rawValue: "scoreRangeStart")
                }

                public static var scoreSortType: Self {
                    .init(rawValue: "scoreSortType")
                }

                public static var submissionType: Self {
                    .init(rawValue: "submissionType")
                }

                public static var vendorIdentifier: Self {
                    .init(rawValue: "vendorIdentifier")
                }

                public static var visibility: Self {
                    .init(rawValue: "visibility")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type gameCenterAchievementReleases
                public static var gameCenterAchievementReleases: Relation<[GameCenterAchievementReleases]?> {
                    .init(key: "fields[gameCenterAchievementReleases]")
                }

                /// the fields to include for returned resources of type gameCenterAchievements
                public static var gameCenterAchievements: Relation<[GameCenterAchievements]?> {
                    .init(key: "fields[gameCenterAchievements]")
                }

                /// the fields to include for returned resources of type gameCenterActivities
                public static var gameCenterActivities: Relation<[GameCenterActivities]?> {
                    .init(key: "fields[gameCenterActivities]")
                }

                /// the fields to include for returned resources of type gameCenterActivityVersionReleases
                public static var gameCenterActivityVersionReleases: Relation<[GameCenterActivityVersionReleases]?> {
                    .init(key: "fields[gameCenterActivityVersionReleases]")
                }

                /// the fields to include for returned resources of type gameCenterAppVersions
                public static var gameCenterAppVersions: Relation<[GameCenterAppVersions]?> {
                    .init(key: "fields[gameCenterAppVersions]")
                }

                /// the fields to include for returned resources of type gameCenterChallengeVersionReleases
                public static var gameCenterChallengeVersionReleases: Relation<[GameCenterChallengeVersionReleases]?> {
                    .init(key: "fields[gameCenterChallengeVersionReleases]")
                }

                /// the fields to include for returned resources of type gameCenterChallenges
                public static var gameCenterChallenges: Relation<[GameCenterChallenges]?> {
                    .init(key: "fields[gameCenterChallenges]")
                }

                /// the fields to include for returned resources of type gameCenterDetails
                public static var gameCenterDetails: Relation<[GameCenterDetails]?> {
                    .init(key: "fields[gameCenterDetails]")
                }

                /// the fields to include for returned resources of type gameCenterGroups
                public static var gameCenterGroups: Relation<[GameCenterGroups]?> {
                    .init(key: "fields[gameCenterGroups]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboardReleases
                public static var gameCenterLeaderboardReleases: Relation<[GameCenterLeaderboardReleases]?> {
                    .init(key: "fields[gameCenterLeaderboardReleases]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
                public static var gameCenterLeaderboardSetReleases: Relation<[GameCenterLeaderboardSetReleases]?> {
                    .init(key: "fields[gameCenterLeaderboardSetReleases]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboardSets
                public static var gameCenterLeaderboardSets: Relation<[GameCenterLeaderboardSets]?> {
                    .init(key: "fields[gameCenterLeaderboardSets]")
                }

                /// the fields to include for returned resources of type gameCenterLeaderboards
                public static var gameCenterLeaderboards: Relation<[GameCenterLeaderboards]?> {
                    .init(key: "fields[gameCenterLeaderboards]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var achievementReleases: Self {
                .init(rawValue: "achievementReleases")
            }

            public static var activityReleases: Self {
                .init(rawValue: "activityReleases")
            }

            public static var app: Self {
                .init(rawValue: "app")
            }

            public static var challengeReleases: Self {
                .init(rawValue: "challengeReleases")
            }

            public static var challengesMinimumPlatformVersions: Self {
                .init(rawValue: "challengesMinimumPlatformVersions")
            }

            public static var defaultGroupLeaderboard: Self {
                .init(rawValue: "defaultGroupLeaderboard")
            }

            public static var defaultLeaderboard: Self {
                .init(rawValue: "defaultLeaderboard")
            }

            public static var gameCenterAchievements: Self {
                .init(rawValue: "gameCenterAchievements")
            }

            public static var gameCenterActivities: Self {
                .init(rawValue: "gameCenterActivities")
            }

            public static var gameCenterAppVersions: Self {
                .init(rawValue: "gameCenterAppVersions")
            }

            public static var gameCenterChallenges: Self {
                .init(rawValue: "gameCenterChallenges")
            }

            public static var gameCenterGroup: Self {
                .init(rawValue: "gameCenterGroup")
            }

            public static var gameCenterLeaderboardSets: Self {
                .init(rawValue: "gameCenterLeaderboardSets")
            }

            public static var gameCenterLeaderboards: Self {
                .init(rawValue: "gameCenterLeaderboards")
            }

            public static var leaderboardReleases: Self {
                .init(rawValue: "leaderboardReleases")
            }

            public static var leaderboardSetReleases: Self {
                .init(rawValue: "leaderboardSetReleases")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related achievementReleases returned (when they are included)
                public static var achievementReleases: Relation<Int?> {
                    .init(key: "limit[achievementReleases]")
                }

                /// maximum number of related activityReleases returned (when they are included)
                public static var activityReleases: Relation<Int?> {
                    .init(key: "limit[activityReleases]")
                }

                /// maximum number of related challengeReleases returned (when they are included)
                public static var challengeReleases: Relation<Int?> {
                    .init(key: "limit[challengeReleases]")
                }

                /// maximum number of related challengesMinimumPlatformVersions returned (when they are included)
                public static var challengesMinimumPlatformVersions: Relation<Int?> {
                    .init(key: "limit[challengesMinimumPlatformVersions]")
                }

                /// maximum number of related gameCenterAchievements returned (when they are included)
                public static var gameCenterAchievements: Relation<Int?> {
                    .init(key: "limit[gameCenterAchievements]")
                }

                /// maximum number of related gameCenterActivities returned (when they are included)
                public static var gameCenterActivities: Relation<Int?> {
                    .init(key: "limit[gameCenterActivities]")
                }

                /// maximum number of related gameCenterAppVersions returned (when they are included)
                public static var gameCenterAppVersions: Relation<Int?> {
                    .init(key: "limit[gameCenterAppVersions]")
                }

                /// maximum number of related gameCenterChallenges returned (when they are included)
                public static var gameCenterChallenges: Relation<Int?> {
                    .init(key: "limit[gameCenterChallenges]")
                }

                /// maximum number of related gameCenterLeaderboardSets returned (when they are included)
                public static var gameCenterLeaderboardSets: Relation<Int?> {
                    .init(key: "limit[gameCenterLeaderboardSets]")
                }

                /// maximum number of related gameCenterLeaderboards returned (when they are included)
                public static var gameCenterLeaderboards: Relation<Int?> {
                    .init(key: "limit[gameCenterLeaderboards]")
                }

                /// maximum number of related leaderboardReleases returned (when they are included)
                public static var leaderboardReleases: Relation<Int?> {
                    .init(key: "limit[leaderboardReleases]")
                }

                /// maximum number of related leaderboardSetReleases returned (when they are included)
                public static var leaderboardSetReleases: Relation<Int?> {
                    .init(key: "limit[leaderboardSetReleases]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
