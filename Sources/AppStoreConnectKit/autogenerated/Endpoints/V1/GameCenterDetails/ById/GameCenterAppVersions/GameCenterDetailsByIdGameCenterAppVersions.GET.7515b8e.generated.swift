// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterDetails.ById.GameCenterAppVersions {
    public struct GET: Endpoint {
        public typealias Response = GameCenterAppVersionsResponse

        public var path: String {
            "/v1/gameCenterDetails/\(id)/gameCenterAppVersions"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterAppVersions]",
                             value: parameters.fields[.gameCenterAppVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[enabled]",
                             value: parameters.filter[.enabled]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[compatibilityVersions]",
                             value: parameters.limit[.compatibilityVersions].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of GameCenterAppVersions as `GameCenterAppVersionsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterAppVersionsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterDetails.ById.GameCenterAppVersions.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppStoreVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var ageRatingDeclaration: Self {
                    .init(rawValue: "ageRatingDeclaration")
                }

                public static var alternativeDistributionPackage: Self {
                    .init(rawValue: "alternativeDistributionPackage")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appClipDefaultExperience: Self {
                    .init(rawValue: "appClipDefaultExperience")
                }

                public static var appStoreReviewDetail: Self {
                    .init(rawValue: "appStoreReviewDetail")
                }

                public static var appStoreState: Self {
                    .init(rawValue: "appStoreState")
                }

                public static var appStoreVersionExperiments: Self {
                    .init(rawValue: "appStoreVersionExperiments")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersionLocalizations: Self {
                    .init(rawValue: "appStoreVersionLocalizations")
                }

                public static var appStoreVersionPhasedRelease: Self {
                    .init(rawValue: "appStoreVersionPhasedRelease")
                }

                public static var appStoreVersionSubmission: Self {
                    .init(rawValue: "appStoreVersionSubmission")
                }

                public static var appVersionState: Self {
                    .init(rawValue: "appVersionState")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var copyright: Self {
                    .init(rawValue: "copyright")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var downloadable: Self {
                    .init(rawValue: "downloadable")
                }

                public static var earliestReleaseDate: Self {
                    .init(rawValue: "earliestReleaseDate")
                }

                public static var gameCenterAppVersion: Self {
                    .init(rawValue: "gameCenterAppVersion")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var releaseType: Self {
                    .init(rawValue: "releaseType")
                }

                public static var reviewType: Self {
                    .init(rawValue: "reviewType")
                }

                public static var routingAppCoverage: Self {
                    .init(rawValue: "routingAppCoverage")
                }

                public static var usesIdfa: Self {
                    .init(rawValue: "usesIdfa")
                }

                public static var versionString: Self {
                    .init(rawValue: "versionString")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct GameCenterAppVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var compatibilityVersions: Self {
                    .init(rawValue: "compatibilityVersions")
                }

                public static var enabled: Self {
                    .init(rawValue: "enabled")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appStoreVersions
                public static var appStoreVersions: Relation<[AppStoreVersions]?> {
                    .init(key: "fields[appStoreVersions]")
                }

                /// the fields to include for returned resources of type gameCenterAppVersions
                public static var gameCenterAppVersions: Relation<[GameCenterAppVersions]?> {
                    .init(key: "fields[gameCenterAppVersions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// filter by attribute 'enabled'
                public static var enabled: Relation<[String]?> {
                    .init(key: "filter[enabled]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var appStoreVersion: Self {
                .init(rawValue: "appStoreVersion")
            }

            public static var compatibilityVersions: Self {
                .init(rawValue: "compatibilityVersions")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related compatibilityVersions returned (when they are included)
                public static var compatibilityVersions: Relation<Int?> {
                    .init(key: "limit[compatibilityVersions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
