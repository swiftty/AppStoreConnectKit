// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.CiProducts.ById.Workflows {
    public struct GET: Endpoint {
        public typealias Response = CiWorkflowsResponse

        public var path: String {
            "/v1/ciProducts/\(id)/workflows"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[ciMacOsVersions]",
                             value: parameters.fields[.ciMacOsVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciProducts]",
                             value: parameters.fields[.ciProducts]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciWorkflows]",
                             value: parameters.fields[.ciWorkflows]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciXcodeVersions]",
                             value: parameters.fields[.ciXcodeVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[scmRepositories]",
                             value: parameters.fields[.scmRepositories]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of CiWorkflows as `CiWorkflowsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(CiWorkflowsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.CiProducts.ById.Workflows.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct CiMacOsVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public static var xcodeVersions: Self {
                    .init(rawValue: "xcodeVersions")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct CiProducts: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var additionalRepositories: Self {
                    .init(rawValue: "additionalRepositories")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var buildRuns: Self {
                    .init(rawValue: "buildRuns")
                }

                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var primaryRepositories: Self {
                    .init(rawValue: "primaryRepositories")
                }

                public static var productType: Self {
                    .init(rawValue: "productType")
                }

                public static var workflows: Self {
                    .init(rawValue: "workflows")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct CiWorkflows: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var actions: Self {
                    .init(rawValue: "actions")
                }

                public static var branchStartCondition: Self {
                    .init(rawValue: "branchStartCondition")
                }

                public static var buildRuns: Self {
                    .init(rawValue: "buildRuns")
                }

                public static var clean: Self {
                    .init(rawValue: "clean")
                }

                public static var containerFilePath: Self {
                    .init(rawValue: "containerFilePath")
                }

                public static var description: Self {
                    .init(rawValue: "description")
                }

                public static var isEnabled: Self {
                    .init(rawValue: "isEnabled")
                }

                public static var isLockedForEditing: Self {
                    .init(rawValue: "isLockedForEditing")
                }

                public static var lastModifiedDate: Self {
                    .init(rawValue: "lastModifiedDate")
                }

                public static var macOsVersion: Self {
                    .init(rawValue: "macOsVersion")
                }

                public static var manualBranchStartCondition: Self {
                    .init(rawValue: "manualBranchStartCondition")
                }

                public static var manualPullRequestStartCondition: Self {
                    .init(rawValue: "manualPullRequestStartCondition")
                }

                public static var manualTagStartCondition: Self {
                    .init(rawValue: "manualTagStartCondition")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var product: Self {
                    .init(rawValue: "product")
                }

                public static var pullRequestStartCondition: Self {
                    .init(rawValue: "pullRequestStartCondition")
                }

                public static var repository: Self {
                    .init(rawValue: "repository")
                }

                public static var scheduledStartCondition: Self {
                    .init(rawValue: "scheduledStartCondition")
                }

                public static var tagStartCondition: Self {
                    .init(rawValue: "tagStartCondition")
                }

                public static var xcodeVersion: Self {
                    .init(rawValue: "xcodeVersion")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct CiXcodeVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var macOsVersions: Self {
                    .init(rawValue: "macOsVersions")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var testDestinations: Self {
                    .init(rawValue: "testDestinations")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct ScmRepositories: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var defaultBranch: Self {
                    .init(rawValue: "defaultBranch")
                }

                public static var gitReferences: Self {
                    .init(rawValue: "gitReferences")
                }

                public static var httpCloneUrl: Self {
                    .init(rawValue: "httpCloneUrl")
                }

                public static var lastAccessedDate: Self {
                    .init(rawValue: "lastAccessedDate")
                }

                public static var ownerName: Self {
                    .init(rawValue: "ownerName")
                }

                public static var pullRequests: Self {
                    .init(rawValue: "pullRequests")
                }

                public static var repositoryName: Self {
                    .init(rawValue: "repositoryName")
                }

                public static var scmProvider: Self {
                    .init(rawValue: "scmProvider")
                }

                public static var sshCloneUrl: Self {
                    .init(rawValue: "sshCloneUrl")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type ciMacOsVersions
                public static var ciMacOsVersions: Relation<[CiMacOsVersions]?> {
                    .init(key: "fields[ciMacOsVersions]")
                }

                /// the fields to include for returned resources of type ciProducts
                public static var ciProducts: Relation<[CiProducts]?> {
                    .init(key: "fields[ciProducts]")
                }

                /// the fields to include for returned resources of type ciWorkflows
                public static var ciWorkflows: Relation<[CiWorkflows]?> {
                    .init(key: "fields[ciWorkflows]")
                }

                /// the fields to include for returned resources of type ciXcodeVersions
                public static var ciXcodeVersions: Relation<[CiXcodeVersions]?> {
                    .init(key: "fields[ciXcodeVersions]")
                }

                /// the fields to include for returned resources of type scmRepositories
                public static var scmRepositories: Relation<[ScmRepositories]?> {
                    .init(key: "fields[scmRepositories]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var macOsVersion: Self {
                .init(rawValue: "macOsVersion")
            }

            public static var product: Self {
                .init(rawValue: "product")
            }

            public static var repository: Self {
                .init(rawValue: "repository")
            }

            public static var xcodeVersion: Self {
                .init(rawValue: "xcodeVersion")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
