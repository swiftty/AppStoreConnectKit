// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Builds.ById.AppEncryptionDeclaration {
    public struct GET: Endpoint {
        public typealias Response = AppEncryptionDeclarationWithoutIncludesResponse

        public var path: String {
            "/v1/builds/\(id)/appEncryptionDeclaration"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appEncryptionDeclarations]",
                             value: parameters.fields[.appEncryptionDeclarations]?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single AppEncryptionDeclaration with get as `AppEncryptionDeclarationWithoutIncludesResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppEncryptionDeclarationWithoutIncludesResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Builds.ById.AppEncryptionDeclaration.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppEncryptionDeclarations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appDescription: Self {
                    .init(rawValue: "appDescription")
                }

                public static var appEncryptionDeclarationDocument: Self {
                    .init(rawValue: "appEncryptionDeclarationDocument")
                }

                public static var appEncryptionDeclarationState: Self {
                    .init(rawValue: "appEncryptionDeclarationState")
                }

                public static var availableOnFrenchStore: Self {
                    .init(rawValue: "availableOnFrenchStore")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var codeValue: Self {
                    .init(rawValue: "codeValue")
                }

                public static var containsProprietaryCryptography: Self {
                    .init(rawValue: "containsProprietaryCryptography")
                }

                public static var containsThirdPartyCryptography: Self {
                    .init(rawValue: "containsThirdPartyCryptography")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var documentName: Self {
                    .init(rawValue: "documentName")
                }

                public static var documentType: Self {
                    .init(rawValue: "documentType")
                }

                public static var documentUrl: Self {
                    .init(rawValue: "documentUrl")
                }

                public static var exempt: Self {
                    .init(rawValue: "exempt")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var uploadedDate: Self {
                    .init(rawValue: "uploadedDate")
                }

                public static var usesEncryption: Self {
                    .init(rawValue: "usesEncryption")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appEncryptionDeclarations
                public static var appEncryptionDeclarations: Relation<[AppEncryptionDeclarations]?> {
                    .init(key: "fields[appEncryptionDeclarations]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
