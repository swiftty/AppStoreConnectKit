// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.Builds {
    public struct GET: Endpoint {
        public typealias Response = BuildsResponse

        public var path: String {
            "/v1/builds"
        }

        public var parameters: Parameters = Parameters()

        public init() {

        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "exists[usesNonExemptEncryption]",
                             value: parameters.exists[.usesNonExemptEncryption].map { "\($0)" }),
                URLQueryItem(name: "fields[appEncryptionDeclarations]",
                             value: parameters.fields[.appEncryptionDeclarations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appStoreVersions]",
                             value: parameters.fields[.appStoreVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[apps]",
                             value: parameters.fields[.apps]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaAppReviewSubmissions]",
                             value: parameters.fields[.betaAppReviewSubmissions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaBuildLocalizations]",
                             value: parameters.fields[.betaBuildLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[betaTesters]",
                             value: parameters.fields[.betaTesters]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[buildBetaDetails]",
                             value: parameters.fields[.buildBetaDetails]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[buildIcons]",
                             value: parameters.fields[.buildIcons]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[builds]",
                             value: parameters.fields[.builds]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[preReleaseVersions]",
                             value: parameters.fields[.preReleaseVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[appStoreVersion]",
                             value: parameters.filter[.appStoreVersion]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[app]",
                             value: parameters.filter[.app]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[betaAppReviewSubmission.betaReviewState]",
                             value: parameters.filter[.betaAppReviewSubmissionBetaReviewState]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[betaGroups]",
                             value: parameters.filter[.betaGroups]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[buildAudienceType]",
                             value: parameters.filter[.buildAudienceType]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[expired]",
                             value: parameters.filter[.expired]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[id]",
                             value: parameters.filter[.id]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[preReleaseVersion.platform]",
                             value: parameters.filter[.preReleaseVersionPlatform]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[preReleaseVersion.version]",
                             value: parameters.filter[.preReleaseVersionVersion]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[preReleaseVersion]",
                             value: parameters.filter[.preReleaseVersion]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[processingState]",
                             value: parameters.filter[.processingState]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[usesNonExemptEncryption]",
                             value: parameters.filter[.usesNonExemptEncryption]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[version]",
                             value: parameters.filter[.version]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[betaBuildLocalizations]",
                             value: parameters.limit[.betaBuildLocalizations].map { "\($0)" }),
                URLQueryItem(name: "limit[betaGroups]",
                             value: parameters.limit[.betaGroups].map { "\($0)" }),
                URLQueryItem(name: "limit[buildBundles]",
                             value: parameters.limit[.buildBundles].map { "\($0)" }),
                URLQueryItem(name: "limit[icons]",
                             value: parameters.limit[.icons].map { "\($0)" }),
                URLQueryItem(name: "limit[individualTesters]",
                             value: parameters.limit[.individualTesters].map { "\($0)" }),
                URLQueryItem(name: "limit",
                             value: parameters.limit[].map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of Builds as `BuildsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(BuildsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.Builds.GET {
    public struct Parameters: Hashable {
        public var exists: Exists = Exists()

        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Limit = Limit()

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Exists: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// filter by attribute 'usesNonExemptEncryption'
                public static var usesNonExemptEncryption: Relation<Bool?> {
                    .init(key: "exists[usesNonExemptEncryption]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AppEncryptionDeclarations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appDescription: Self {
                    .init(rawValue: "appDescription")
                }

                public static var appEncryptionDeclarationDocument: Self {
                    .init(rawValue: "appEncryptionDeclarationDocument")
                }

                public static var appEncryptionDeclarationState: Self {
                    .init(rawValue: "appEncryptionDeclarationState")
                }

                public static var availableOnFrenchStore: Self {
                    .init(rawValue: "availableOnFrenchStore")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var codeValue: Self {
                    .init(rawValue: "codeValue")
                }

                public static var containsProprietaryCryptography: Self {
                    .init(rawValue: "containsProprietaryCryptography")
                }

                public static var containsThirdPartyCryptography: Self {
                    .init(rawValue: "containsThirdPartyCryptography")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var documentName: Self {
                    .init(rawValue: "documentName")
                }

                public static var documentType: Self {
                    .init(rawValue: "documentType")
                }

                public static var documentUrl: Self {
                    .init(rawValue: "documentUrl")
                }

                public static var exempt: Self {
                    .init(rawValue: "exempt")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var uploadedDate: Self {
                    .init(rawValue: "uploadedDate")
                }

                public static var usesEncryption: Self {
                    .init(rawValue: "usesEncryption")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppStoreVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var ageRatingDeclaration: Self {
                    .init(rawValue: "ageRatingDeclaration")
                }

                public static var alternativeDistributionPackage: Self {
                    .init(rawValue: "alternativeDistributionPackage")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appClipDefaultExperience: Self {
                    .init(rawValue: "appClipDefaultExperience")
                }

                public static var appStoreReviewDetail: Self {
                    .init(rawValue: "appStoreReviewDetail")
                }

                public static var appStoreState: Self {
                    .init(rawValue: "appStoreState")
                }

                public static var appStoreVersionExperiments: Self {
                    .init(rawValue: "appStoreVersionExperiments")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersionLocalizations: Self {
                    .init(rawValue: "appStoreVersionLocalizations")
                }

                public static var appStoreVersionPhasedRelease: Self {
                    .init(rawValue: "appStoreVersionPhasedRelease")
                }

                public static var appStoreVersionSubmission: Self {
                    .init(rawValue: "appStoreVersionSubmission")
                }

                public static var appVersionState: Self {
                    .init(rawValue: "appVersionState")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var copyright: Self {
                    .init(rawValue: "copyright")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var downloadable: Self {
                    .init(rawValue: "downloadable")
                }

                public static var earliestReleaseDate: Self {
                    .init(rawValue: "earliestReleaseDate")
                }

                public static var gameCenterAppVersion: Self {
                    .init(rawValue: "gameCenterAppVersion")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var releaseType: Self {
                    .init(rawValue: "releaseType")
                }

                public static var reviewType: Self {
                    .init(rawValue: "reviewType")
                }

                public static var routingAppCoverage: Self {
                    .init(rawValue: "routingAppCoverage")
                }

                public static var usesIdfa: Self {
                    .init(rawValue: "usesIdfa")
                }

                public static var versionString: Self {
                    .init(rawValue: "versionString")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Apps: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var accessibilityDeclarations: Self {
                    .init(rawValue: "accessibilityDeclarations")
                }

                public static var accessibilityUrl: Self {
                    .init(rawValue: "accessibilityUrl")
                }

                public static var alternativeDistributionKey: Self {
                    .init(rawValue: "alternativeDistributionKey")
                }

                public static var analyticsReportRequests: Self {
                    .init(rawValue: "analyticsReportRequests")
                }

                public static var appAvailabilityV2: Self {
                    .init(rawValue: "appAvailabilityV2")
                }

                public static var appClips: Self {
                    .init(rawValue: "appClips")
                }

                public static var appCustomProductPages: Self {
                    .init(rawValue: "appCustomProductPages")
                }

                public static var appEncryptionDeclarations: Self {
                    .init(rawValue: "appEncryptionDeclarations")
                }

                public static var appEvents: Self {
                    .init(rawValue: "appEvents")
                }

                public static var appInfos: Self {
                    .init(rawValue: "appInfos")
                }

                public static var appPricePoints: Self {
                    .init(rawValue: "appPricePoints")
                }

                public static var appPriceSchedule: Self {
                    .init(rawValue: "appPriceSchedule")
                }

                public static var appStoreVersionExperimentsV2: Self {
                    .init(rawValue: "appStoreVersionExperimentsV2")
                }

                public static var appStoreVersions: Self {
                    .init(rawValue: "appStoreVersions")
                }

                public static var backgroundAssets: Self {
                    .init(rawValue: "backgroundAssets")
                }

                public static var betaAppLocalizations: Self {
                    .init(rawValue: "betaAppLocalizations")
                }

                public static var betaAppReviewDetail: Self {
                    .init(rawValue: "betaAppReviewDetail")
                }

                public static var betaFeedbackCrashSubmissions: Self {
                    .init(rawValue: "betaFeedbackCrashSubmissions")
                }

                public static var betaFeedbackScreenshotSubmissions: Self {
                    .init(rawValue: "betaFeedbackScreenshotSubmissions")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var betaLicenseAgreement: Self {
                    .init(rawValue: "betaLicenseAgreement")
                }

                public static var betaTesters: Self {
                    .init(rawValue: "betaTesters")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var bundleId: Self {
                    .init(rawValue: "bundleId")
                }

                public static var ciProduct: Self {
                    .init(rawValue: "ciProduct")
                }

                public static var contentRightsDeclaration: Self {
                    .init(rawValue: "contentRightsDeclaration")
                }

                public static var customerReviewSummarizations: Self {
                    .init(rawValue: "customerReviewSummarizations")
                }

                public static var customerReviews: Self {
                    .init(rawValue: "customerReviews")
                }

                public static var endUserLicenseAgreement: Self {
                    .init(rawValue: "endUserLicenseAgreement")
                }

                public static var gameCenterDetail: Self {
                    .init(rawValue: "gameCenterDetail")
                }

                public static var gameCenterEnabledVersions: Self {
                    .init(rawValue: "gameCenterEnabledVersions")
                }

                public static var inAppPurchases: Self {
                    .init(rawValue: "inAppPurchases")
                }

                public static var inAppPurchasesV2: Self {
                    .init(rawValue: "inAppPurchasesV2")
                }

                public static var isOrEverWasMadeForKids: Self {
                    .init(rawValue: "isOrEverWasMadeForKids")
                }

                public static var marketplaceSearchDetail: Self {
                    .init(rawValue: "marketplaceSearchDetail")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var perfPowerMetrics: Self {
                    .init(rawValue: "perfPowerMetrics")
                }

                public static var preReleaseVersions: Self {
                    .init(rawValue: "preReleaseVersions")
                }

                public static var primaryLocale: Self {
                    .init(rawValue: "primaryLocale")
                }

                public static var promotedPurchases: Self {
                    .init(rawValue: "promotedPurchases")
                }

                public static var reviewSubmissions: Self {
                    .init(rawValue: "reviewSubmissions")
                }

                public static var sku: Self {
                    .init(rawValue: "sku")
                }

                public static var streamlinedPurchasingEnabled: Self {
                    .init(rawValue: "streamlinedPurchasingEnabled")
                }

                public static var subscriptionGracePeriod: Self {
                    .init(rawValue: "subscriptionGracePeriod")
                }

                public static var subscriptionGroups: Self {
                    .init(rawValue: "subscriptionGroups")
                }

                public static var subscriptionStatusUrl: Self {
                    .init(rawValue: "subscriptionStatusUrl")
                }

                public static var subscriptionStatusUrlForSandbox: Self {
                    .init(rawValue: "subscriptionStatusUrlForSandbox")
                }

                public static var subscriptionStatusUrlVersion: Self {
                    .init(rawValue: "subscriptionStatusUrlVersion")
                }

                public static var subscriptionStatusUrlVersionForSandbox: Self {
                    .init(rawValue: "subscriptionStatusUrlVersionForSandbox")
                }

                public static var webhooks: Self {
                    .init(rawValue: "webhooks")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaAppReviewSubmissions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var betaReviewState: Self {
                    .init(rawValue: "betaReviewState")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var submittedDate: Self {
                    .init(rawValue: "submittedDate")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaBuildLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var whatsNew: Self {
                    .init(rawValue: "whatsNew")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BetaTesters: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var apps: Self {
                    .init(rawValue: "apps")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var email: Self {
                    .init(rawValue: "email")
                }

                public static var firstName: Self {
                    .init(rawValue: "firstName")
                }

                public static var inviteType: Self {
                    .init(rawValue: "inviteType")
                }

                public static var lastName: Self {
                    .init(rawValue: "lastName")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BuildBetaDetails: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var autoNotifyEnabled: Self {
                    .init(rawValue: "autoNotifyEnabled")
                }

                public static var build: Self {
                    .init(rawValue: "build")
                }

                public static var externalBuildState: Self {
                    .init(rawValue: "externalBuildState")
                }

                public static var internalBuildState: Self {
                    .init(rawValue: "internalBuildState")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BuildIcons: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var iconAsset: Self {
                    .init(rawValue: "iconAsset")
                }

                public static var iconType: Self {
                    .init(rawValue: "iconType")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Builds: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appEncryptionDeclaration: Self {
                    .init(rawValue: "appEncryptionDeclaration")
                }

                public static var appStoreVersion: Self {
                    .init(rawValue: "appStoreVersion")
                }

                public static var betaAppReviewSubmission: Self {
                    .init(rawValue: "betaAppReviewSubmission")
                }

                public static var betaBuildLocalizations: Self {
                    .init(rawValue: "betaBuildLocalizations")
                }

                public static var betaGroups: Self {
                    .init(rawValue: "betaGroups")
                }

                public static var buildAudienceType: Self {
                    .init(rawValue: "buildAudienceType")
                }

                public static var buildBetaDetail: Self {
                    .init(rawValue: "buildBetaDetail")
                }

                public static var buildBundles: Self {
                    .init(rawValue: "buildBundles")
                }

                public static var computedMinMacOsVersion: Self {
                    .init(rawValue: "computedMinMacOsVersion")
                }

                public static var computedMinVisionOsVersion: Self {
                    .init(rawValue: "computedMinVisionOsVersion")
                }

                public static var diagnosticSignatures: Self {
                    .init(rawValue: "diagnosticSignatures")
                }

                public static var expirationDate: Self {
                    .init(rawValue: "expirationDate")
                }

                public static var expired: Self {
                    .init(rawValue: "expired")
                }

                public static var iconAssetToken: Self {
                    .init(rawValue: "iconAssetToken")
                }

                public static var icons: Self {
                    .init(rawValue: "icons")
                }

                public static var individualTesters: Self {
                    .init(rawValue: "individualTesters")
                }

                public static var lsMinimumSystemVersion: Self {
                    .init(rawValue: "lsMinimumSystemVersion")
                }

                public static var minOsVersion: Self {
                    .init(rawValue: "minOsVersion")
                }

                public static var perfPowerMetrics: Self {
                    .init(rawValue: "perfPowerMetrics")
                }

                public static var preReleaseVersion: Self {
                    .init(rawValue: "preReleaseVersion")
                }

                public static var processingState: Self {
                    .init(rawValue: "processingState")
                }

                public static var uploadedDate: Self {
                    .init(rawValue: "uploadedDate")
                }

                public static var usesNonExemptEncryption: Self {
                    .init(rawValue: "usesNonExemptEncryption")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct PreReleaseVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var platform: Self {
                    .init(rawValue: "platform")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type appEncryptionDeclarations
                public static var appEncryptionDeclarations: Relation<[AppEncryptionDeclarations]?> {
                    .init(key: "fields[appEncryptionDeclarations]")
                }

                /// the fields to include for returned resources of type appStoreVersions
                public static var appStoreVersions: Relation<[AppStoreVersions]?> {
                    .init(key: "fields[appStoreVersions]")
                }

                /// the fields to include for returned resources of type apps
                public static var apps: Relation<[Apps]?> {
                    .init(key: "fields[apps]")
                }

                /// the fields to include for returned resources of type betaAppReviewSubmissions
                public static var betaAppReviewSubmissions: Relation<[BetaAppReviewSubmissions]?> {
                    .init(key: "fields[betaAppReviewSubmissions]")
                }

                /// the fields to include for returned resources of type betaBuildLocalizations
                public static var betaBuildLocalizations: Relation<[BetaBuildLocalizations]?> {
                    .init(key: "fields[betaBuildLocalizations]")
                }

                /// the fields to include for returned resources of type betaTesters
                public static var betaTesters: Relation<[BetaTesters]?> {
                    .init(key: "fields[betaTesters]")
                }

                /// the fields to include for returned resources of type buildBetaDetails
                public static var buildBetaDetails: Relation<[BuildBetaDetails]?> {
                    .init(key: "fields[buildBetaDetails]")
                }

                /// the fields to include for returned resources of type buildIcons
                public static var buildIcons: Relation<[BuildIcons]?> {
                    .init(key: "fields[buildIcons]")
                }

                /// the fields to include for returned resources of type builds
                public static var builds: Relation<[Builds]?> {
                    .init(key: "fields[builds]")
                }

                /// the fields to include for returned resources of type preReleaseVersions
                public static var preReleaseVersions: Relation<[PreReleaseVersions]?> {
                    .init(key: "fields[preReleaseVersions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct BetaAppReviewSubmissionBetaReviewState: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var approved: Self {
                    .init(rawValue: "APPROVED")
                }

                public static var inReview: Self {
                    .init(rawValue: "IN_REVIEW")
                }

                public static var rejected: Self {
                    .init(rawValue: "REJECTED")
                }

                public static var waitingForReview: Self {
                    .init(rawValue: "WAITING_FOR_REVIEW")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BuildAudienceType: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appStoreEligible: Self {
                    .init(rawValue: "APP_STORE_ELIGIBLE")
                }

                public static var internalOnly: Self {
                    .init(rawValue: "INTERNAL_ONLY")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct PreReleaseVersionPlatform: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var iOS: Self {
                    .init(rawValue: "IOS")
                }

                public static var macOS: Self {
                    .init(rawValue: "MAC_OS")
                }

                public static var tvOS: Self {
                    .init(rawValue: "TV_OS")
                }

                public static var visionOS: Self {
                    .init(rawValue: "VISION_OS")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct ProcessingState: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var failed: Self {
                    .init(rawValue: "FAILED")
                }

                public static var invalid: Self {
                    .init(rawValue: "INVALID")
                }

                public static var processing: Self {
                    .init(rawValue: "PROCESSING")
                }

                public static var valid: Self {
                    .init(rawValue: "VALID")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by id(s) of related 'appStoreVersion'
                public static var appStoreVersion: Relation<[String]?> {
                    .init(key: "filter[appStoreVersion]")
                }

                /// filter by id(s) of related 'app'
                public static var app: Relation<[String]?> {
                    .init(key: "filter[app]")
                }

                /// filter by attribute 'betaAppReviewSubmission.betaReviewState'
                public static var betaAppReviewSubmissionBetaReviewState: Relation<[BetaAppReviewSubmissionBetaReviewState]?> {
                    .init(key: "filter[betaAppReviewSubmission.betaReviewState]")
                }

                /// filter by id(s) of related 'betaGroups'
                public static var betaGroups: Relation<[String]?> {
                    .init(key: "filter[betaGroups]")
                }

                /// filter by attribute 'buildAudienceType'
                public static var buildAudienceType: Relation<[BuildAudienceType]?> {
                    .init(key: "filter[buildAudienceType]")
                }

                /// filter by attribute 'expired'
                public static var expired: Relation<[String]?> {
                    .init(key: "filter[expired]")
                }

                /// filter by id(s)
                public static var id: Relation<[String]?> {
                    .init(key: "filter[id]")
                }

                /// filter by attribute 'preReleaseVersion.platform'
                public static var preReleaseVersionPlatform: Relation<[PreReleaseVersionPlatform]?> {
                    .init(key: "filter[preReleaseVersion.platform]")
                }

                /// filter by attribute 'preReleaseVersion.version'
                public static var preReleaseVersionVersion: Relation<[String]?> {
                    .init(key: "filter[preReleaseVersion.version]")
                }

                /// filter by id(s) of related 'preReleaseVersion'
                public static var preReleaseVersion: Relation<[String]?> {
                    .init(key: "filter[preReleaseVersion]")
                }

                /// filter by attribute 'processingState'
                public static var processingState: Relation<[ProcessingState]?> {
                    .init(key: "filter[processingState]")
                }

                /// filter by attribute 'usesNonExemptEncryption'
                public static var usesNonExemptEncryption: Relation<[String]?> {
                    .init(key: "filter[usesNonExemptEncryption]")
                }

                /// filter by attribute 'version'
                public static var version: Relation<[String]?> {
                    .init(key: "filter[version]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var app: Self {
                .init(rawValue: "app")
            }

            public static var appEncryptionDeclaration: Self {
                .init(rawValue: "appEncryptionDeclaration")
            }

            public static var appStoreVersion: Self {
                .init(rawValue: "appStoreVersion")
            }

            public static var betaAppReviewSubmission: Self {
                .init(rawValue: "betaAppReviewSubmission")
            }

            public static var betaBuildLocalizations: Self {
                .init(rawValue: "betaBuildLocalizations")
            }

            public static var betaGroups: Self {
                .init(rawValue: "betaGroups")
            }

            public static var buildBetaDetail: Self {
                .init(rawValue: "buildBetaDetail")
            }

            public static var buildBundles: Self {
                .init(rawValue: "buildBundles")
            }

            public static var icons: Self {
                .init(rawValue: "icons")
            }

            public static var individualTesters: Self {
                .init(rawValue: "individualTesters")
            }

            public static var preReleaseVersion: Self {
                .init(rawValue: "preReleaseVersion")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript () -> Int? {
                get { self[Relation<Int?>(key: "limit")] }
                set { self[Relation<Int?>(key: "limit")] = newValue }
            }

            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related betaBuildLocalizations returned (when they are included)
                public static var betaBuildLocalizations: Relation<Int?> {
                    .init(key: "limit[betaBuildLocalizations]")
                }

                /// maximum number of related betaGroups returned (when they are included)
                public static var betaGroups: Relation<Int?> {
                    .init(key: "limit[betaGroups]")
                }

                /// maximum number of related buildBundles returned (when they are included)
                public static var buildBundles: Relation<Int?> {
                    .init(key: "limit[buildBundles]")
                }

                /// maximum number of related icons returned (when they are included)
                public static var icons: Relation<Int?> {
                    .init(key: "limit[icons]")
                }

                /// maximum number of related individualTesters returned (when they are included)
                public static var individualTesters: Relation<Int?> {
                    .init(key: "limit[individualTesters]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Sort: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var preReleaseVersion: Self {
                .init(rawValue: "preReleaseVersion")
            }

            public static var preReleaseVersionDesc: Self {
                .init(rawValue: "-preReleaseVersion")
            }

            public static var uploadedDate: Self {
                .init(rawValue: "uploadedDate")
            }

            public static var uploadedDateDesc: Self {
                .init(rawValue: "-uploadedDate")
            }

            public static var version: Self {
                .init(rawValue: "version")
            }

            public static var versionDesc: Self {
                .init(rawValue: "-version")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
