// autogenerated

// swiftlint:disable all
import Foundation

extension V1.CiBuildActions.ById {
    public struct GET: Endpoint {
        public typealias Response = CiBuildActionResponse

        public var path: String {
            "/v1/ciBuildActions/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[ciArtifacts]",
                             value: parameters.fields[.ciArtifacts]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciBuildActions]",
                             value: parameters.fields[.ciBuildActions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciBuildRuns]",
                             value: parameters.fields[.ciBuildRuns]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciIssues]",
                             value: parameters.fields[.ciIssues]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciTestResults]",
                             value: parameters.fields[.ciTestResults]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single CiBuildAction as `CiBuildActionResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(CiBuildActionResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.CiBuildActions.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum CiArtifacts: String, Hashable, Codable {
                case downloadUrl
                case fileName
                case fileSize
                case fileType
            }

            public enum CiBuildActions: String, Hashable, Codable {
                case actionType
                case artifacts
                case buildRun
                case completionStatus
                case executionProgress
                case finishedDate
                case isRequiredToPass
                case issueCounts
                case issues
                case name
                case startedDate
                case testResults
            }

            public enum CiBuildRuns: String, Hashable, Codable {
                case actions
                case buildRun
                case builds
                case cancelReason
                case clean
                case completionStatus
                case createdDate
                case destinationBranch
                case destinationCommit
                case executionProgress
                case finishedDate
                case isPullRequestBuild
                case issueCounts
                case number
                case product
                case pullRequest
                case sourceBranchOrTag
                case sourceCommit
                case startReason
                case startedDate
                case workflow
            }

            public enum CiIssues: String, Hashable, Codable {
                case category
                case fileSource
                case issueType
                case message
            }

            public enum CiTestResults: String, Hashable, Codable {
                case className
                case destinationTestResults
                case fileSource
                case message
                case name
                case status
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type ciArtifacts
                public static var ciArtifacts: Relation<[CiArtifacts]?> {
                    .init(key: "fields[ciArtifacts]")
                }

                /// the fields to include for returned resources of type ciBuildActions
                public static var ciBuildActions: Relation<[CiBuildActions]?> {
                    .init(key: "fields[ciBuildActions]")
                }

                /// the fields to include for returned resources of type ciBuildRuns
                public static var ciBuildRuns: Relation<[CiBuildRuns]?> {
                    .init(key: "fields[ciBuildRuns]")
                }

                /// the fields to include for returned resources of type ciIssues
                public static var ciIssues: Relation<[CiIssues]?> {
                    .init(key: "fields[ciIssues]")
                }

                /// the fields to include for returned resources of type ciTestResults
                public static var ciTestResults: Relation<[CiTestResults]?> {
                    .init(key: "fields[ciTestResults]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: String, Hashable, Codable {
            case buildRun
        }
    }
}

// swiftlint:enable all
