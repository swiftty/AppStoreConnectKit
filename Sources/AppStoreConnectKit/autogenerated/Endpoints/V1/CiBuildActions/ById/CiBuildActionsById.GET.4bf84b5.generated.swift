// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.CiBuildActions.ById {
    public struct GET: Endpoint {
        public typealias Response = CiBuildActionResponse

        public var path: String {
            "/v1/ciBuildActions/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[ciBuildActions]",
                             value: parameters.fields[.ciBuildActions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciBuildRuns]",
                             value: parameters.fields[.ciBuildRuns]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single CiBuildAction as `CiBuildActionResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(CiBuildActionResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.CiBuildActions.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct CiBuildActions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var actionType: Self {
                    .init(rawValue: "actionType")
                }

                public static var artifacts: Self {
                    .init(rawValue: "artifacts")
                }

                public static var buildRun: Self {
                    .init(rawValue: "buildRun")
                }

                public static var completionStatus: Self {
                    .init(rawValue: "completionStatus")
                }

                public static var executionProgress: Self {
                    .init(rawValue: "executionProgress")
                }

                public static var finishedDate: Self {
                    .init(rawValue: "finishedDate")
                }

                public static var isRequiredToPass: Self {
                    .init(rawValue: "isRequiredToPass")
                }

                public static var issueCounts: Self {
                    .init(rawValue: "issueCounts")
                }

                public static var issues: Self {
                    .init(rawValue: "issues")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var startedDate: Self {
                    .init(rawValue: "startedDate")
                }

                public static var testResults: Self {
                    .init(rawValue: "testResults")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct CiBuildRuns: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var actions: Self {
                    .init(rawValue: "actions")
                }

                public static var builds: Self {
                    .init(rawValue: "builds")
                }

                public static var cancelReason: Self {
                    .init(rawValue: "cancelReason")
                }

                public static var completionStatus: Self {
                    .init(rawValue: "completionStatus")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var destinationBranch: Self {
                    .init(rawValue: "destinationBranch")
                }

                public static var destinationCommit: Self {
                    .init(rawValue: "destinationCommit")
                }

                public static var executionProgress: Self {
                    .init(rawValue: "executionProgress")
                }

                public static var finishedDate: Self {
                    .init(rawValue: "finishedDate")
                }

                public static var isPullRequestBuild: Self {
                    .init(rawValue: "isPullRequestBuild")
                }

                public static var issueCounts: Self {
                    .init(rawValue: "issueCounts")
                }

                public static var number: Self {
                    .init(rawValue: "number")
                }

                public static var product: Self {
                    .init(rawValue: "product")
                }

                public static var pullRequest: Self {
                    .init(rawValue: "pullRequest")
                }

                public static var sourceBranchOrTag: Self {
                    .init(rawValue: "sourceBranchOrTag")
                }

                public static var sourceCommit: Self {
                    .init(rawValue: "sourceCommit")
                }

                public static var startReason: Self {
                    .init(rawValue: "startReason")
                }

                public static var startedDate: Self {
                    .init(rawValue: "startedDate")
                }

                public static var workflow: Self {
                    .init(rawValue: "workflow")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type ciBuildActions
                public static var ciBuildActions: Relation<[CiBuildActions]?> {
                    .init(key: "fields[ciBuildActions]")
                }

                /// the fields to include for returned resources of type ciBuildRuns
                public static var ciBuildRuns: Relation<[CiBuildRuns]?> {
                    .init(key: "fields[ciBuildRuns]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var buildRun: Self {
                .init(rawValue: "buildRun")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
