// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.CiBuildActions.ById {
    public struct GET: Endpoint {
        public typealias Response = CiBuildActionResponse

        public var path: String {
            "/v1/ciBuildActions/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[ciArtifacts]",
                             value: parameters.fields[.ciArtifacts]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciBuildActions]",
                             value: parameters.fields[.ciBuildActions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciBuildRuns]",
                             value: parameters.fields[.ciBuildRuns]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciIssues]",
                             value: parameters.fields[.ciIssues]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[ciTestResults]",
                             value: parameters.fields[.ciTestResults]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single CiBuildAction as `CiBuildActionResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(CiBuildActionResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.CiBuildActions.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum CiArtifacts: Hashable, Codable, RawRepresentable {
                case downloadUrl
                case fileName
                case fileSize
                case fileType
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .downloadUrl: return "downloadUrl"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .fileType: return "fileType"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "downloadUrl": self = .downloadUrl
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "fileType": self = .fileType
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CiBuildActions: Hashable, Codable, RawRepresentable {
                case actionType
                case artifacts
                case buildRun
                case completionStatus
                case executionProgress
                case finishedDate
                case isRequiredToPass
                case issueCounts
                case issues
                case name
                case startedDate
                case testResults
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .actionType: return "actionType"
                    case .artifacts: return "artifacts"
                    case .buildRun: return "buildRun"
                    case .completionStatus: return "completionStatus"
                    case .executionProgress: return "executionProgress"
                    case .finishedDate: return "finishedDate"
                    case .isRequiredToPass: return "isRequiredToPass"
                    case .issueCounts: return "issueCounts"
                    case .issues: return "issues"
                    case .name: return "name"
                    case .startedDate: return "startedDate"
                    case .testResults: return "testResults"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "actionType": self = .actionType
                    case "artifacts": self = .artifacts
                    case "buildRun": self = .buildRun
                    case "completionStatus": self = .completionStatus
                    case "executionProgress": self = .executionProgress
                    case "finishedDate": self = .finishedDate
                    case "isRequiredToPass": self = .isRequiredToPass
                    case "issueCounts": self = .issueCounts
                    case "issues": self = .issues
                    case "name": self = .name
                    case "startedDate": self = .startedDate
                    case "testResults": self = .testResults
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CiBuildRuns: Hashable, Codable, RawRepresentable {
                case actions
                case buildRun
                case builds
                case cancelReason
                case clean
                case completionStatus
                case createdDate
                case destinationBranch
                case destinationCommit
                case executionProgress
                case finishedDate
                case isPullRequestBuild
                case issueCounts
                case number
                case product
                case pullRequest
                case sourceBranchOrTag
                case sourceCommit
                case startReason
                case startedDate
                case workflow
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .actions: return "actions"
                    case .buildRun: return "buildRun"
                    case .builds: return "builds"
                    case .cancelReason: return "cancelReason"
                    case .clean: return "clean"
                    case .completionStatus: return "completionStatus"
                    case .createdDate: return "createdDate"
                    case .destinationBranch: return "destinationBranch"
                    case .destinationCommit: return "destinationCommit"
                    case .executionProgress: return "executionProgress"
                    case .finishedDate: return "finishedDate"
                    case .isPullRequestBuild: return "isPullRequestBuild"
                    case .issueCounts: return "issueCounts"
                    case .number: return "number"
                    case .product: return "product"
                    case .pullRequest: return "pullRequest"
                    case .sourceBranchOrTag: return "sourceBranchOrTag"
                    case .sourceCommit: return "sourceCommit"
                    case .startReason: return "startReason"
                    case .startedDate: return "startedDate"
                    case .workflow: return "workflow"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "actions": self = .actions
                    case "buildRun": self = .buildRun
                    case "builds": self = .builds
                    case "cancelReason": self = .cancelReason
                    case "clean": self = .clean
                    case "completionStatus": self = .completionStatus
                    case "createdDate": self = .createdDate
                    case "destinationBranch": self = .destinationBranch
                    case "destinationCommit": self = .destinationCommit
                    case "executionProgress": self = .executionProgress
                    case "finishedDate": self = .finishedDate
                    case "isPullRequestBuild": self = .isPullRequestBuild
                    case "issueCounts": self = .issueCounts
                    case "number": self = .number
                    case "product": self = .product
                    case "pullRequest": self = .pullRequest
                    case "sourceBranchOrTag": self = .sourceBranchOrTag
                    case "sourceCommit": self = .sourceCommit
                    case "startReason": self = .startReason
                    case "startedDate": self = .startedDate
                    case "workflow": self = .workflow
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CiIssues: Hashable, Codable, RawRepresentable {
                case category
                case fileSource
                case issueType
                case message
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .category: return "category"
                    case .fileSource: return "fileSource"
                    case .issueType: return "issueType"
                    case .message: return "message"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "category": self = .category
                    case "fileSource": self = .fileSource
                    case "issueType": self = .issueType
                    case "message": self = .message
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum CiTestResults: Hashable, Codable, RawRepresentable {
                case className
                case destinationTestResults
                case fileSource
                case message
                case name
                case status
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .className: return "className"
                    case .destinationTestResults: return "destinationTestResults"
                    case .fileSource: return "fileSource"
                    case .message: return "message"
                    case .name: return "name"
                    case .status: return "status"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "className": self = .className
                    case "destinationTestResults": self = .destinationTestResults
                    case "fileSource": self = .fileSource
                    case "message": self = .message
                    case "name": self = .name
                    case "status": self = .status
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case buildRun
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .buildRun: return "buildRun"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "buildRun": self = .buildRun
                default: self = .unknown(rawValue)
                }
            }
        }
    }
}

extension Relation<V1.CiBuildActions.ById.GET.Parameters.Fields, [V1.CiBuildActions.ById.GET.Parameters.Fields.CiArtifacts]?> {
    /// the fields to include for returned resources of type ciArtifacts
    public static var ciArtifacts: Relation {
        .init(key: "fields[ciArtifacts]")
    }
}

extension Relation<V1.CiBuildActions.ById.GET.Parameters.Fields, [V1.CiBuildActions.ById.GET.Parameters.Fields.CiBuildActions]?> {
    /// the fields to include for returned resources of type ciBuildActions
    public static var ciBuildActions: Relation {
        .init(key: "fields[ciBuildActions]")
    }
}

extension Relation<V1.CiBuildActions.ById.GET.Parameters.Fields, [V1.CiBuildActions.ById.GET.Parameters.Fields.CiBuildRuns]?> {
    /// the fields to include for returned resources of type ciBuildRuns
    public static var ciBuildRuns: Relation {
        .init(key: "fields[ciBuildRuns]")
    }
}

extension Relation<V1.CiBuildActions.ById.GET.Parameters.Fields, [V1.CiBuildActions.ById.GET.Parameters.Fields.CiIssues]?> {
    /// the fields to include for returned resources of type ciIssues
    public static var ciIssues: Relation {
        .init(key: "fields[ciIssues]")
    }
}

extension Relation<V1.CiBuildActions.ById.GET.Parameters.Fields, [V1.CiBuildActions.ById.GET.Parameters.Fields.CiTestResults]?> {
    /// the fields to include for returned resources of type ciTestResults
    public static var ciTestResults: Relation {
        .init(key: "fields[ciTestResults]")
    }
}

// swiftlint:enable all
