// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.AppInfos.ById {
    public struct GET: Endpoint {
        public typealias Response = AppInfoResponse

        public var path: String {
            "/v1/appInfos/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[ageRatingDeclarations]",
                             value: parameters.fields[.ageRatingDeclarations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appCategories]",
                             value: parameters.fields[.appCategories]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appInfoLocalizations]",
                             value: parameters.fields[.appInfoLocalizations]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appInfos]",
                             value: parameters.fields[.appInfos]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appInfoLocalizations]",
                             value: parameters.limit[.appInfoLocalizations].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single AppInfo as `AppInfoResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppInfoResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.AppInfos.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct AgeRatingDeclarations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var alcoholTobaccoOrDrugUseOrReferences: Self {
                    .init(rawValue: "alcoholTobaccoOrDrugUseOrReferences")
                }

                public static var contests: Self {
                    .init(rawValue: "contests")
                }

                public static var gambling: Self {
                    .init(rawValue: "gambling")
                }

                public static var gamblingSimulated: Self {
                    .init(rawValue: "gamblingSimulated")
                }

                public static var horrorOrFearThemes: Self {
                    .init(rawValue: "horrorOrFearThemes")
                }

                public static var kidsAgeBand: Self {
                    .init(rawValue: "kidsAgeBand")
                }

                public static var koreaAgeRatingOverride: Self {
                    .init(rawValue: "koreaAgeRatingOverride")
                }

                public static var lootBox: Self {
                    .init(rawValue: "lootBox")
                }

                public static var matureOrSuggestiveThemes: Self {
                    .init(rawValue: "matureOrSuggestiveThemes")
                }

                public static var medicalOrTreatmentInformation: Self {
                    .init(rawValue: "medicalOrTreatmentInformation")
                }

                public static var profanityOrCrudeHumor: Self {
                    .init(rawValue: "profanityOrCrudeHumor")
                }

                public static var sexualContentGraphicAndNudity: Self {
                    .init(rawValue: "sexualContentGraphicAndNudity")
                }

                public static var sexualContentOrNudity: Self {
                    .init(rawValue: "sexualContentOrNudity")
                }

                public static var unrestrictedWebAccess: Self {
                    .init(rawValue: "unrestrictedWebAccess")
                }

                public static var violenceCartoonOrFantasy: Self {
                    .init(rawValue: "violenceCartoonOrFantasy")
                }

                public static var violenceRealistic: Self {
                    .init(rawValue: "violenceRealistic")
                }

                public static var violenceRealisticProlongedGraphicOrSadistic: Self {
                    .init(rawValue: "violenceRealisticProlongedGraphicOrSadistic")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppCategories: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var parent: Self {
                    .init(rawValue: "parent")
                }

                public static var platforms: Self {
                    .init(rawValue: "platforms")
                }

                public static var subcategories: Self {
                    .init(rawValue: "subcategories")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppInfoLocalizations: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var appInfo: Self {
                    .init(rawValue: "appInfo")
                }

                public static var locale: Self {
                    .init(rawValue: "locale")
                }

                public static var name: Self {
                    .init(rawValue: "name")
                }

                public static var privacyChoicesUrl: Self {
                    .init(rawValue: "privacyChoicesUrl")
                }

                public static var privacyPolicyText: Self {
                    .init(rawValue: "privacyPolicyText")
                }

                public static var privacyPolicyUrl: Self {
                    .init(rawValue: "privacyPolicyUrl")
                }

                public static var subtitle: Self {
                    .init(rawValue: "subtitle")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct AppInfos: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var ageRatingDeclaration: Self {
                    .init(rawValue: "ageRatingDeclaration")
                }

                public static var app: Self {
                    .init(rawValue: "app")
                }

                public static var appInfoLocalizations: Self {
                    .init(rawValue: "appInfoLocalizations")
                }

                public static var appStoreAgeRating: Self {
                    .init(rawValue: "appStoreAgeRating")
                }

                public static var appStoreState: Self {
                    .init(rawValue: "appStoreState")
                }

                public static var australiaAgeRating: Self {
                    .init(rawValue: "australiaAgeRating")
                }

                public static var brazilAgeRating: Self {
                    .init(rawValue: "brazilAgeRating")
                }

                public static var brazilAgeRatingV2: Self {
                    .init(rawValue: "brazilAgeRatingV2")
                }

                public static var franceAgeRating: Self {
                    .init(rawValue: "franceAgeRating")
                }

                public static var kidsAgeBand: Self {
                    .init(rawValue: "kidsAgeBand")
                }

                public static var koreaAgeRating: Self {
                    .init(rawValue: "koreaAgeRating")
                }

                public static var primaryCategory: Self {
                    .init(rawValue: "primaryCategory")
                }

                public static var primarySubcategoryOne: Self {
                    .init(rawValue: "primarySubcategoryOne")
                }

                public static var primarySubcategoryTwo: Self {
                    .init(rawValue: "primarySubcategoryTwo")
                }

                public static var secondaryCategory: Self {
                    .init(rawValue: "secondaryCategory")
                }

                public static var secondarySubcategoryOne: Self {
                    .init(rawValue: "secondarySubcategoryOne")
                }

                public static var secondarySubcategoryTwo: Self {
                    .init(rawValue: "secondarySubcategoryTwo")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type ageRatingDeclarations
                public static var ageRatingDeclarations: Relation<[AgeRatingDeclarations]?> {
                    .init(key: "fields[ageRatingDeclarations]")
                }

                /// the fields to include for returned resources of type appCategories
                public static var appCategories: Relation<[AppCategories]?> {
                    .init(key: "fields[appCategories]")
                }

                /// the fields to include for returned resources of type appInfoLocalizations
                public static var appInfoLocalizations: Relation<[AppInfoLocalizations]?> {
                    .init(key: "fields[appInfoLocalizations]")
                }

                /// the fields to include for returned resources of type appInfos
                public static var appInfos: Relation<[AppInfos]?> {
                    .init(key: "fields[appInfos]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var ageRatingDeclaration: Self {
                .init(rawValue: "ageRatingDeclaration")
            }

            public static var app: Self {
                .init(rawValue: "app")
            }

            public static var appInfoLocalizations: Self {
                .init(rawValue: "appInfoLocalizations")
            }

            public static var primaryCategory: Self {
                .init(rawValue: "primaryCategory")
            }

            public static var primarySubcategoryOne: Self {
                .init(rawValue: "primarySubcategoryOne")
            }

            public static var primarySubcategoryTwo: Self {
                .init(rawValue: "primarySubcategoryTwo")
            }

            public static var secondaryCategory: Self {
                .init(rawValue: "secondaryCategory")
            }

            public static var secondarySubcategoryOne: Self {
                .init(rawValue: "secondarySubcategoryOne")
            }

            public static var secondarySubcategoryTwo: Self {
                .init(rawValue: "secondarySubcategoryTwo")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related appInfoLocalizations returned (when they are included)
                public static var appInfoLocalizations: Relation<Int?> {
                    .init(key: "limit[appInfoLocalizations]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
