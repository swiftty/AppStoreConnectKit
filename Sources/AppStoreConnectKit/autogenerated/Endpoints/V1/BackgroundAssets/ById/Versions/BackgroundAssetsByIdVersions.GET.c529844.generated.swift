// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.BackgroundAssets.ById.Versions {
    public struct GET: Endpoint {
        public typealias Response = BackgroundAssetVersionsResponse

        public var path: String {
            "/v1/backgroundAssets/\(id)/versions"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[backgroundAssetUploadFiles]",
                             value: parameters.fields[.backgroundAssetUploadFiles]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[backgroundAssetVersionInternalBetaReleases]",
                             value: parameters.fields[.backgroundAssetVersionInternalBetaReleases]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[backgroundAssetVersions]",
                             value: parameters.fields[.backgroundAssetVersions]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[internalBetaRelease.state]",
                             value: parameters.filter[.internalBetaReleaseState]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[state]",
                             value: parameters.filter[.state]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "filter[version]",
                             value: parameters.filter[.version]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit",
                             value: parameters.limit.map { "\($0)" }),
                URLQueryItem(name: "sort",
                             value: parameters.sort?.map { "\($0)" }.joined(separator: ","))
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, List of BackgroundAssetVersions as `BackgroundAssetVersionsResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **401**, Unauthorized error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        /// - Throws: **429**, Rate limit exceeded error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(BackgroundAssetVersionsResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 401:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 429:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.BackgroundAssets.ById.Versions.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        public var filter: Filter = Filter()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        /// maximum resources per page
        public var limit: Int?

        /// comma-separated list of sort expressions; resources will be sorted as specified
        public var sort: [Sort]?

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct BackgroundAssetUploadFiles: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var assetDeliveryState: Self {
                    .init(rawValue: "assetDeliveryState")
                }

                public static var assetToken: Self {
                    .init(rawValue: "assetToken")
                }

                public static var assetType: Self {
                    .init(rawValue: "assetType")
                }

                public static var fileName: Self {
                    .init(rawValue: "fileName")
                }

                public static var fileSize: Self {
                    .init(rawValue: "fileSize")
                }

                public static var sourceFileChecksum: Self {
                    .init(rawValue: "sourceFileChecksum")
                }

                public static var uploadOperations: Self {
                    .init(rawValue: "uploadOperations")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BackgroundAssetVersionInternalBetaReleases: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var backgroundAssetVersion: Self {
                    .init(rawValue: "backgroundAssetVersion")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct BackgroundAssetVersions: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var assetFile: Self {
                    .init(rawValue: "assetFile")
                }

                public static var backgroundAssetUploadFiles: Self {
                    .init(rawValue: "backgroundAssetUploadFiles")
                }

                public static var createdDate: Self {
                    .init(rawValue: "createdDate")
                }

                public static var internalBetaRelease: Self {
                    .init(rawValue: "internalBetaRelease")
                }

                public static var manifestFile: Self {
                    .init(rawValue: "manifestFile")
                }

                public static var platforms: Self {
                    .init(rawValue: "platforms")
                }

                public static var state: Self {
                    .init(rawValue: "state")
                }

                public static var version: Self {
                    .init(rawValue: "version")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type backgroundAssetUploadFiles
                public static var backgroundAssetUploadFiles: Relation<[BackgroundAssetUploadFiles]?> {
                    .init(key: "fields[backgroundAssetUploadFiles]")
                }

                /// the fields to include for returned resources of type backgroundAssetVersionInternalBetaReleases
                public static var backgroundAssetVersionInternalBetaReleases: Relation<[BackgroundAssetVersionInternalBetaReleases]?> {
                    .init(key: "fields[backgroundAssetVersionInternalBetaReleases]")
                }

                /// the fields to include for returned resources of type backgroundAssetVersions
                public static var backgroundAssetVersions: Relation<[BackgroundAssetVersions]?> {
                    .init(key: "fields[backgroundAssetVersions]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Filter: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct InternalBetaReleaseState: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var readyForTesting: Self {
                    .init(rawValue: "READY_FOR_TESTING")
                }

                public static var superseded: Self {
                    .init(rawValue: "SUPERSEDED")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct State: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
                public static var awaitingUpload: Self {
                    .init(rawValue: "AWAITING_UPLOAD")
                }

                public static var complete: Self {
                    .init(rawValue: "COMPLETE")
                }

                public static var failed: Self {
                    .init(rawValue: "FAILED")
                }

                public static var processing: Self {
                    .init(rawValue: "PROCESSING")
                }

                public var description: String {
                    rawValue
                }

                public var rawValue: String

                public init(rawValue: String) {
                    self.rawValue = rawValue
                }
            }

            public struct Relation<T>: Hashable {
                /// filter by attribute 'internalBetaRelease.state'
                public static var internalBetaReleaseState: Relation<[InternalBetaReleaseState]?> {
                    .init(key: "filter[internalBetaRelease.state]")
                }

                /// filter by attribute 'state'
                public static var state: Relation<[State]?> {
                    .init(key: "filter[state]")
                }

                /// filter by attribute 'version'
                public static var version: Relation<[String]?> {
                    .init(key: "filter[version]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public struct Include: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var assetFile: Self {
                .init(rawValue: "assetFile")
            }

            public static var internalBetaRelease: Self {
                .init(rawValue: "internalBetaRelease")
            }

            public static var manifestFile: Self {
                .init(rawValue: "manifestFile")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }

        public struct Sort: Hashable, Codable, RawRepresentable, CustomStringConvertible, Sendable {
            public static var version: Self {
                .init(rawValue: "version")
            }

            public static var versionDesc: Self {
                .init(rawValue: "-version")
            }

            public var description: String {
                rawValue
            }

            public var rawValue: String

            public init(rawValue: String) {
                self.rawValue = rawValue
            }
        }
    }
}

// swiftlint:enable all
