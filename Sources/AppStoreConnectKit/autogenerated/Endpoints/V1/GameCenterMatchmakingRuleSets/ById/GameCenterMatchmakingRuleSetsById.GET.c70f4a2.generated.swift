// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.GameCenterMatchmakingRuleSets.ById {
    public struct GET: Endpoint {
        public typealias Response = GameCenterMatchmakingRuleSetResponse

        public var path: String {
            "/v1/gameCenterMatchmakingRuleSets/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[gameCenterMatchmakingQueues]",
                             value: parameters.fields[.gameCenterMatchmakingQueues]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterMatchmakingRuleSets]",
                             value: parameters.fields[.gameCenterMatchmakingRuleSets]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterMatchmakingRules]",
                             value: parameters.fields[.gameCenterMatchmakingRules]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[gameCenterMatchmakingTeams]",
                             value: parameters.fields[.gameCenterMatchmakingTeams]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[matchmakingQueues]",
                             value: parameters.limit[.matchmakingQueues].map { "\($0)" }),
                URLQueryItem(name: "limit[rules]",
                             value: parameters.limit[.rules].map { "\($0)" }),
                URLQueryItem(name: "limit[teams]",
                             value: parameters.limit[.teams].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single GameCenterMatchmakingRuleSet as `GameCenterMatchmakingRuleSetResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(GameCenterMatchmakingRuleSetResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.GameCenterMatchmakingRuleSets.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum GameCenterMatchmakingQueues: Hashable, Codable, RawRepresentable {
                case experimentRuleSet
                case referenceName
                case ruleSet
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .experimentRuleSet: return "experimentRuleSet"
                    case .referenceName: return "referenceName"
                    case .ruleSet: return "ruleSet"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "experimentRuleSet": self = .experimentRuleSet
                    case "referenceName": self = .referenceName
                    case "ruleSet": self = .ruleSet
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterMatchmakingRuleSets: Hashable, Codable, RawRepresentable {
                case matchmakingQueues
                case maxPlayers
                case minPlayers
                case referenceName
                case ruleLanguageVersion
                case rules
                case teams
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .matchmakingQueues: return "matchmakingQueues"
                    case .maxPlayers: return "maxPlayers"
                    case .minPlayers: return "minPlayers"
                    case .referenceName: return "referenceName"
                    case .ruleLanguageVersion: return "ruleLanguageVersion"
                    case .rules: return "rules"
                    case .teams: return "teams"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "matchmakingQueues": self = .matchmakingQueues
                    case "maxPlayers": self = .maxPlayers
                    case "minPlayers": self = .minPlayers
                    case "referenceName": self = .referenceName
                    case "ruleLanguageVersion": self = .ruleLanguageVersion
                    case "rules": self = .rules
                    case "teams": self = .teams
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterMatchmakingRules: Hashable, Codable, RawRepresentable {
                case description
                case expression
                case referenceName
                case ruleSet
                case type
                case weight
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .description: return "description"
                    case .expression: return "expression"
                    case .referenceName: return "referenceName"
                    case .ruleSet: return "ruleSet"
                    case .type: return "type"
                    case .weight: return "weight"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "description": self = .description
                    case "expression": self = .expression
                    case "referenceName": self = .referenceName
                    case "ruleSet": self = .ruleSet
                    case "type": self = .type
                    case "weight": self = .weight
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum GameCenterMatchmakingTeams: Hashable, Codable, RawRepresentable {
                case maxPlayers
                case minPlayers
                case referenceName
                case ruleSet
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .maxPlayers: return "maxPlayers"
                    case .minPlayers: return "minPlayers"
                    case .referenceName: return "referenceName"
                    case .ruleSet: return "ruleSet"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "maxPlayers": self = .maxPlayers
                    case "minPlayers": self = .minPlayers
                    case "referenceName": self = .referenceName
                    case "ruleSet": self = .ruleSet
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public struct Relation<T>: Hashable {
                /// the fields to include for returned resources of type gameCenterMatchmakingQueues
                public static var gameCenterMatchmakingQueues: Relation<[GameCenterMatchmakingQueues]?> {
                    .init(key: "fields[gameCenterMatchmakingQueues]")
                }

                /// the fields to include for returned resources of type gameCenterMatchmakingRuleSets
                public static var gameCenterMatchmakingRuleSets: Relation<[GameCenterMatchmakingRuleSets]?> {
                    .init(key: "fields[gameCenterMatchmakingRuleSets]")
                }

                /// the fields to include for returned resources of type gameCenterMatchmakingRules
                public static var gameCenterMatchmakingRules: Relation<[GameCenterMatchmakingRules]?> {
                    .init(key: "fields[gameCenterMatchmakingRules]")
                }

                /// the fields to include for returned resources of type gameCenterMatchmakingTeams
                public static var gameCenterMatchmakingTeams: Relation<[GameCenterMatchmakingTeams]?> {
                    .init(key: "fields[gameCenterMatchmakingTeams]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case matchmakingQueues
            case rules
            case teams
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .matchmakingQueues: return "matchmakingQueues"
                case .rules: return "rules"
                case .teams: return "teams"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "matchmakingQueues": self = .matchmakingQueues
                case "rules": self = .rules
                case "teams": self = .teams
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public struct Relation<T>: Hashable {
                /// maximum number of related matchmakingQueues returned (when they are included)
                public static var matchmakingQueues: Relation<Int?> {
                    .init(key: "limit[matchmakingQueues]")
                }

                /// maximum number of related rules returned (when they are included)
                public static var rules: Relation<Int?> {
                    .init(key: "limit[rules]")
                }

                /// maximum number of related teams returned (when they are included)
                public static var teams: Relation<Int?> {
                    .init(key: "limit[teams]")
                }

                internal let key: String

                public func hash(into hasher: inout Hasher) {
                    hasher.combine(key)
                }
            }
        }
    }
}

// swiftlint:enable all
