// autogenerated

// swiftlint:disable all
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

extension V1.AppScreenshotSets.ById {
    public struct GET: Endpoint {
        public typealias Response = AppScreenshotSetResponse

        public var path: String {
            "/v1/appScreenshotSets/\(id)"
        }

        /// the id of the requested resource
        public var id: String

        public var parameters: Parameters = Parameters()

        public init(id: String) {
            self.id = id
        }

        public func request(with baseURL: URL) throws -> URLRequest? {
            var components = URLComponents(url: baseURL, resolvingAgainstBaseURL: true)
            components?.path = path

            components?.queryItems = [
                URLQueryItem(name: "fields[appScreenshotSets]",
                             value: parameters.fields[.appScreenshotSets]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "fields[appScreenshots]",
                             value: parameters.fields[.appScreenshots]?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "include",
                             value: parameters.include?.map { "\($0)" }.joined(separator: ",")),
                URLQueryItem(name: "limit[appScreenshots]",
                             value: parameters.limit[.appScreenshots].map { "\($0)" })
            ].filter { $0.value != nil }
            if components?.queryItems?.isEmpty ?? false {
                components?.queryItems = nil
            }

            var urlRequest = components?.url.map { URLRequest(url: $0) }
            urlRequest?.httpMethod = "GET"
            return urlRequest
        }

        /// - Returns: **200**, Single AppScreenshotSet as `AppScreenshotSetResponse`
        /// - Throws: **400**, Parameter error(s) as `ErrorResponse`
        /// - Throws: **403**, Forbidden error as `ErrorResponse`
        /// - Throws: **404**, Not found error as `ErrorResponse`
        public static func response(from data: Data, urlResponse: HTTPURLResponse) throws -> Response {
            var jsonDecoder: JSONDecoder {
                let decoder = JSONDecoder()
                return decoder
            }

            switch urlResponse.statusCode {
            case 200:
                return try jsonDecoder.decode(AppScreenshotSetResponse.self, from: data)

            case 400:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 403:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            case 404:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)

            default:
                throw try jsonDecoder.decode(ErrorResponse.self, from: data)
            }
        }
    }
}

extension V1.AppScreenshotSets.ById.GET {
    public struct Parameters: Hashable {
        public var fields: Fields = Fields()

        /// comma-separated list of relationships to include
        public var include: [Include]?

        public var limit: Limit = Limit()

        public struct Fields: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]

            public enum AppScreenshotSets: Hashable, Codable, RawRepresentable {
                case appCustomProductPageLocalization
                case appScreenshots
                case appStoreVersionExperimentTreatmentLocalization
                case appStoreVersionLocalization
                case screenshotDisplayType
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appCustomProductPageLocalization: return "appCustomProductPageLocalization"
                    case .appScreenshots: return "appScreenshots"
                    case .appStoreVersionExperimentTreatmentLocalization: return "appStoreVersionExperimentTreatmentLocalization"
                    case .appStoreVersionLocalization: return "appStoreVersionLocalization"
                    case .screenshotDisplayType: return "screenshotDisplayType"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appCustomProductPageLocalization": self = .appCustomProductPageLocalization
                    case "appScreenshots": self = .appScreenshots
                    case "appStoreVersionExperimentTreatmentLocalization": self = .appStoreVersionExperimentTreatmentLocalization
                    case "appStoreVersionLocalization": self = .appStoreVersionLocalization
                    case "screenshotDisplayType": self = .screenshotDisplayType
                    default: self = .unknown(rawValue)
                    }
                }
            }

            public enum AppScreenshots: Hashable, Codable, RawRepresentable {
                case appScreenshotSet
                case assetDeliveryState
                case assetToken
                case assetType
                case fileName
                case fileSize
                case imageAsset
                case sourceFileChecksum
                case uploadOperations
                case uploaded
                case unknown(String)

                public var rawValue: String {
                    switch self {
                    case .appScreenshotSet: return "appScreenshotSet"
                    case .assetDeliveryState: return "assetDeliveryState"
                    case .assetToken: return "assetToken"
                    case .assetType: return "assetType"
                    case .fileName: return "fileName"
                    case .fileSize: return "fileSize"
                    case .imageAsset: return "imageAsset"
                    case .sourceFileChecksum: return "sourceFileChecksum"
                    case .uploadOperations: return "uploadOperations"
                    case .uploaded: return "uploaded"
                    case .unknown(let rawValue): return rawValue
                    }
                }

                public init(rawValue: String) {
                    switch rawValue {
                    case "appScreenshotSet": self = .appScreenshotSet
                    case "assetDeliveryState": self = .assetDeliveryState
                    case "assetToken": self = .assetToken
                    case "assetType": self = .assetType
                    case "fileName": self = .fileName
                    case "fileSize": self = .fileSize
                    case "imageAsset": self = .imageAsset
                    case "sourceFileChecksum": self = .sourceFileChecksum
                    case "uploadOperations": self = .uploadOperations
                    case "uploaded": self = .uploaded
                    default: self = .unknown(rawValue)
                    }
                }
            }
        }

        public enum Include: Hashable, Codable, RawRepresentable {
            case appCustomProductPageLocalization
            case appScreenshots
            case appStoreVersionExperimentTreatmentLocalization
            case appStoreVersionLocalization
            case unknown(String)

            public var rawValue: String {
                switch self {
                case .appCustomProductPageLocalization: return "appCustomProductPageLocalization"
                case .appScreenshots: return "appScreenshots"
                case .appStoreVersionExperimentTreatmentLocalization: return "appStoreVersionExperimentTreatmentLocalization"
                case .appStoreVersionLocalization: return "appStoreVersionLocalization"
                case .unknown(let rawValue): return rawValue
                }
            }

            public init(rawValue: String) {
                switch rawValue {
                case "appCustomProductPageLocalization": self = .appCustomProductPageLocalization
                case "appScreenshots": self = .appScreenshots
                case "appStoreVersionExperimentTreatmentLocalization": self = .appStoreVersionExperimentTreatmentLocalization
                case "appStoreVersionLocalization": self = .appStoreVersionLocalization
                default: self = .unknown(rawValue)
                }
            }
        }

        public struct Limit: Hashable {
            public subscript <T: Hashable>(_ relation: Relation<Self, T>) -> T {
                get { values[relation]?.base as! T }
                set { values[relation] = AnyHashable(newValue) }
            }

            private var values: [AnyHashable: AnyHashable] = [:]
        }
    }
}

extension Relation<V1.AppScreenshotSets.ById.GET.Parameters.Fields, [V1.AppScreenshotSets.ById.GET.Parameters.Fields.AppScreenshotSets]?> {
    /// the fields to include for returned resources of type appScreenshotSets
    public static var appScreenshotSets: Relation {
        .init(key: "fields[appScreenshotSets]")
    }
}

extension Relation<V1.AppScreenshotSets.ById.GET.Parameters.Fields, [V1.AppScreenshotSets.ById.GET.Parameters.Fields.AppScreenshots]?> {
    /// the fields to include for returned resources of type appScreenshots
    public static var appScreenshots: Relation {
        .init(key: "fields[appScreenshots]")
    }
}

extension Relation<V1.AppScreenshotSets.ById.GET.Parameters.Limit, Int?> {
    /// maximum number of related appScreenshots returned (when they are included)
    public static var appScreenshots: Relation {
        .init(key: "limit[appScreenshots]")
    }
}

// swiftlint:enable all
